{"version":3,"sources":["index.ts"],"names":[],"mappings":";;AAAA;AACA,IAAI,0BAA0B,uBAA9B;AACA,IAAI,oBAAoB,IAAxB;AACA,IAAI,6BAA6B,sBAAsB,iBAAvD;AACA,IAAI,mBAAmB,IAAvB;AACA,IAAI,iBAAiB,EAAC,MAAM,KAAP,EAAc,OAAO,MAArB,EAArB;AACA,IAAI,iBAAiB,uBAArB;;AAEA;AACA,IAAI,UAAU,QAAQ,SAAR,CAAd;AACA,IAAI,UAAU,QAAQ,SAAR,CAAd;AACA,IAAI,WAAW,QAAQ,MAAR,CAAf;AACA,QAAQ,QAAR;AACA,IAAI,QAAQ,QAAQ,eAAR,EAAyB,KAArC;;AAEA;AACA,IAAI,cAAc,SAAlB;;AAEA,IAAI,SAAS,MAAM,QAAN,EAAgB,CAAC,KAAD,CAAhB,EAAyB;AAClC,SAAK,cAD6B;AAElC,WAAO,CAAC,QAAD,EAAW,SAAX,EAAsB,SAAtB;AAF2B,CAAzB,CAAb;;AAKA;;AAEA;AACA,IAAI,aAAa,SAAb,UAAa,CAAC,IAAD,EAAO,GAAP,EAAe;AAC5B,WAAO,IAAI,UAAJ,CAAe,OAAf,IAA0B,uBAA1B,GAAoD,EAAC,KAAK,CAAC,0BAAD,CAAN,EAA3D;AACH,CAFD;;AAIA;AACA,QAAQ;AACJ,UAAM,gBADF;AAEJ,YAAQ,cAFJ;AAGJ,eAAW,CAAC,UAAD;AAHP,CAAR;;AAMA;AACA,YAAY,GAAZ,CAAgB,QAAQ,MAAR,CAAe,QAAf,CAAhB;AACA,YAAY,GAAZ,CAAgB,GAAhB,EAAqB,UAAC,OAAD,EAAU,QAAV,EAAuB;AACxC,aAAS,QAAT,CAAkB,YAAY,oBAA9B;AACH,CAFD;;AAIA;AACA,SAAS,MAAT,CAAgB,WAAhB,EAA6B,MAA7B,CAAoC,iBAApC,EAAuD,YAAI,CAAE,CAA7D","file":"index.js","sourcesContent":["// settings      ============================================================================\r\nlet dotNetCoreServerAddress = \"http://127.0.0.1:4000\";\r\nlet staticContentPort = 3000;\r\nlet staticContentServerAddress = \"http://127.0.0.1:\" + staticContentPort;\r\nlet reverseProxyPort = 5000;\r\nlet loggerSettings = {name: 'std', level: 'warn'};\r\nlet dotnetCoreRoot = 'api/src/ForeFrontCore';\r\n\r\n// imports       ============================================================================\r\nlet express = require('express');\r\nlet redbird = require('redbird');\r\nlet nodeHttp = require('http');\r\nrequire('bunyan');\r\nlet spawn = require('child_process').spawn;\r\n\r\n// instances     ============================================================================\r\nlet clientFiles = express();\r\n\r\nlet dotnet = spawn('dotnet' ,['run'], {\r\n    cwd: dotnetCoreRoot,\r\n    stdio: ['ignore', 'inherit', 'inherit']\r\n});\r\n\r\n// configuration ============================================================================\r\n\r\n// reverse proxy resolver      ===->\r\nlet resolveUrl = (host, url) => {\r\n    return url.startsWith(\"/api/\") ? dotNetCoreServerAddress : {url: [staticContentServerAddress]};\r\n};\r\n\r\n// start redbird reverse proxy ===->\r\nredbird({\r\n    port: reverseProxyPort,\r\n    bunyan: loggerSettings,\r\n    resolvers: [resolveUrl]\r\n});\r\n\r\n// express       ===->\r\nclientFiles.use(express.static('client'));\r\nclientFiles.get('*', (request, response) => {\r\n    response.sendFile(__dirname + '/client/index.html' );\r\n});\r\n\r\n// start serving static files    ===->\r\nnodeHttp.Server(clientFiles).listen(staticContentPort, ()=>{});\r\n"]}