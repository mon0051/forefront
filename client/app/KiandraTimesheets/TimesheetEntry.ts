import {Dependent} from "./Dependent";
import {Project} from "./Project";
import {Agreement} from "./Agreement";

class TimesheetEntry implements Dependent {
    dependencies: Array<any> = [
        Agreement,
        Project
    ];
    AgreementId;
    AgreementName;
    AgreementType;
    BillableOptionDescription;
    ChargecodeId;
    ClientAbbreviation;
    ClientId;
    ClientIsActive;
    ClientIsInternalClient;
    ClientName;
    ClientType;
    EmployeeDailyTargetHours;
    EmployeeDailyTargetRevenue;
    EmployeeEmail;
    EmployeeId;
    EmployeeIsActive;
    EmployeeName;
    EmployeeStartDate;
    EmployeeTargetRate;
    EmployeeTeamId;
    EmployeeTeamName;
    IsBillable;
    IsProject;
    ProjectAbbreviation;
    ProjectBudget;
    ProjectId;
    ProjectIsActive;
    ProjectIsPresales;
    ProjectIsServiceAgreement;
    ProjectName;
    ProjectTeamId;
    ProjectType;
    ServiceId;
    TaskId;
    TimesheetEntryHourlyRate;
    TimesheetEntryInternalNotes;
    TimesheetEntryRevenue;
    WorkRole;
    WorkTypeBillableOptionDescription;
    WorkTypeId;
    TimesheetEntryId;
}

class TimesheetEntryDetail implements Dependent {
    parentView:TimesheetEntry = new TimesheetEntry();
    dependencies: Array<any> = [TimesheetEntry];
    TimesheetEntryId;
    TimesheetEntryDate;
    TimesheetEntryStartTime;
    TimesheetEntryStopTime;
    TimesheetEntryHourlyRate;
    TimesheetEntryHours;
    TimesheetEntryRevenue;
    TimesheetEntryNotes;
    EmployeeId;
    EmployeeName;
    EmployeeDailyTargetHours;
    EmployeeEmail;
    EmployeeDailyTargetRevenue;
    EmployeeStartDate;
    EmployeeFinishDate;
    EmployeeTargetRate;
    EmployeeTeamId;
    EmployeeTeamName;
    EmployeeIsActive;
    ClientId;
    ClientName;
    ClientAbbreviation;
    ClientIsServiceAgreementClient;
    ClientIsInternalClient;
    ClientType;
    ClientIsActive;
    ProjectId;
    ProjectName;
    ProjectAbbreviation;
    ProjectType;
    ProjectBudget;
    ProjectTeamId;
    ProjectTeamName;
    ProjectIsITServices;
    ProjectIsServiceAgreement;
    ProjectIsSupportProject;
    ProjectIsLeaveProject;
    ProjectIsPresales;
    ProjectIsShownInSharepoint;
    ProjectIsActive;
    TaskId;
    TaskName;
    TaskAbbreviation;
    TaskIsActive;
    TimesheetActualHours;
    TicketNumber;
    IsProject;
    BillableHours;
    BillingType;
    BillingCycle;
    HasChargeCode;
    ChargeCode;
    WorkTypeName;
    ChargeCodeWorkTypeName;
    WorkTypeBillableOptionDescription;
    BillableOptionDescription;
    WorkTypeId;
    ServiceId;
    IsBillable;
    TimesheetEntryInternalNotes;
    IsOvertime;
    ServiceType;
    Board;
    WorkRole;
}

class TimesheetEntryBreakdown implements Dependent {
    parentView:TimesheetEntryDetail = new TimesheetEntryDetail();
    dependencies: Array<any> = [TimesheetEntryDetail];

    BillableHours;
    BillableOptionDescription;
    BillingCycle;
    BillingType;
    Board;
    ChargeCode;
    ChargeCodeWorkTypeName;
    ClientAbbreviation;
    ClientId;
    ClientIsActive;
    ClientIsInternalClient;
    ClientIsServiceAgreementClient;
    ClientName;
    ClientType;
    EmployeeDailyTargetHours;
    EmployeeDailyTargetRevenue;
    EmployeeEmail;
    EmployeeFinishDate;
    EmployeeId;
    EmployeeIsActive;
    EmployeeName;
    EmployeeStartDate;
    EmployeeTargetRate;
    EmployeeTeamId;
    EmployeeTeamName;
    HasChargeCode;
    IsBillable;
    IsOvertime;
    IsProject;
    ProjectAbbreviation;
    ProjectBudget;
    ProjectId;
    ProjectIsActive;
    ProjectIsITServices;
    ProjectIsLeaveProject;
    ProjectIsPresales;
    ProjectIsServiceAgreement;
    ProjectIsShownInSharepoint;
    ProjectIsSupportProject;
    ProjectName;
    ProjectTeamId;
    ProjectTeamName;
    ProjectType;
    ServiceId;
    ServiceType;
    TaskAbbreviation;
    TaskId;
    TaskIsActive;
    TaskName;
    TicketNumber;
    TimesheetActualHours;
    TimesheetEntryDate;
    TimesheetEntryHourlyRate;
    TimesheetEntryHours;
    TimesheetEntryInternalNotes;
    TimesheetEntryNotes;
    TimesheetEntryRevenue;
    TimesheetEntryStartTime;
    TimesheetEntryStopTime;
    WorkRole;
    WorkTypeBillableOptionDescription;
    WorkTypeId;
    WorkTypeName;
    TimesheetEntry;
}

class TimesheetEntryByDay implements Dependent {
    parentView:TimesheetEntryBreakdown = new TimesheetEntryBreakdown();
    dependencies: Array<any> = [TimesheetEntryBreakdown];

    ActualHours;
    AdminHours;
    AdminRevenue;
    AfterHoursBillableHours;
    AfterHoursBillableRevenue;
    AfterHoursInternalBillableHours;
    AfterHoursInternalBillableRevenue;
    AfterHoursZeroDollarHours;
    BillableForecast;
    BillableHours;
    BillableHoursExcludingAfterHours;
    BillableRevenueExcludingAfterHours;
    EmployeeId;
    EmployeeName;
    EmployeeTargetHours;
    EmployeeTargetRate;
    EmployeeTargetRevenue;
    EmployeeTeamId;
    InternalBillableHours;
    InternalBillableHoursExcludingAfterHours;
    InternalBillableRevenueExcludingAfterHours;
    InternalHours;
    InternalNonBillableHours;
    InternalTaskHours;
    IsOvertime;
    IsPublicHoliday;
    IsWeekend;
    ITServicesHours;
    LeaveAndFillerHours;
    PersonalHours;
    SDHours;
    ServiceAgreementHours;
    SupportHours;
    TargetAdjustedHours;
    TimeInLieuHours;
    TimesheetEntryDate;
    TimesheetEntryEmployeeId;
    TimesheetEntryHours;
    TimesheetEntryRevenue;
    TotalClientHours;
    TotalInternalHours;
    TotalLeaveHours;
    TotalRevenue;
    ZeroDollarHours;
    ZeroDollarHoursExcludingAfterHours;
    ZeroDollarHoursExcludingInternal;
    ZeroDollarHoursForBillableClientsExcludingBusinessDevelopment;
    TimesheetEntryId;
}

export class TimesheetEntryByDayExtended implements Dependent {
    parentView: TimesheetEntryByDay = new TimesheetEntryByDay();

    dependencies: Array<any> = [
        TimesheetEntryByDay
    ];
    adjustedLeaveHours;
    adjustedTargetRevenue;
    actualHours;
    adminHours;
    adminRevenue;
    afterHoursBillableHours;
    afterHoursBillableRevenue;
    afterHoursInternalBillableHours;
    afterHoursInternalBillableRevenue;
    afterHoursZeroDollarHours;
    billableForecast;
    billableHours;
    billableHoursExcludingAfterHours;
    billableRevenueExcludingAfterHours;
    employeeId;
    employeeName;
    employeeTargetHours;
    employeeTargetRate;
    employeeTargetRevenue;
    employeeTeamId;
    internalBillableHours;
    internalBillableHoursExcludingAfterHours;
    internalBillableRevenueExcludingAfterHours;
    internalHours;
    internalNonBillableHours;
    internalTaskHours;
    isOvertime;
    isPublicHoliday;
    isWeekend;
    itservicesHours;
    leaveAndFillerHours;
    personalHours;
    sdhours;
    serviceAgreementHours;
    supportHours;
    targetAdjustedHours;
    timeInLieuHours;
    timesheetEntryDate;
    timesheetEntryEmployeeId;
    timesheetEntryHours;
    timesheetEntryRevenue;
    totalClientHours;
    totalInternalHours;
    totalLeaveHours;
    totalRevenue;
    zeroDollarHours;
    zeroDollarHoursExcludingAfterHours;
    zeroDollarHoursExcludingInternal;
    zeroDollarHoursForBillableClientsExcludingBusinessDevelopment;
    timesheetEntryId;
}