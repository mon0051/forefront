{"version":3,"sources":["date_pipe.js"],"names":[],"mappings":";;;;;;;qjBAAA;;;;;;;;;AAOA;;AACA;;AACA;;AACA;;AACA;;;;AACA;AACA,IAAI,gBAAgB,OAApB;;IACa,Q,WAAA,Q;;;;;;;kCACC,K,EAA+B;AAAA,gBAAxB,OAAwB,yDAAd,YAAc;;AACrC,gBAAI,mBAAQ,KAAR,CAAJ,EACI,OAAO,IAAP;AACJ,gBAAI,CAAC,KAAK,QAAL,CAAc,KAAd,CAAL,EAA2B;AACvB,sBAAM,kEAAiC,QAAjC,EAA2C,KAA3C,CAAN;AACH;AACD,gBAAI,oBAAc,SAAd,CAAwB,KAAxB,CAAJ,EAAoC;AAChC,wBAAQ,kBAAY,UAAZ,CAAuB,oBAAc,QAAd,CAAuB,KAAvB,EAA8B,EAA9B,CAAvB,CAAR;AACH,aAFD,MAGK,IAAI,oBAAS,KAAT,CAAJ,EAAqB;AACtB,wBAAQ,kBAAY,aAAZ,CAA0B,KAA1B,CAAR;AACH;AACD,gBAAI,6BAAiB,QAAjB,CAA0B,SAAS,QAAnC,EAA6C,OAA7C,CAAJ,EAA2D;AACvD,0BAAU,6BAAiB,GAAjB,CAAqB,SAAS,QAA9B,EAAwC,OAAxC,CAAV;AACH;AACD,mBAAO,oBAAc,MAAd,CAAqB,KAArB,EAA4B,aAA5B,EAA2C,OAA3C,CAAP;AACH;;;iCACQ,G,EAAK;AACV,gBAAI,kBAAO,GAAP,KAAe,oBAAc,SAAd,CAAwB,GAAxB,CAAnB,EAAiD;AAC7C,uBAAO,IAAP;AACH;AACD,gBAAI,oBAAS,GAAT,KAAiB,kBAAO,kBAAY,aAAZ,CAA0B,GAA1B,CAAP,CAArB,EAA6D;AACzD,uBAAO,IAAP;AACH;AACD,mBAAO,KAAP;AACH;;;;;AAEL;;;AACA,SAAS,QAAT,GAAoB;AAChB,cAAU,UADM;AAEhB,aAAS,OAFO;AAGhB,gBAAY,YAHI;AAIhB,gBAAY,QAJI;AAKhB,kBAAc,OALE;AAMhB,iBAAa,KANG;AAOhB,kBAAc,KAPE;AAQhB,iBAAa;AARG,CAApB;AAUA;AACA,SAAS,UAAT,GAAsB,CAClB,EAAE,gBAAF,EAAc,MAAM,CAAC,EAAE,MAAM,MAAR,EAAgB,MAAM,IAAtB,EAAD,CAApB,EADkB,CAAtB;AAGA","file":"date_pipe-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Pipe } from '@angular/core';\nimport { StringMapWrapper } from '../facade/collection';\nimport { DateFormatter } from '../facade/intl';\nimport { DateWrapper, NumberWrapper, isBlank, isDate, isString } from '../facade/lang';\nimport { InvalidPipeArgumentException } from './invalid_pipe_argument_exception';\n// TODO: move to a global configurable location along with other i18n components.\nvar defaultLocale = 'en-US';\nexport class DatePipe {\n    transform(value, pattern = 'mediumDate') {\n        if (isBlank(value))\n            return null;\n        if (!this.supports(value)) {\n            throw new InvalidPipeArgumentException(DatePipe, value);\n        }\n        if (NumberWrapper.isNumeric(value)) {\n            value = DateWrapper.fromMillis(NumberWrapper.parseInt(value, 10));\n        }\n        else if (isString(value)) {\n            value = DateWrapper.fromISOString(value);\n        }\n        if (StringMapWrapper.contains(DatePipe._ALIASES, pattern)) {\n            pattern = StringMapWrapper.get(DatePipe._ALIASES, pattern);\n        }\n        return DateFormatter.format(value, defaultLocale, pattern);\n    }\n    supports(obj) {\n        if (isDate(obj) || NumberWrapper.isNumeric(obj)) {\n            return true;\n        }\n        if (isString(obj) && isDate(DateWrapper.fromISOString(obj))) {\n            return true;\n        }\n        return false;\n    }\n}\n/** @internal */\nDatePipe._ALIASES = {\n    'medium': 'yMMMdjms',\n    'short': 'yMdjm',\n    'fullDate': 'yMMMMEEEEd',\n    'longDate': 'yMMMMd',\n    'mediumDate': 'yMMMd',\n    'shortDate': 'yMd',\n    'mediumTime': 'jms',\n    'shortTime': 'jm'\n};\n/** @nocollapse */\nDatePipe.decorators = [\n    { type: Pipe, args: [{ name: 'date', pure: true },] },\n];\n//# sourceMappingURL=date_pipe.js.map"]}