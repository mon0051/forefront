{"version":3,"sources":["replace_pipe.js"],"names":[],"mappings":";;;;;;;qjBAAA;;;;;;;;;AAOA;;AACA;;AACA;;;;IACa,W,WAAA,W;;;;;;;kCACC,K,EAAO,O,EAAS,W,EAAa;AACnC,gBAAI,mBAAQ,KAAR,CAAJ,EAAoB;AAChB,uBAAO,KAAP;AACH;AACD,gBAAI,CAAC,KAAK,eAAL,CAAqB,KAArB,CAAL,EAAkC;AAC9B,sBAAM,kEAAiC,WAAjC,EAA8C,KAA9C,CAAN;AACH;AACD,gBAAI,QAAQ,MAAM,QAAN,EAAZ;AACA,gBAAI,CAAC,KAAK,iBAAL,CAAuB,OAAvB,CAAL,EAAsC;AAClC,sBAAM,kEAAiC,WAAjC,EAA8C,OAA9C,CAAN;AACH;AACD,gBAAI,CAAC,KAAK,qBAAL,CAA2B,WAA3B,CAAL,EAA8C;AAC1C,sBAAM,kEAAiC,WAAjC,EAA8C,WAA9C,CAAN;AACH;AACD,gBAAI,sBAAW,WAAX,CAAJ,EAA6B;AACzB,oBAAM,aAAa,oBAAS,OAAT,IAAoB,oBAAc,MAAd,CAAqB,OAArB,CAApB,GAAoD,OAAvE;AACA,uBAAO,oBAAc,gBAAd,CAA+B,KAA/B,EAAsC,UAAtC,EAAkD,WAAlD,CAAP;AACH;AACD,gBAAI,mBAAmB,MAAvB,EAA+B;AAC3B;AACA,uBAAO,oBAAc,UAAd,CAAyB,KAAzB,EAAgC,OAAhC,EAAyC,WAAzC,CAAP;AACH;AACD,mBAAO,oBAAc,OAAd,CAAsB,KAAtB,EAA6B,OAA7B,EAAsC,WAAtC,CAAP;AACH;;;wCACe,K,EAAO;AAAE,mBAAO,oBAAS,KAAT,KAAmB,oBAAS,KAAT,CAA1B;AAA4C;;;0CACnD,O,EAAS;AACvB,mBAAO,oBAAS,OAAT,KAAqB,mBAAmB,MAA/C;AACH;;;8CACqB,W,EAAa;AAC/B,mBAAO,oBAAS,WAAT,KAAyB,sBAAW,WAAX,CAAhC;AACH;;;;;AAEL;;;AACA,YAAY,UAAZ,GAAyB,CACrB,EAAE,gBAAF,EAAc,MAAM,CAAC,EAAE,MAAM,SAAR,EAAD,CAApB,EADqB,CAAzB;AAGA","file":"replace_pipe-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Pipe } from '@angular/core';\nimport { RegExpWrapper, StringWrapper, isBlank, isFunction, isNumber, isString } from '../facade/lang';\nimport { InvalidPipeArgumentException } from './invalid_pipe_argument_exception';\nexport class ReplacePipe {\n    transform(value, pattern, replacement) {\n        if (isBlank(value)) {\n            return value;\n        }\n        if (!this._supportedInput(value)) {\n            throw new InvalidPipeArgumentException(ReplacePipe, value);\n        }\n        var input = value.toString();\n        if (!this._supportedPattern(pattern)) {\n            throw new InvalidPipeArgumentException(ReplacePipe, pattern);\n        }\n        if (!this._supportedReplacement(replacement)) {\n            throw new InvalidPipeArgumentException(ReplacePipe, replacement);\n        }\n        if (isFunction(replacement)) {\n            const rgxPattern = isString(pattern) ? RegExpWrapper.create(pattern) : pattern;\n            return StringWrapper.replaceAllMapped(input, rgxPattern, replacement);\n        }\n        if (pattern instanceof RegExp) {\n            // use the replaceAll variant\n            return StringWrapper.replaceAll(input, pattern, replacement);\n        }\n        return StringWrapper.replace(input, pattern, replacement);\n    }\n    _supportedInput(input) { return isString(input) || isNumber(input); }\n    _supportedPattern(pattern) {\n        return isString(pattern) || pattern instanceof RegExp;\n    }\n    _supportedReplacement(replacement) {\n        return isString(replacement) || isFunction(replacement);\n    }\n}\n/** @nocollapse */\nReplacePipe.decorators = [\n    { type: Pipe, args: [{ name: 'replace' },] },\n];\n//# sourceMappingURL=replace_pipe.js.map"]}