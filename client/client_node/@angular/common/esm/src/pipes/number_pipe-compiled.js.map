{"version":3,"sources":["number_pipe.js"],"names":[],"mappings":";;;;;;;qjBAAA;;;;;;;;;AAOA;;AACA;;AACA;;AACA;;AACA;;;;AACA,IAAI,gBAAgB,OAApB;AACA,IAAM,wBAAwB,+BAA9B;AACA;;;AAGA,SAAS,YAAT,CAAsB,IAAtB,EAA4B,KAA5B,EAAmC,KAAnC,EAA0C,MAA1C,EAA6F;AAAA,QAA3C,QAA2C,yDAAhC,IAAgC;AAAA,QAA1B,gBAA0B,yDAAP,KAAO;;AACzF,QAAI,mBAAQ,KAAR,CAAJ,EACI,OAAO,IAAP;AACJ,QAAI,CAAC,oBAAS,KAAT,CAAL,EAAsB;AAClB,cAAM,kEAAiC,IAAjC,EAAuC,KAAvC,CAAN;AACH;AACD,QAAI,SAAS,CAAb;AAAA,QAAgB,cAAc,CAA9B;AAAA,QAAiC,cAAc,CAA/C;AACA,QAAI,qBAAU,MAAV,CAAJ,EAAuB;AACnB,YAAI,QAAQ,oBAAc,UAAd,CAAyB,qBAAzB,EAAgD,MAAhD,CAAZ;AACA,YAAI,mBAAQ,KAAR,CAAJ,EAAoB;AAChB,kBAAM,8BAAqB,MAArB,iDAAN;AACH;AACD,YAAI,qBAAU,MAAM,CAAN,CAAV,CAAJ,EAAyB;AACrB,qBAAS,oBAAc,iBAAd,CAAgC,MAAM,CAAN,CAAhC,CAAT;AACH;AACD,YAAI,qBAAU,MAAM,CAAN,CAAV,CAAJ,EAAyB;AACrB,0BAAc,oBAAc,iBAAd,CAAgC,MAAM,CAAN,CAAhC,CAAd;AACH;AACD,YAAI,qBAAU,MAAM,CAAN,CAAV,CAAJ,EAAyB;AACrB,0BAAc,oBAAc,iBAAd,CAAgC,MAAM,CAAN,CAAhC,CAAd;AACH;AACJ;AACD,WAAO,sBAAgB,MAAhB,CAAuB,KAAvB,EAA8B,aAA9B,EAA6C,KAA7C,EAAoD;AACvD,8BAAsB,MADiC;AAEvD,+BAAuB,WAFgC;AAGvD,+BAAuB,WAHgC;AAIvD,kBAAU,QAJ6C;AAKvD,0BAAkB;AALqC,KAApD,CAAP;AAOH;;IACY,W,WAAA,W;;;;;;;kCACC,K,EAAsB;AAAA,gBAAf,MAAe,yDAAN,IAAM;;AAC5B,mBAAO,aAAa,WAAb,EAA0B,KAA1B,EAAiC,wBAAkB,OAAnD,EAA4D,MAA5D,CAAP;AACH;;;;;AAEL;;;AACA,YAAY,UAAZ,GAAyB,CACrB,EAAE,gBAAF,EAAc,MAAM,CAAC,EAAE,MAAM,QAAR,EAAD,CAApB,EADqB,CAAzB;;IAGa,W,WAAA,W;;;;;;;kCACC,K,EAAsB;AAAA,gBAAf,MAAe,yDAAN,IAAM;;AAC5B,mBAAO,aAAa,WAAb,EAA0B,KAA1B,EAAiC,wBAAkB,OAAnD,EAA4D,MAA5D,CAAP;AACH;;;;;AAEL;;;AACA,YAAY,UAAZ,GAAyB,CACrB,EAAE,gBAAF,EAAc,MAAM,CAAC,EAAE,MAAM,SAAR,EAAD,CAApB,EADqB,CAAzB;;IAGa,Y,WAAA,Y;;;;;;;kCACC,K,EAAmE;AAAA,gBAA5D,YAA4D,yDAA7C,KAA6C;AAAA,gBAAtC,aAAsC,yDAAtB,KAAsB;AAAA,gBAAf,MAAe,yDAAN,IAAM;;AACzE,mBAAO,aAAa,YAAb,EAA2B,KAA3B,EAAkC,wBAAkB,QAApD,EAA8D,MAA9D,EAAsE,YAAtE,EAAoF,aAApF,CAAP;AACH;;;;;AAEL;;;AACA,aAAa,UAAb,GAA0B,CACtB,EAAE,gBAAF,EAAc,MAAM,CAAC,EAAE,MAAM,UAAR,EAAD,CAApB,EADsB,CAA1B;AAGA","file":"number_pipe-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Pipe } from '@angular/core';\nimport { BaseException } from '../facade/exceptions';\nimport { NumberFormatStyle, NumberFormatter } from '../facade/intl';\nimport { NumberWrapper, RegExpWrapper, isBlank, isNumber, isPresent } from '../facade/lang';\nimport { InvalidPipeArgumentException } from './invalid_pipe_argument_exception';\nvar defaultLocale = 'en-US';\nconst _NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$/g;\n/**\n * Internal function to format numbers used by Decimal, Percent and Date pipes.\n */\nfunction formatNumber(pipe, value, style, digits, currency = null, currencyAsSymbol = false) {\n    if (isBlank(value))\n        return null;\n    if (!isNumber(value)) {\n        throw new InvalidPipeArgumentException(pipe, value);\n    }\n    var minInt = 1, minFraction = 0, maxFraction = 3;\n    if (isPresent(digits)) {\n        var parts = RegExpWrapper.firstMatch(_NUMBER_FORMAT_REGEXP, digits);\n        if (isBlank(parts)) {\n            throw new BaseException(`${digits} is not a valid digit info for number pipes`);\n        }\n        if (isPresent(parts[1])) {\n            minInt = NumberWrapper.parseIntAutoRadix(parts[1]);\n        }\n        if (isPresent(parts[3])) {\n            minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);\n        }\n        if (isPresent(parts[5])) {\n            maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);\n        }\n    }\n    return NumberFormatter.format(value, defaultLocale, style, {\n        minimumIntegerDigits: minInt,\n        minimumFractionDigits: minFraction,\n        maximumFractionDigits: maxFraction,\n        currency: currency,\n        currencyAsSymbol: currencyAsSymbol\n    });\n}\nexport class DecimalPipe {\n    transform(value, digits = null) {\n        return formatNumber(DecimalPipe, value, NumberFormatStyle.Decimal, digits);\n    }\n}\n/** @nocollapse */\nDecimalPipe.decorators = [\n    { type: Pipe, args: [{ name: 'number' },] },\n];\nexport class PercentPipe {\n    transform(value, digits = null) {\n        return formatNumber(PercentPipe, value, NumberFormatStyle.Percent, digits);\n    }\n}\n/** @nocollapse */\nPercentPipe.decorators = [\n    { type: Pipe, args: [{ name: 'percent' },] },\n];\nexport class CurrencyPipe {\n    transform(value, currencyCode = 'USD', symbolDisplay = false, digits = null) {\n        return formatNumber(CurrencyPipe, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);\n    }\n}\n/** @nocollapse */\nCurrencyPipe.decorators = [\n    { type: Pipe, args: [{ name: 'currency' },] },\n];\n//# sourceMappingURL=number_pipe.js.map"]}