{"version":3,"sources":["radio_control_value_accessor.js"],"names":[],"mappings":"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","file":"radio_control_value_accessor-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\nvar core_1 = require('@angular/core');\nvar collection_1 = require('../facade/collection');\nvar exceptions_1 = require('../facade/exceptions');\nvar lang_1 = require('../facade/lang');\nvar control_value_accessor_1 = require('./control_value_accessor');\nvar ng_control_1 = require('./ng_control');\nexports.RADIO_VALUE_ACCESSOR = {\n    provide: control_value_accessor_1.NG_VALUE_ACCESSOR,\n    useExisting: core_1.forwardRef(function () { return RadioControlValueAccessor; }),\n    multi: true\n};\nvar RadioControlRegistry = (function () {\n    function RadioControlRegistry() {\n        this._accessors = [];\n    }\n    RadioControlRegistry.prototype.add = function (control, accessor) {\n        this._accessors.push([control, accessor]);\n    };\n    RadioControlRegistry.prototype.remove = function (accessor) {\n        var indexToRemove = -1;\n        for (var i = 0; i < this._accessors.length; ++i) {\n            if (this._accessors[i][1] === accessor) {\n                indexToRemove = i;\n            }\n        }\n        collection_1.ListWrapper.removeAt(this._accessors, indexToRemove);\n    };\n    RadioControlRegistry.prototype.select = function (accessor) {\n        var _this = this;\n        this._accessors.forEach(function (c) {\n            if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        });\n    };\n    RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return controlPair[0].control.root === accessor._control.control.root &&\n            controlPair[1].name === accessor.name;\n    };\n    /** @nocollapse */\n    RadioControlRegistry.decorators = [\n        { type: core_1.Injectable },\n    ];\n    return RadioControlRegistry;\n}());\nexports.RadioControlRegistry = RadioControlRegistry;\nvar RadioControlValueAccessor = (function () {\n    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._registry = _registry;\n        this._injector = _injector;\n        this.onChange = function () { };\n        this.onTouched = function () { };\n    }\n    RadioControlValueAccessor.prototype.ngOnInit = function () {\n        this._control = this._injector.get(ng_control_1.NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    };\n    RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };\n    RadioControlValueAccessor.prototype.writeValue = function (value) {\n        this._state = value === this.value;\n        if (lang_1.isPresent(value)) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n        }\n    };\n    RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n        var _this = this;\n        this._fn = fn;\n        this.onChange = function () {\n            fn(_this.value);\n            _this._registry.select(_this);\n        };\n    };\n    RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };\n    RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n    RadioControlValueAccessor.prototype._checkName = function () {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this._throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    };\n    RadioControlValueAccessor.prototype._throwNameError = function () {\n        throw new exceptions_1.BaseException(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n    };\n    /** @nocollapse */\n    RadioControlValueAccessor.decorators = [\n        { type: core_1.Directive, args: [{\n                    selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                    host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                    providers: [exports.RADIO_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    RadioControlValueAccessor.ctorParameters = [\n        { type: core_1.Renderer, },\n        { type: core_1.ElementRef, },\n        { type: RadioControlRegistry, },\n        { type: core_1.Injector, },\n    ];\n    /** @nocollapse */\n    RadioControlValueAccessor.propDecorators = {\n        'name': [{ type: core_1.Input },],\n        'formControlName': [{ type: core_1.Input },],\n        'value': [{ type: core_1.Input },],\n    };\n    return RadioControlValueAccessor;\n}());\nexports.RadioControlValueAccessor = RadioControlValueAccessor;\n//# sourceMappingURL=radio_control_value_accessor.js.map"]}