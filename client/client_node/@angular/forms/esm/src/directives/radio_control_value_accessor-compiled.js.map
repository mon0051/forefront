{"version":3,"sources":["radio_control_value_accessor.js"],"names":[],"mappings":"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","file":"radio_control_value_accessor-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, Injectable, Injector, Input, Renderer, forwardRef } from '@angular/core';\nimport { ListWrapper } from '../facade/collection';\nimport { BaseException } from '../facade/exceptions';\nimport { isPresent } from '../facade/lang';\nimport { NG_VALUE_ACCESSOR } from './control_value_accessor';\nimport { NgControl } from './ng_control';\nexport const RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioControlValueAccessor),\n    multi: true\n};\nexport class RadioControlRegistry {\n    constructor() {\n        this._accessors = [];\n    }\n    add(control, accessor) {\n        this._accessors.push([control, accessor]);\n    }\n    remove(accessor) {\n        var indexToRemove = -1;\n        for (var i = 0; i < this._accessors.length; ++i) {\n            if (this._accessors[i][1] === accessor) {\n                indexToRemove = i;\n            }\n        }\n        ListWrapper.removeAt(this._accessors, indexToRemove);\n    }\n    select(accessor) {\n        this._accessors.forEach((c) => {\n            if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        });\n    }\n    _isSameGroup(controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return controlPair[0].control.root === accessor._control.control.root &&\n            controlPair[1].name === accessor.name;\n    }\n}\n/** @nocollapse */\nRadioControlRegistry.decorators = [\n    { type: Injectable },\n];\nexport class RadioControlValueAccessor {\n    constructor(_renderer, _elementRef, _registry, _injector) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._registry = _registry;\n        this._injector = _injector;\n        this.onChange = () => { };\n        this.onTouched = () => { };\n    }\n    ngOnInit() {\n        this._control = this._injector.get(NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    }\n    ngOnDestroy() { this._registry.remove(this); }\n    writeValue(value) {\n        this._state = value === this.value;\n        if (isPresent(value)) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n        }\n    }\n    registerOnChange(fn) {\n        this._fn = fn;\n        this.onChange = () => {\n            fn(this.value);\n            this._registry.select(this);\n        };\n    }\n    fireUncheck(value) { this.writeValue(value); }\n    registerOnTouched(fn) { this.onTouched = fn; }\n    _checkName() {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this._throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    }\n    _throwNameError() {\n        throw new BaseException(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n    }\n}\n/** @nocollapse */\nRadioControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                providers: [RADIO_VALUE_ACCESSOR]\n            },] },\n];\n/** @nocollapse */\nRadioControlValueAccessor.ctorParameters = [\n    { type: Renderer, },\n    { type: ElementRef, },\n    { type: RadioControlRegistry, },\n    { type: Injector, },\n];\n/** @nocollapse */\nRadioControlValueAccessor.propDecorators = {\n    'name': [{ type: Input },],\n    'formControlName': [{ type: Input },],\n    'value': [{ type: Input },],\n};\n//# sourceMappingURL=radio_control_value_accessor.js.map"]}