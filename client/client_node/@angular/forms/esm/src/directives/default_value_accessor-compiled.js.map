{"version":3,"sources":["default_value_accessor.js"],"names":[],"mappings":";;;;;;;qjBAAA;;;;;;;;;AAOA;;AACA;;AACA;;;;AACO,IAAM;AACb,uBADa,iCACW;AACpB,sDADoB;AAEpB,iBAAa,sBAAW;AAAA,eAAM,oBAAN;AAAA,KAAX,CAFO;AAGpB,WAAO;AAHa,CADjB;;IAMM,oB,WAAA,oB;AACT,kCAAY,SAAZ,EAAuB,WAAvB,EAAoC;AAAA;;AAChC,aAAK,SAAL,GAAiB,SAAjB;AACA,aAAK,WAAL,GAAmB,WAAnB;AACA,aAAK,QAAL,GAAgB,UAAC,CAAD,EAAO,CAAG,CAA1B;AACA,aAAK,SAAL,GAAiB,YAAM,CAAG,CAA1B;AACH;;;;mCACU,K,EAAO;AACd,gBAAI,kBAAkB,mBAAQ,KAAR,IAAiB,EAAjB,GAAsB,KAA5C;AACA,iBAAK,SAAL,CAAe,kBAAf,CAAkC,KAAK,WAAL,CAAiB,aAAnD,EAAkE,OAAlE,EAA2E,eAA3E;AACH;;;yCACgB,E,EAAI;AAAE,iBAAK,QAAL,GAAgB,EAAhB;AAAqB;;;0CAC1B,E,EAAI;AAAE,iBAAK,SAAL,GAAiB,EAAjB;AAAsB;;;;;AAElD;;;AACA,qBAAqB,UAArB,GAAkC,CAC9B,EAAE,qBAAF,EAAmB,MAAM,CAAC;AACd,kBAAU,8MADI;AAEd;AACA;AACA;AACA,cAAM,EAAE,WAAW,+BAAb,EAA8C,UAAU,aAAxD,EALQ;AAMd,mBAAW,CAAC,sBAAD;AANG,KAAD,CAAzB,EAD8B,CAAlC;AAUA;AACA,qBAAqB,cAArB,GAAsC,CAClC,EAAE,oBAAF,EADkC,EAElC,EAAE,sBAAF,EAFkC,CAAtC;AAIA","file":"default_value_accessor-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, Renderer, forwardRef } from '@angular/core';\nimport { isBlank } from '../facade/lang';\nimport { NG_VALUE_ACCESSOR } from './control_value_accessor';\nexport const DEFAULT_VALUE_ACCESSOR = \n/* @ts2dart_Provider */ {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DefaultValueAccessor),\n    multi: true\n};\nexport class DefaultValueAccessor {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    writeValue(value) {\n        var normalizedValue = isBlank(value) ? '' : value;\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    }\n    registerOnChange(fn) { this.onChange = fn; }\n    registerOnTouched(fn) { this.onTouched = fn; }\n}\n/** @nocollapse */\nDefaultValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                // TODO: vsavkin replace the above selector with the one below it once\n                // https://github.com/angular/angular/issues/3011 is implemented\n                // selector: '[ngControl],[ngModel],[ngFormControl]',\n                host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                providers: [DEFAULT_VALUE_ACCESSOR]\n            },] },\n];\n/** @nocollapse */\nDefaultValueAccessor.ctorParameters = [\n    { type: Renderer, },\n    { type: ElementRef, },\n];\n//# sourceMappingURL=default_value_accessor.js.map"]}