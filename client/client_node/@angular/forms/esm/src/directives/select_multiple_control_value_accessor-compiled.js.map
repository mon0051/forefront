{"version":3,"sources":["select_multiple_control_value_accessor.js"],"names":[],"mappings":"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","file":"select_multiple_control_value_accessor-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, Host, Input, Optional, Renderer, forwardRef } from '@angular/core';\nimport { MapWrapper } from '../facade/collection';\nimport { StringWrapper, isBlank, isPresent, isPrimitive, isString, looseIdentical } from '../facade/lang';\nimport { NG_VALUE_ACCESSOR } from './control_value_accessor';\nconst SELECT_MULTIPLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\n    multi: true\n};\nfunction _buildValueString(id, value) {\n    if (isBlank(id))\n        return `${value}`;\n    if (isString(value))\n        value = `'${value}'`;\n    if (!isPrimitive(value))\n        value = 'Object';\n    return StringWrapper.slice(`${id}: ${value}`, 0, 50);\n}\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\n/** Mock interface for HTMLCollection */\nclass HTMLCollection {\n}\nexport class SelectMultipleControlValueAccessor {\n    constructor() {\n        /** @internal */\n        this._optionMap = new Map();\n        /** @internal */\n        this._idCounter = 0;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    writeValue(value) {\n        this.value = value;\n        if (value == null)\n            return;\n        let values = value;\n        // convert values to ids\n        let ids = values.map((v) => this._getOptionId(v));\n        this._optionMap.forEach((opt, o) => { opt._setSelected(ids.indexOf(o.toString()) > -1); });\n    }\n    registerOnChange(fn) {\n        this.onChange = (_) => {\n            let selected = [];\n            if (_.hasOwnProperty('selectedOptions')) {\n                let options = _.selectedOptions;\n                for (var i = 0; i < options.length; i++) {\n                    let opt = options.item(i);\n                    let val = this._getOptionValue(opt.value);\n                    selected.push(val);\n                }\n            }\n            else {\n                let options = _.options;\n                for (var i = 0; i < options.length; i++) {\n                    let opt = options.item(i);\n                    if (opt.selected) {\n                        let val = this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n            }\n            fn(selected);\n        };\n    }\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /** @internal */\n    _registerOption(value) {\n        let id = (this._idCounter++).toString();\n        this._optionMap.set(id, value);\n        return id;\n    }\n    /** @internal */\n    _getOptionId(value) {\n        for (let id of MapWrapper.keys(this._optionMap)) {\n            if (looseIdentical(this._optionMap.get(id)._value, value))\n                return id;\n        }\n        return null;\n    }\n    /** @internal */\n    _getOptionValue(valueString) {\n        let opt = this._optionMap.get(_extractId(valueString));\n        return isPresent(opt) ? opt._value : valueString;\n    }\n}\n/** @nocollapse */\nSelectMultipleControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                host: { '(input)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n            },] },\n];\n/** @nocollapse */\nSelectMultipleControlValueAccessor.ctorParameters = [];\nexport class NgSelectMultipleOption {\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (isPresent(this._select)) {\n            this.id = this._select._registerOption(this);\n        }\n    }\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._value = value;\n        this._setElementValue(_buildValueString(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    set value(value) {\n        if (isPresent(this._select)) {\n            this._value = value;\n            this._setElementValue(_buildValueString(this.id, value));\n            this._select.writeValue(this._select.value);\n        }\n        else {\n            this._setElementValue(value);\n        }\n    }\n    /** @internal */\n    _setElementValue(value) {\n        this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n    }\n    /** @internal */\n    _setSelected(selected) {\n        this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n    }\n    ngOnDestroy() {\n        if (isPresent(this._select)) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n}\n/** @nocollapse */\nNgSelectMultipleOption.decorators = [\n    { type: Directive, args: [{ selector: 'option' },] },\n];\n/** @nocollapse */\nNgSelectMultipleOption.ctorParameters = [\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host },] },\n];\n/** @nocollapse */\nNgSelectMultipleOption.propDecorators = {\n    'ngValue': [{ type: Input, args: ['ngValue',] },],\n    'value': [{ type: Input, args: ['value',] },],\n};\nexport const SELECT_DIRECTIVES = [SelectMultipleControlValueAccessor, NgSelectMultipleOption];\n//# sourceMappingURL=select_multiple_control_value_accessor.js.map"]}