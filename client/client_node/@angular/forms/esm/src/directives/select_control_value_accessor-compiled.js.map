{"version":3,"sources":["select_control_value_accessor.js"],"names":[],"mappings":"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","file":"select_control_value_accessor-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, Host, Input, Optional, Renderer, forwardRef } from '@angular/core';\nimport { MapWrapper } from '../facade/collection';\nimport { StringWrapper, isBlank, isPresent, isPrimitive, looseIdentical } from '../facade/lang';\nimport { NG_VALUE_ACCESSOR } from './control_value_accessor';\nexport const SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectControlValueAccessor),\n    multi: true\n};\nfunction _buildValueString(id, value) {\n    if (isBlank(id))\n        return `${value}`;\n    if (!isPrimitive(value))\n        value = 'Object';\n    return StringWrapper.slice(`${id}: ${value}`, 0, 50);\n}\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\nexport class SelectControlValueAccessor {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /** @internal */\n        this._optionMap = new Map();\n        /** @internal */\n        this._idCounter = 0;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    writeValue(value) {\n        this.value = value;\n        var valueString = _buildValueString(this._getOptionId(value), value);\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n    }\n    registerOnChange(fn) {\n        this.onChange = (valueString) => {\n            this.value = valueString;\n            fn(this._getOptionValue(valueString));\n        };\n    }\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /** @internal */\n    _registerOption() { return (this._idCounter++).toString(); }\n    /** @internal */\n    _getOptionId(value) {\n        for (let id of MapWrapper.keys(this._optionMap)) {\n            if (looseIdentical(this._optionMap.get(id), value))\n                return id;\n        }\n        return null;\n    }\n    /** @internal */\n    _getOptionValue(valueString) {\n        let value = this._optionMap.get(_extractId(valueString));\n        return isPresent(value) ? value : valueString;\n    }\n}\n/** @nocollapse */\nSelectControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                providers: [SELECT_VALUE_ACCESSOR]\n            },] },\n];\n/** @nocollapse */\nSelectControlValueAccessor.ctorParameters = [\n    { type: Renderer, },\n    { type: ElementRef, },\n];\nexport class NgSelectOption {\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (isPresent(this._select))\n            this.id = this._select._registerOption();\n    }\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._select._optionMap.set(this.id, value);\n        this._setElementValue(_buildValueString(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    set value(value) {\n        this._setElementValue(value);\n        if (isPresent(this._select))\n            this._select.writeValue(this._select.value);\n    }\n    /** @internal */\n    _setElementValue(value) {\n        this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n    }\n    ngOnDestroy() {\n        if (isPresent(this._select)) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n}\n/** @nocollapse */\nNgSelectOption.decorators = [\n    { type: Directive, args: [{ selector: 'option' },] },\n];\n/** @nocollapse */\nNgSelectOption.ctorParameters = [\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host },] },\n];\n/** @nocollapse */\nNgSelectOption.propDecorators = {\n    'ngValue': [{ type: Input, args: ['ngValue',] },],\n    'value': [{ type: Input, args: ['value',] },],\n};\n//# sourceMappingURL=select_control_value_accessor.js.map"]}