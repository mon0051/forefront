{"version":3,"sources":["ng_form.js"],"names":[],"mappings":"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","file":"ng_form-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, Inject, Optional, Self, forwardRef } from '@angular/core';\nimport { EventEmitter, ObservableWrapper, PromiseWrapper } from '../facade/async';\nimport { ListWrapper } from '../facade/collection';\nimport { isPresent } from '../facade/lang';\nimport { FormGroup } from '../model';\nimport { NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../validators';\nimport { ControlContainer } from './control_container';\nimport { composeAsyncValidators, composeValidators, setUpControl, setUpFormContainer } from './shared';\nexport const formDirectiveProvider = \n/*@ts2dart_const*/ { provide: ControlContainer, useExisting: forwardRef(() => NgForm) };\nexport class NgForm extends ControlContainer {\n    constructor(validators, asyncValidators) {\n        super();\n        this._submitted = false;\n        this.ngSubmit = new EventEmitter();\n        this.form = new FormGroup({}, null, composeValidators(validators), composeAsyncValidators(asyncValidators));\n    }\n    get submitted() { return this._submitted; }\n    get formDirective() { return this; }\n    get control() { return this.form; }\n    get path() { return []; }\n    get controls() { return this.form.controls; }\n    addControl(dir) {\n        PromiseWrapper.scheduleMicrotask(() => {\n            const container = this._findContainer(dir.path);\n            dir._control = container.registerControl(dir.name, dir.control);\n            setUpControl(dir.control, dir);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n        });\n    }\n    getControl(dir) { return this.form.find(dir.path); }\n    removeControl(dir) {\n        PromiseWrapper.scheduleMicrotask(() => {\n            var container = this._findContainer(dir.path);\n            if (isPresent(container)) {\n                container.removeControl(dir.name);\n            }\n        });\n    }\n    addFormGroup(dir) {\n        PromiseWrapper.scheduleMicrotask(() => {\n            var container = this._findContainer(dir.path);\n            var group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        });\n    }\n    removeFormGroup(dir) {\n        PromiseWrapper.scheduleMicrotask(() => {\n            var container = this._findContainer(dir.path);\n            if (isPresent(container)) {\n                container.removeControl(dir.name);\n            }\n        });\n    }\n    getFormGroup(dir) { return this.form.find(dir.path); }\n    updateModel(dir, value) {\n        PromiseWrapper.scheduleMicrotask(() => {\n            var ctrl = this.form.find(dir.path);\n            ctrl.updateValue(value);\n        });\n    }\n    onSubmit() {\n        this._submitted = true;\n        ObservableWrapper.callEmit(this.ngSubmit, null);\n        return false;\n    }\n    /** @internal */\n    _findContainer(path) {\n        path.pop();\n        return ListWrapper.isEmpty(path) ? this.form : this.form.find(path);\n    }\n}\n/** @nocollapse */\nNgForm.decorators = [\n    { type: Directive, args: [{\n                selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n                providers: [formDirectiveProvider],\n                host: {\n                    '(submit)': 'onSubmit()',\n                },\n                outputs: ['ngSubmit'],\n                exportAs: 'ngForm'\n            },] },\n];\n/** @nocollapse */\nNgForm.ctorParameters = [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n];\n//# sourceMappingURL=ng_form.js.map"]}