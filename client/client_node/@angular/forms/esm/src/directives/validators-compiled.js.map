{"version":3,"sources":["validators.js"],"names":[],"mappings":";;;;;;;;;AAOA;;AACA;;AACA;;0JATA;;;;;;;;;AAUA,IAAM,WAAW,uBAAW,QAA5B;AACO,IAAM,kDAAqB;AAC9B,sCAD8B;AAE9B,cAAU,QAFoB;AAG9B,WAAO;AAHuB,CAA3B;;IAKM,iB,WAAA,iB;;;AAEb;;;AACA,kBAAkB,UAAlB,GAA+B,CAC3B,EAAE,qBAAF,EAAmB,MAAM,CAAC;AACd,kBAAU,yEADI;AAEd,mBAAW,CAAC,kBAAD;AAFG,KAAD,CAAzB,EAD2B,CAA/B;AAMA;;;;;;;AAOO,IAAM,sDAAuB;AAChC,sCADgC;AAEhC,iBAAa,sBAAW;AAAA,eAAM,kBAAN;AAAA,KAAX,CAFmB;AAGhC,WAAO;AAHyB,CAA7B;;IAKM,kB,WAAA,kB;AACT,gCAAY,SAAZ,EAAuB;AAAA;;AACnB,aAAK,UAAL,GAAkB,uBAAW,SAAX,CAAqB,oBAAc,QAAd,CAAuB,SAAvB,EAAkC,EAAlC,CAArB,CAAlB;AACH;;;;iCACQ,C,EAAG;AAAE,mBAAO,KAAK,UAAL,CAAgB,CAAhB,CAAP;AAA4B;;;;;AAE9C;;;AACA,mBAAmB,UAAnB,GAAgC,CAC5B,EAAE,qBAAF,EAAmB,MAAM,CAAC;AACd,kBAAU,4EADI;AAEd,mBAAW,CAAC,oBAAD;AAFG,KAAD,CAAzB,EAD4B,CAAhC;AAMA;AACA,mBAAmB,cAAnB,GAAoC,CAChC,EAAE,MAAM,SAAR,EAAmB,YAAY,CAAC,EAAE,qBAAF,EAAmB,MAAM,CAAC,WAAD,CAAzB,EAAD,CAA/B,EADgC,CAApC;AAGA;;;;;;;AAOO,IAAM,sDAAuB;AAChC,sCADgC;AAEhC,iBAAa,sBAAW;AAAA,eAAM,kBAAN;AAAA,KAAX,CAFmB;AAGhC,WAAO;AAHyB,CAA7B;;IAKM,kB,WAAA,kB;AACT,gCAAY,SAAZ,EAAuB;AAAA;;AACnB,aAAK,UAAL,GAAkB,uBAAW,SAAX,CAAqB,oBAAc,QAAd,CAAuB,SAAvB,EAAkC,EAAlC,CAArB,CAAlB;AACH;;;;iCACQ,C,EAAG;AAAE,mBAAO,KAAK,UAAL,CAAgB,CAAhB,CAAP;AAA4B;;;;;AAE9C;;;AACA,mBAAmB,UAAnB,GAAgC,CAC5B,EAAE,qBAAF,EAAmB,MAAM,CAAC;AACd,kBAAU,4EADI;AAEd,mBAAW,CAAC,oBAAD;AAFG,KAAD,CAAzB,EAD4B,CAAhC;AAMA;AACA,mBAAmB,cAAnB,GAAoC,CAChC,EAAE,MAAM,SAAR,EAAmB,YAAY,CAAC,EAAE,qBAAF,EAAmB,MAAM,CAAC,WAAD,CAAzB,EAAD,CAA/B,EADgC,CAApC;AAGO,IAAM,gDAAoB;AAC7B,sCAD6B;AAE7B,iBAAa,sBAAW;AAAA,eAAM,gBAAN;AAAA,KAAX,CAFgB;AAG7B,WAAO;AAHsB,CAA1B;;IAKM,gB,WAAA,gB;AACT,8BAAY,OAAZ,EAAqB;AAAA;;AACjB,aAAK,UAAL,GAAkB,uBAAW,OAAX,CAAmB,OAAnB,CAAlB;AACH;;;;iCACQ,C,EAAG;AAAE,mBAAO,KAAK,UAAL,CAAgB,CAAhB,CAAP;AAA4B;;;;;AAE9C;;;AACA,iBAAiB,UAAjB,GAA8B,CAC1B,EAAE,qBAAF,EAAmB,MAAM,CAAC;AACd,kBAAU,sEADI;AAEd,mBAAW,CAAC,iBAAD;AAFG,KAAD,CAAzB,EAD0B,CAA9B;AAMA;AACA,iBAAiB,cAAjB,GAAkC,CAC9B,EAAE,MAAM,SAAR,EAAmB,YAAY,CAAC,EAAE,qBAAF,EAAmB,MAAM,CAAC,SAAD,CAAzB,EAAD,CAA/B,EAD8B,CAAlC;AAGA","file":"validators-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Attribute, Directive, forwardRef } from '@angular/core';\nimport { NumberWrapper } from '../facade/lang';\nimport { NG_VALIDATORS, Validators } from '../validators';\nconst REQUIRED = Validators.required;\nexport const REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useValue: REQUIRED,\n    multi: true\n};\nexport class RequiredValidator {\n}\n/** @nocollapse */\nRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[required][formControlName],[required][formControl],[required][ngModel]',\n                providers: [REQUIRED_VALIDATOR]\n            },] },\n];\n/**\n * Provivder which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='min'}\n */\nexport const MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinLengthValidator),\n    multi: true\n};\nexport class MinLengthValidator {\n    constructor(minLength) {\n        this._validator = Validators.minLength(NumberWrapper.parseInt(minLength, 10));\n    }\n    validate(c) { return this._validator(c); }\n}\n/** @nocollapse */\nMinLengthValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                providers: [MIN_LENGTH_VALIDATOR]\n            },] },\n];\n/** @nocollapse */\nMinLengthValidator.ctorParameters = [\n    { type: undefined, decorators: [{ type: Attribute, args: ['minlength',] },] },\n];\n/**\n * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='max'}\n */\nexport const MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxLengthValidator),\n    multi: true\n};\nexport class MaxLengthValidator {\n    constructor(maxLength) {\n        this._validator = Validators.maxLength(NumberWrapper.parseInt(maxLength, 10));\n    }\n    validate(c) { return this._validator(c); }\n}\n/** @nocollapse */\nMaxLengthValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                providers: [MAX_LENGTH_VALIDATOR]\n            },] },\n];\n/** @nocollapse */\nMaxLengthValidator.ctorParameters = [\n    { type: undefined, decorators: [{ type: Attribute, args: ['maxlength',] },] },\n];\nexport const PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => PatternValidator),\n    multi: true\n};\nexport class PatternValidator {\n    constructor(pattern) {\n        this._validator = Validators.pattern(pattern);\n    }\n    validate(c) { return this._validator(c); }\n}\n/** @nocollapse */\nPatternValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                providers: [PATTERN_VALIDATOR]\n            },] },\n];\n/** @nocollapse */\nPatternValidator.ctorParameters = [\n    { type: undefined, decorators: [{ type: Attribute, args: ['pattern',] },] },\n];\n//# sourceMappingURL=validators.js.map"]}