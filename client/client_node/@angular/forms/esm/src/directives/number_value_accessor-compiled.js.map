{"version":3,"sources":["number_value_accessor.js"],"names":[],"mappings":";;;;;;;qjBAAA;;;;;;;;;AAOA;;AACA;;AACA;;;;AACO,IAAM,wDAAwB;AACjC,sDADiC;AAEjC,iBAAa,sBAAW;AAAA,eAAM,mBAAN;AAAA,KAAX,CAFoB;AAGjC,WAAO;AAH0B,CAA9B;;IAKM,mB,WAAA,mB;AACT,iCAAY,SAAZ,EAAuB,WAAvB,EAAoC;AAAA;;AAChC,aAAK,SAAL,GAAiB,SAAjB;AACA,aAAK,WAAL,GAAmB,WAAnB;AACA,aAAK,QAAL,GAAgB,UAAC,CAAD,EAAO,CAAG,CAA1B;AACA,aAAK,SAAL,GAAiB,YAAM,CAAG,CAA1B;AACH;;;;mCACU,K,EAAO;AACd,iBAAK,SAAL,CAAe,kBAAf,CAAkC,KAAK,WAAL,CAAiB,aAAnD,EAAkE,OAAlE,EAA2E,KAA3E;AACH;;;yCACgB,E,EAAI;AACjB,iBAAK,QAAL,GAAgB,UAAC,KAAD,EAAW;AAAE,mBAAG,SAAS,EAAT,GAAc,IAAd,GAAqB,oBAAc,UAAd,CAAyB,KAAzB,CAAxB;AAA2D,aAAxF;AACH;;;0CACiB,E,EAAI;AAAE,iBAAK,SAAL,GAAiB,EAAjB;AAAsB;;;;;AAElD;;;AACA,oBAAoB,UAApB,GAAiC,CAC7B,EAAE,qBAAF,EAAmB,MAAM,CAAC;AACd,kBAAU,iGADI;AAEd,cAAM;AACF,wBAAY,+BADV;AAEF,uBAAW,+BAFT;AAGF,sBAAU;AAHR,SAFQ;AAOd,mBAAW,CAAC,qBAAD;AAPG,KAAD,CAAzB,EAD6B,CAAjC;AAWA;AACA,oBAAoB,cAApB,GAAqC,CACjC,EAAE,oBAAF,EADiC,EAEjC,EAAE,sBAAF,EAFiC,CAArC;AAIA","file":"number_value_accessor-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, Renderer, forwardRef } from '@angular/core';\nimport { NumberWrapper } from '../facade/lang';\nimport { NG_VALUE_ACCESSOR } from './control_value_accessor';\nexport const NUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NumberValueAccessor),\n    multi: true\n};\nexport class NumberValueAccessor {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    writeValue(value) {\n        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', value);\n    }\n    registerOnChange(fn) {\n        this.onChange = (value) => { fn(value == '' ? null : NumberWrapper.parseFloat(value)); };\n    }\n    registerOnTouched(fn) { this.onTouched = fn; }\n}\n/** @nocollapse */\nNumberValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                host: {\n                    '(change)': 'onChange($event.target.value)',\n                    '(input)': 'onChange($event.target.value)',\n                    '(blur)': 'onTouched()'\n                },\n                providers: [NUMBER_VALUE_ACCESSOR]\n            },] },\n];\n/** @nocollapse */\nNumberValueAccessor.ctorParameters = [\n    { type: Renderer, },\n    { type: ElementRef, },\n];\n//# sourceMappingURL=number_value_accessor.js.map"]}