{"version":3,"sources":["form_builder.js"],"names":[],"mappings":";;;;;;;qjBAAA;;;;;;;;;AAOA;;AACA;;AACA;;AACA;;;;IACa,W,WAAA,W;;;;;;;;AACT;;;;;;8BAMM,c,EAA8B;AAAA,gBAAd,KAAc,yDAAN,IAAM;;AAChC,gBAAI,WAAW,KAAK,eAAL,CAAqB,cAArB,CAAf;AACA,gBAAI,YAAa,qBAAU,KAAV,IAAmB,6BAAiB,GAAjB,CAAqB,KAArB,EAA4B,WAA5B,CAAnB,GAA8D,IAA/E;AACA,gBAAI,YAAY,qBAAU,KAAV,IAAmB,6BAAiB,GAAjB,CAAqB,KAArB,EAA4B,WAA5B,CAAnB,GAA8D,IAA9E;AACA,gBAAI,iBAAiB,qBAAU,KAAV,IAAmB,6BAAiB,GAAjB,CAAqB,KAArB,EAA4B,gBAA5B,CAAnB,GAAmE,IAAxF;AACA,mBAAO,qBAAc,QAAd,EAAwB,SAAxB,EAAmC,SAAnC,EAA8C,cAA9C,CAAP;AACH;AACD;;;;;;gCAGQ,K,EAAgD;AAAA,gBAAzC,SAAyC,yDAA7B,IAA6B;AAAA,gBAAvB,cAAuB,yDAAN,IAAM;;AACpD,mBAAO,uBAAgB,KAAhB,EAAuB,SAAvB,EAAkC,cAAlC,CAAP;AACH;AACD;;;;;;;8BAIM,c,EAAyD;AAAA;;AAAA,gBAAzC,SAAyC,yDAA7B,IAA6B;AAAA,gBAAvB,cAAuB,yDAAN,IAAM;;AAC3D,gBAAI,WAAW,eAAe,GAAf,CAAmB;AAAA,uBAAK,MAAK,cAAL,CAAoB,CAApB,CAAL;AAAA,aAAnB,CAAf;AACA,mBAAO,qBAAc,QAAd,EAAwB,SAAxB,EAAmC,cAAnC,CAAP;AACH;AACD;;;;wCACgB,c,EAAgB;AAAA;;AAC5B,gBAAI,WAAW,EAAf;AACA,yCAAiB,OAAjB,CAAyB,cAAzB,EAAyC,UAAC,aAAD,EAAgB,WAAhB,EAAgC;AACrE,yBAAS,WAAT,IAAwB,OAAK,cAAL,CAAoB,aAApB,CAAxB;AACH,aAFD;AAGA,mBAAO,QAAP;AACH;AACD;;;;uCACe,a,EAAe;AAC1B,gBAAI,+CAAwC,yCAAxC,IACA,yCADJ,EACwC;AACpC,uBAAO,aAAP;AACH,aAHD,MAIK,IAAI,mBAAQ,aAAR,CAAJ,EAA4B;AAC7B,oBAAI,QAAQ,cAAc,CAAd,CAAZ;AACA,oBAAI,YAAY,cAAc,MAAd,GAAuB,CAAvB,GAA2B,cAAc,CAAd,CAA3B,GAA8C,IAA9D;AACA,oBAAI,iBAAiB,cAAc,MAAd,GAAuB,CAAvB,GAA2B,cAAc,CAAd,CAA3B,GAA8C,IAAnE;AACA,uBAAO,KAAK,OAAL,CAAa,KAAb,EAAoB,SAApB,EAA+B,cAA/B,CAAP;AACH,aALI,MAMA;AACD,uBAAO,KAAK,OAAL,CAAa,aAAb,CAAP;AACH;AACJ;;;;;AAEL;;;AACA,YAAY,UAAZ,GAAyB,CACrB,EAAE,sBAAF,EADqB,CAAzB;AAGA","file":"form_builder-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '@angular/core';\nimport { StringMapWrapper } from './facade/collection';\nimport { isArray, isPresent } from './facade/lang';\nimport { FormArray, FormControl, FormGroup } from './model';\nexport class FormBuilder {\n    /**\n     * Construct a new {@link FormGroup} with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `optionals` and `validator`.\n     *\n     * See the {@link FormGroup} constructor for more details.\n     */\n    group(controlsConfig, extra = null) {\n        var controls = this._reduceControls(controlsConfig);\n        var optionals = (isPresent(extra) ? StringMapWrapper.get(extra, 'optionals') : null);\n        var validator = isPresent(extra) ? StringMapWrapper.get(extra, 'validator') : null;\n        var asyncValidator = isPresent(extra) ? StringMapWrapper.get(extra, 'asyncValidator') : null;\n        return new FormGroup(controls, optionals, validator, asyncValidator);\n    }\n    /**\n     * Construct a new {@link FormControl} with the given `value`,`validator`, and `asyncValidator`.\n     */\n    control(value, validator = null, asyncValidator = null) {\n        return new FormControl(value, validator, asyncValidator);\n    }\n    /**\n     * Construct an array of {@link FormControl}s from the given `controlsConfig` array of\n     * configuration, with the given optional `validator` and `asyncValidator`.\n     */\n    array(controlsConfig, validator = null, asyncValidator = null) {\n        var controls = controlsConfig.map(c => this._createControl(c));\n        return new FormArray(controls, validator, asyncValidator);\n    }\n    /** @internal */\n    _reduceControls(controlsConfig) {\n        var controls = {};\n        StringMapWrapper.forEach(controlsConfig, (controlConfig, controlName) => {\n            controls[controlName] = this._createControl(controlConfig);\n        });\n        return controls;\n    }\n    /** @internal */\n    _createControl(controlConfig) {\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n            controlConfig instanceof FormArray) {\n            return controlConfig;\n        }\n        else if (isArray(controlConfig)) {\n            var value = controlConfig[0];\n            var validator = controlConfig.length > 1 ? controlConfig[1] : null;\n            var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else {\n            return this.control(controlConfig);\n        }\n    }\n}\n/** @nocollapse */\nFormBuilder.decorators = [\n    { type: Injectable },\n];\n//# sourceMappingURL=form_builder.js.map"]}