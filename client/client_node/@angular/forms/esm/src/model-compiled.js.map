{"version":3,"sources":["model.js"],"names":[],"mappings":"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","file":"model-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { composeAsyncValidators, composeValidators } from './directives/shared';\nimport { EventEmitter, ObservableWrapper } from './facade/async';\nimport { ListWrapper, StringMapWrapper } from './facade/collection';\nimport { isBlank, isPresent, isPromise, normalizeBool } from './facade/lang';\n/**\n * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n */\nexport const VALID = 'VALID';\n/**\n * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n */\nexport const INVALID = 'INVALID';\n/**\n * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n * errors are not yet available for the input value.\n */\nexport const PENDING = 'PENDING';\nexport function isControl(control) {\n    return control instanceof AbstractControl;\n}\nfunction _find(control, path) {\n    if (isBlank(path))\n        return null;\n    if (!(path instanceof Array)) {\n        path = path.split('/');\n    }\n    if (path instanceof Array && ListWrapper.isEmpty(path))\n        return null;\n    return path.reduce((v, name) => {\n        if (v instanceof FormGroup) {\n            return isPresent(v.controls[name]) ? v.controls[name] : null;\n        }\n        else if (v instanceof FormArray) {\n            var index = name;\n            return isPresent(v.at(index)) ? v.at(index) : null;\n        }\n        else {\n            return null;\n        }\n    }, control);\n}\nfunction toObservable(r) {\n    return isPromise(r) ? ObservableWrapper.fromPromise(r) : r;\n}\nfunction coerceToValidator(validator) {\n    return Array.isArray(validator) ? composeValidators(validator) : validator;\n}\nfunction coerceToAsyncValidator(asyncValidator) {\n    return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n}\n/**\n * @experimental\n */\nexport class AbstractControl {\n    constructor(validator, asyncValidator) {\n        this.validator = validator;\n        this.asyncValidator = asyncValidator;\n        this._pristine = true;\n        this._touched = false;\n    }\n    get value() { return this._value; }\n    get status() { return this._status; }\n    get valid() { return this._status === VALID; }\n    /**\n     * Returns the errors of this control.\n     */\n    get errors() { return this._errors; }\n    get pristine() { return this._pristine; }\n    get dirty() { return !this.pristine; }\n    get touched() { return this._touched; }\n    get untouched() { return !this._touched; }\n    get valueChanges() { return this._valueChanges; }\n    get statusChanges() { return this._statusChanges; }\n    get pending() { return this._status == PENDING; }\n    setAsyncValidators(newValidator) {\n        this.asyncValidator = coerceToAsyncValidator(newValidator);\n    }\n    clearAsyncValidators() { this.asyncValidator = null; }\n    setValidators(newValidator) {\n        this.validator = coerceToValidator(newValidator);\n    }\n    clearValidators() { this.validator = null; }\n    markAsTouched() { this._touched = true; }\n    markAsDirty({ onlySelf } = {}) {\n        onlySelf = normalizeBool(onlySelf);\n        this._pristine = false;\n        if (isPresent(this._parent) && !onlySelf) {\n            this._parent.markAsDirty({ onlySelf: onlySelf });\n        }\n    }\n    markAsPending({ onlySelf } = {}) {\n        onlySelf = normalizeBool(onlySelf);\n        this._status = PENDING;\n        if (isPresent(this._parent) && !onlySelf) {\n            this._parent.markAsPending({ onlySelf: onlySelf });\n        }\n    }\n    setParent(parent) { this._parent = parent; }\n    updateValueAndValidity({ onlySelf, emitEvent } = {}) {\n        onlySelf = normalizeBool(onlySelf);\n        emitEvent = isPresent(emitEvent) ? emitEvent : true;\n        this._updateValue();\n        this._errors = this._runValidator();\n        this._status = this._calculateStatus();\n        if (this._status == VALID || this._status == PENDING) {\n            this._runAsyncValidator(emitEvent);\n        }\n        if (emitEvent) {\n            ObservableWrapper.callEmit(this._valueChanges, this._value);\n            ObservableWrapper.callEmit(this._statusChanges, this._status);\n        }\n        if (isPresent(this._parent) && !onlySelf) {\n            this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        }\n    }\n    _runValidator() {\n        return isPresent(this.validator) ? this.validator(this) : null;\n    }\n    _runAsyncValidator(emitEvent) {\n        if (isPresent(this.asyncValidator)) {\n            this._status = PENDING;\n            this._cancelExistingSubscription();\n            var obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription = ObservableWrapper.subscribe(obs, (res) => this.setErrors(res, { emitEvent: emitEvent }));\n        }\n    }\n    _cancelExistingSubscription() {\n        if (isPresent(this._asyncValidationSubscription)) {\n            ObservableWrapper.dispose(this._asyncValidationSubscription);\n        }\n    }\n    /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run not automatically, but manually by the user.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ## Usage\n     *\n     * ```\n     * var login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({\"notUnique\": true});\n     *\n     * login.updateValue(\"someOtherLogin\");\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     */\n    setErrors(errors, { emitEvent } = {}) {\n        emitEvent = isPresent(emitEvent) ? emitEvent : true;\n        this._errors = errors;\n        this._updateControlsErrors(emitEvent);\n    }\n    find(path) { return _find(this, path); }\n    getError(errorCode, path = null) {\n        var control = isPresent(path) && !ListWrapper.isEmpty(path) ? this.find(path) : this;\n        if (isPresent(control) && isPresent(control._errors)) {\n            return StringMapWrapper.get(control._errors, errorCode);\n        }\n        else {\n            return null;\n        }\n    }\n    hasError(errorCode, path = null) {\n        return isPresent(this.getError(errorCode, path));\n    }\n    get root() {\n        let x = this;\n        while (isPresent(x._parent)) {\n            x = x._parent;\n        }\n        return x;\n    }\n    /** @internal */\n    _updateControlsErrors(emitEvent) {\n        this._status = this._calculateStatus();\n        if (emitEvent) {\n            ObservableWrapper.callEmit(this._statusChanges, this._status);\n        }\n        if (isPresent(this._parent)) {\n            this._parent._updateControlsErrors(emitEvent);\n        }\n    }\n    /** @internal */\n    _initObservables() {\n        this._valueChanges = new EventEmitter();\n        this._statusChanges = new EventEmitter();\n    }\n    _calculateStatus() {\n        if (isPresent(this._errors))\n            return INVALID;\n        if (this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    }\n}\n/**\n * Defines a part of a form that cannot be divided into other controls. `FormControl`s have values\n * and\n * validation state, which is determined by an optional validation function.\n *\n * `FormControl` is one of the three fundamental building blocks used to define forms in Angular,\n * along\n * with {@link FormGroup} and {@link FormArray}.\n *\n * ## Usage\n *\n * By default, a `FormControl` is created for every `<input>` or other form component.\n * With {@link FormControlDirective} or {@link FormGroupDirective} an existing {@link FormControl}\n * can be bound to a DOM element instead. This `FormControl` can be configured with a custom\n * validation function.\n *\n * @experimental\n */\nexport class FormControl extends AbstractControl {\n    constructor(value = null, validator = null, asyncValidator = null) {\n        super(coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n        /** @internal */\n        this._onChange = [];\n        this._value = value;\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        this._initObservables();\n    }\n    /**\n     * Set the value of the form control to `value`.\n     *\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n     * and not its parent component. If `emitEvent` is `true`, this change will cause a\n     * `valueChanges` event on the `FormControl` to be emitted. Both of these options default to\n     * `false`.\n     *\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n     * specified.\n     */\n    updateValue(value, { onlySelf, emitEvent, emitModelToViewChange } = {}) {\n        emitModelToViewChange = isPresent(emitModelToViewChange) ? emitModelToViewChange : true;\n        this._value = value;\n        if (this._onChange.length && emitModelToViewChange) {\n            this._onChange.forEach((changeFn) => changeFn(this._value));\n        }\n        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n    }\n    /**\n     * @internal\n     */\n    _updateValue() { }\n    /**\n     * @internal\n     */\n    _anyControlsHaveStatus(status) { return false; }\n    /**\n     * Register a listener for change events.\n     */\n    registerOnChange(fn) { this._onChange.push(fn); }\n}\n/**\n * Defines a part of a form, of fixed length, that can contain other controls.\n *\n * A `FormGroup` aggregates the values of each {@link FormControl} in the group.\n * The status of a `FormGroup` depends on the status of its children.\n * If one of the controls in a group is invalid, the entire group is invalid.\n * Similarly, if a control changes its value, the entire group changes as well.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {@link FormControl} and {@link FormArray}. {@link FormArray} can also contain other\n * controls, but is of variable length.\n *\n * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))\n *\n * @experimental\n */\nexport class FormGroup extends AbstractControl {\n    constructor(controls, optionals = null, validator = null, asyncValidator = null) {\n        super(validator, asyncValidator);\n        this.controls = controls;\n        this._optionals = isPresent(optionals) ? optionals : {};\n        this._initObservables();\n        this._setParentForControls();\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n    }\n    /**\n     * Register a control with the group's list of controls.\n     */\n    registerControl(name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        return control;\n    }\n    /**\n     * Add a control to this group.\n     */\n    addControl(name, control) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Remove a control from this group.\n     */\n    removeControl(name) {\n        StringMapWrapper.delete(this.controls, name);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Mark the named control as non-optional.\n     */\n    include(controlName) {\n        StringMapWrapper.set(this._optionals, controlName, true);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Mark the named control as optional.\n     */\n    exclude(controlName) {\n        StringMapWrapper.set(this._optionals, controlName, false);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Check whether there is a control with the given name in the group.\n     */\n    contains(controlName) {\n        var c = StringMapWrapper.contains(this.controls, controlName);\n        return c && this._included(controlName);\n    }\n    /** @internal */\n    _setParentForControls() {\n        StringMapWrapper.forEach(this.controls, (control, name) => { control.setParent(this); });\n    }\n    /** @internal */\n    _updateValue() { this._value = this._reduceValue(); }\n    /** @internal */\n    _anyControlsHaveStatus(status) {\n        var res = false;\n        StringMapWrapper.forEach(this.controls, (control, name) => {\n            res = res || (this.contains(name) && control.status == status);\n        });\n        return res;\n    }\n    /** @internal */\n    _reduceValue() {\n        return this._reduceChildren({}, (acc, control, name) => {\n            acc[name] = control.value;\n            return acc;\n        });\n    }\n    /** @internal */\n    _reduceChildren(initValue, fn) {\n        var res = initValue;\n        StringMapWrapper.forEach(this.controls, (control, name) => {\n            if (this._included(name)) {\n                res = fn(res, control, name);\n            }\n        });\n        return res;\n    }\n    /** @internal */\n    _included(controlName) {\n        var isOptional = StringMapWrapper.contains(this._optionals, controlName);\n        return !isOptional || StringMapWrapper.get(this._optionals, controlName);\n    }\n}\n/**\n * Defines a part of a form, of variable length, that can contain other controls.\n *\n * A `FormArray` aggregates the values of each {@link FormControl} in the group.\n * The status of a `FormArray` depends on the status of its children.\n * If one of the controls in a group is invalid, the entire array is invalid.\n * Similarly, if a control changes its value, the entire array changes as well.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {@link FormControl} and {@link FormGroup}. {@link FormGroup} can also contain\n * other controls, but is of fixed length.\n *\n * ## Adding or removing controls\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that will result in strange and unexpected behavior such\n * as broken change detection.\n *\n * ### Example ([live demo](http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview))\n *\n * @experimental\n */\nexport class FormArray extends AbstractControl {\n    constructor(controls, validator = null, asyncValidator = null) {\n        super(validator, asyncValidator);\n        this.controls = controls;\n        this._initObservables();\n        this._setParentForControls();\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n    }\n    /**\n     * Get the {@link AbstractControl} at the given `index` in the array.\n     */\n    at(index) { return this.controls[index]; }\n    /**\n     * Insert a new {@link AbstractControl} at the end of the array.\n     */\n    push(control) {\n        this.controls.push(control);\n        control.setParent(this);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Insert a new {@link AbstractControl} at the given `index` in the array.\n     */\n    insert(index, control) {\n        ListWrapper.insert(this.controls, index, control);\n        control.setParent(this);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Remove the control at the given `index` in the array.\n     */\n    removeAt(index) {\n        ListWrapper.removeAt(this.controls, index);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Length of the control array.\n     */\n    get length() { return this.controls.length; }\n    /** @internal */\n    _updateValue() { this._value = this.controls.map((control) => control.value); }\n    /** @internal */\n    _anyControlsHaveStatus(status) {\n        return this.controls.some(c => c.status == status);\n    }\n    /** @internal */\n    _setParentForControls() {\n        this.controls.forEach((control) => { control.setParent(this); });\n    }\n}\n//# sourceMappingURL=model.js.map"]}