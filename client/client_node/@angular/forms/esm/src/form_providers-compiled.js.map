{"version":3,"sources":["form_providers.js"],"names":[],"mappings":";;;;;;QAyCgB,sB,GAAA,sB;QAcA,Y,GAAA,Y;;AAhDhB;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;AAWO,IAAM,0CAAiB,+EAAvB,C,CAzBP;;;;;;;;AA0BA,SAAS,OAAT,CAAiB,kBAAjB,EAAqC;AACjC,QAAI,sBAAsB,EAA1B;AACA,uBAAmB,OAAnB,CAA2B,UAAC,UAAD,EAAgB;AACvC,YAAI,MAAM,OAAN,CAAc,UAAd,CAAJ,EAA+B;AAC3B,kCAAsB,oBAAoB,MAApB,CAA2B,UAA3B,CAAtB;AACH,SAFD,MAGK;AACD,gCAAoB,IAApB,CAAyB,UAAzB;AACH;AACJ,KAPD;AAQA,WAAO,mBAAP;AACH;AACD;;;AAGO,SAAS,sBAAT,GAAkC;AACrC,WAAO,CAAC;AACA,yCADA;AAEA,oBAAY,oBAAC,kBAAD,EAAqB,aAArB,EAAuC;AAC/C,gBAAM,sBAAsB,QAAQ,kBAAR,CAA5B;AACA,oCAAY,MAAZ,CAAmB,mBAAnB;AACA,mBAAO,6BAAmB,EAAE,oBAAoB,mBAAtB,EAA2C,4BAA3C,EAAnB,CAAP;AACH,SAND;AAOA,cAAM;AAPN,KAAD,CAAP;AASH;AACD;;;AAGO,SAAS,YAAT,GAAwB;AAC3B,WAAO,CACH,EAAE,kCAAF,EAAgC,qCAAhC,EAA+D,OAAO,IAAtE,EADG,EAC2E,cAD3E,CAAP;AAGH;AACD","file":"form_providers-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FORM_DIRECTIVES as OLD_FORM_DIRECTIVES } from '@angular/common';\nimport { CompilerConfig } from '@angular/compiler';\nimport { PLATFORM_DIRECTIVES, PLATFORM_PIPES } from '@angular/core';\nimport { FORM_DIRECTIVES as NEW_FORM_DIRECTIVES } from './directives';\nimport { RadioControlRegistry as NewRadioControlRegistry } from './directives/radio_control_value_accessor';\nimport { ListWrapper } from './facade/collection';\nimport { FormBuilder as NewFormBuilder } from './form_builder';\n/**\n * Shorthand set of providers used for building Angular forms.\n *\n * ### Example\n *\n * ```typescript\n * bootstrap(MyApp, [FORM_PROVIDERS]);\n * ```\n *\n * @experimental\n */\nexport const FORM_PROVIDERS = [NewFormBuilder, NewRadioControlRegistry];\nfunction flatten(platformDirectives) {\n    let flattenedDirectives = [];\n    platformDirectives.forEach((directives) => {\n        if (Array.isArray(directives)) {\n            flattenedDirectives = flattenedDirectives.concat(directives);\n        }\n        else {\n            flattenedDirectives.push(directives);\n        }\n    });\n    return flattenedDirectives;\n}\n/**\n * @experimental\n */\nexport function disableDeprecatedForms() {\n    return [{\n            provide: CompilerConfig,\n            useFactory: (platformDirectives, platformPipes) => {\n                const flattenedDirectives = flatten(platformDirectives);\n                ListWrapper.remove(flattenedDirectives, OLD_FORM_DIRECTIVES);\n                return new CompilerConfig({ platformDirectives: flattenedDirectives, platformPipes });\n            },\n            deps: [PLATFORM_DIRECTIVES, PLATFORM_PIPES]\n        }];\n}\n/**\n * @experimental\n */\nexport function provideForms() {\n    return [\n        { provide: PLATFORM_DIRECTIVES, useValue: NEW_FORM_DIRECTIVES, multi: true }, FORM_PROVIDERS\n    ];\n}\n//# sourceMappingURL=form_providers.js.map"]}