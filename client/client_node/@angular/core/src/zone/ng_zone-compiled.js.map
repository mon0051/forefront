{"version":3,"sources":["ng_zone.js"],"names":[],"mappings":"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","file":"ng_zone-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\nvar async_1 = require('../facade/async');\nvar exceptions_1 = require('../facade/exceptions');\nvar ng_zone_impl_1 = require('./ng_zone_impl');\nvar ng_zone_impl_2 = require('./ng_zone_impl');\nexports.NgZoneError = ng_zone_impl_2.NgZoneError;\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))\n * ```\n * import {Component, View, NgZone} from '@angular/core';\n * import {NgIf} from '@angular/common';\n *\n * @Component({\n *   selector: 'ng-zone-demo'.\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n *   directives: [NgIf]\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *       // reenter the Angular zone and display done\n *       this._ngZone.run(() => {console.log('Outside Done!') });\n *     }}));\n *   }\n *\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n * @experimental\n */\nvar NgZone = (function () {\n    function NgZone(_a) {\n        var _this = this;\n        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n        this._hasPendingMicrotasks = false;\n        this._hasPendingMacrotasks = false;\n        /** @internal */\n        this._isStable = true;\n        /** @internal */\n        this._nesting = 0;\n        /** @internal */\n        this._onUnstable = new async_1.EventEmitter(false);\n        /** @internal */\n        this._onMicrotaskEmpty = new async_1.EventEmitter(false);\n        /** @internal */\n        this._onStable = new async_1.EventEmitter(false);\n        /** @internal */\n        this._onErrorEvents = new async_1.EventEmitter(false);\n        this._zoneImpl = new ng_zone_impl_1.NgZoneImpl({\n            trace: enableLongStackTrace,\n            onEnter: function () {\n                // console.log('ZONE.enter', this._nesting, this._isStable);\n                _this._nesting++;\n                if (_this._isStable) {\n                    _this._isStable = false;\n                    _this._onUnstable.emit(null);\n                }\n            },\n            onLeave: function () {\n                _this._nesting--;\n                // console.log('ZONE.leave', this._nesting, this._isStable);\n                _this._checkStable();\n            },\n            setMicrotask: function (hasMicrotasks) {\n                _this._hasPendingMicrotasks = hasMicrotasks;\n                _this._checkStable();\n            },\n            setMacrotask: function (hasMacrotasks) { _this._hasPendingMacrotasks = hasMacrotasks; },\n            onError: function (error) { return _this._onErrorEvents.emit(error); }\n        });\n    }\n    NgZone.isInAngularZone = function () { return ng_zone_impl_1.NgZoneImpl.isInAngularZone(); };\n    NgZone.assertInAngularZone = function () {\n        if (!ng_zone_impl_1.NgZoneImpl.isInAngularZone()) {\n            throw new exceptions_1.BaseException('Expected to be in Angular Zone, but it is not!');\n        }\n    };\n    NgZone.assertNotInAngularZone = function () {\n        if (ng_zone_impl_1.NgZoneImpl.isInAngularZone()) {\n            throw new exceptions_1.BaseException('Expected to not be in Angular Zone, but it is!');\n        }\n    };\n    NgZone.prototype._checkStable = function () {\n        var _this = this;\n        if (this._nesting == 0) {\n            if (!this._hasPendingMicrotasks && !this._isStable) {\n                try {\n                    // console.log('ZONE.microtaskEmpty');\n                    this._nesting++;\n                    this._onMicrotaskEmpty.emit(null);\n                }\n                finally {\n                    this._nesting--;\n                    if (!this._hasPendingMicrotasks) {\n                        try {\n                            // console.log('ZONE.stable', this._nesting, this._isStable);\n                            this.runOutsideAngular(function () { return _this._onStable.emit(null); });\n                        }\n                        finally {\n                            this._isStable = true;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    ;\n    Object.defineProperty(NgZone.prototype, \"onUnstable\", {\n        /**\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n         */\n        get: function () { return this._onUnstable; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgZone.prototype, \"onMicrotaskEmpty\", {\n        /**\n         * Notifies when there is no more microtasks enqueue in the current VM Turn.\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n         * For this reason this event can fire multiple times per VM Turn.\n         */\n        get: function () { return this._onMicrotaskEmpty; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgZone.prototype, \"onStable\", {\n        /**\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n         * implies we are about to relinquish VM turn.\n         * This event gets called just once.\n         */\n        get: function () { return this._onStable; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgZone.prototype, \"onError\", {\n        /**\n         * Notify that an error has been delivered.\n         */\n        get: function () { return this._onErrorEvents; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgZone.prototype, \"isStable\", {\n        /**\n         * Whether there are no outstanding microtasks or microtasks.\n         */\n        get: function () { return this._isStable; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgZone.prototype, \"hasPendingMicrotasks\", {\n        /**\n         * Whether there are any outstanding microtasks.\n         */\n        get: function () { return this._hasPendingMicrotasks; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgZone.prototype, \"hasPendingMacrotasks\", {\n        /**\n         * Whether there are any outstanding microtasks.\n         */\n        get: function () { return this._hasPendingMacrotasks; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    NgZone.prototype.run = function (fn) { return this._zoneImpl.runInner(fn); };\n    /**\n     * Same as #run, except that synchronous errors are caught and forwarded\n     * via `onError` and not rethrown.\n     */\n    NgZone.prototype.runGuarded = function (fn) { return this._zoneImpl.runInnerGuarded(fn); };\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n     */\n    NgZone.prototype.runOutsideAngular = function (fn) { return this._zoneImpl.runOuter(fn); };\n    return NgZone;\n}());\nexports.NgZone = NgZone;\n//# sourceMappingURL=ng_zone.js.map"]}