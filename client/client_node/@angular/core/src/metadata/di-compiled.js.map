{"version":3,"sources":["di.js"],"names":[],"mappings":"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","file":"di-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar forward_ref_1 = require('../di/forward_ref');\nvar metadata_1 = require('../di/metadata');\nvar lang_1 = require('../facade/lang');\n/**\n * Specifies that a constant attribute value should be injected.\n *\n * The directive can inject constant string literals of host element attributes.\n *\n * ### Example\n *\n * Suppose we have an `<input>` element and want to know its `type`.\n *\n * ```html\n * <input type=\"text\">\n * ```\n *\n * A decorator can inject string literal `text` like so:\n *\n * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n * @ts2dart_const\n * @stable\n */\nvar AttributeMetadata = (function (_super) {\n    __extends(AttributeMetadata, _super);\n    function AttributeMetadata(attributeName) {\n        _super.call(this);\n        this.attributeName = attributeName;\n    }\n    Object.defineProperty(AttributeMetadata.prototype, \"token\", {\n        get: function () {\n            // Normally one would default a token to a type of an injected value but here\n            // the type of a variable is \"string\" and we can't use primitive type as a return value\n            // so we use instance of Attribute instead. This doesn't matter much in practice as arguments\n            // with @Attribute annotation are injected by ElementInjector that doesn't take tokens into\n            // account.\n            return this;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AttributeMetadata.prototype.toString = function () { return \"@Attribute(\" + lang_1.stringify(this.attributeName) + \")\"; };\n    return AttributeMetadata;\n}(metadata_1.DependencyMetadata));\nexports.AttributeMetadata = AttributeMetadata;\n/**\n * Declares an injectable parameter to be a live list of directives or variable\n * bindings from the content children of a directive.\n *\n * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))\n *\n * Assume that `<tabs>` component would like to get a list its children `<pane>`\n * components as shown in this example:\n *\n * ```html\n * <tabs>\n *   <pane title=\"Overview\">...</pane>\n *   <pane *ngFor=\"let o of objects\" [title]=\"o.title\">{{o.text}}</pane>\n * </tabs>\n * ```\n *\n * The preferred solution is to query for `Pane` directives using this decorator.\n *\n * ```javascript\n * @Component({\n *   selector: 'pane',\n *   inputs: ['title']\n * })\n * class Pane {\n *   title:string;\n * }\n *\n * @Component({\n *  selector: 'tabs',\n *  template: `\n *    <ul>\n *      <li *ngFor=\"let pane of panes\">{{pane.title}}</li>\n *    </ul>\n *    <ng-content></ng-content>\n *  `\n * })\n * class Tabs {\n *   panes: QueryList<Pane>;\n *   constructor(@Query(Pane) panes:QueryList<Pane>) {\n  *    this.panes = panes;\n  *  }\n * }\n * ```\n *\n * A query can look for variable bindings by passing in a string with desired binding symbol.\n *\n * ### Example ([live demo](http://plnkr.co/edit/sT2j25cH1dURAyBRCKx1?p=preview))\n * ```html\n * <seeker>\n *   <div #findme>...</div>\n * </seeker>\n *\n * @Component({ selector: 'seeker' })\n * class Seeker {\n *   constructor(@Query('findme') elList: QueryList<ElementRef>) {...}\n * }\n * ```\n *\n * In this case the object that is injected depend on the type of the variable\n * binding. It can be an ElementRef, a directive or a component.\n *\n * Passing in a comma separated list of variable bindings will query for all of them.\n *\n * ```html\n * <seeker>\n *   <div #find-me>...</div>\n *   <div #find-me-too>...</div>\n * </seeker>\n *\n *  @Component({\n *   selector: 'seeker'\n * })\n * class Seeker {\n *   constructor(@Query('findMe, findMeToo') elList: QueryList<ElementRef>) {...}\n * }\n * ```\n *\n * Configure whether query looks for direct children or all descendants\n * of the querying element, by using the `descendants` parameter.\n * It is set to `false` by default.\n *\n * ### Example ([live demo](http://plnkr.co/edit/wtGeB977bv7qvA5FTYl9?p=preview))\n * ```html\n * <container #first>\n *   <item>a</item>\n *   <item>b</item>\n *   <container #second>\n *     <item>c</item>\n *   </container>\n * </container>\n * ```\n *\n * When querying for items, the first container will see only `a` and `b` by default,\n * but with `Query(TextDirective, {descendants: true})` it will see `c` too.\n *\n * The queried directives are kept in a depth-first pre-order with respect to their\n * positions in the DOM.\n *\n * Query does not look deep into any subcomponent views.\n *\n * Query is updated as part of the change-detection cycle. Since change detection\n * happens after construction of a directive, QueryList will always be empty when observed in the\n * constructor.\n *\n * The injected object is an unmodifiable live list.\n * See {@link QueryList} for more details.\n * @ts2dart_const\n * @deprecated\n */\nvar QueryMetadata = (function (_super) {\n    __extends(QueryMetadata, _super);\n    function QueryMetadata(_selector, _a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.first, first = _d === void 0 ? false : _d, _e = _b.read, read = _e === void 0 ? null : _e;\n        _super.call(this);\n        this._selector = _selector;\n        this.descendants = descendants;\n        this.first = first;\n        this.read = read;\n    }\n    Object.defineProperty(QueryMetadata.prototype, \"isViewQuery\", {\n        /**\n         * always `false` to differentiate it with {@link ViewQueryMetadata}.\n         */\n        get: function () { return false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QueryMetadata.prototype, \"selector\", {\n        /**\n         * what this is querying for.\n         */\n        get: function () { return forward_ref_1.resolveForwardRef(this._selector); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QueryMetadata.prototype, \"isVarBindingQuery\", {\n        /**\n         * whether this is querying for a variable binding or a directive.\n         */\n        get: function () { return lang_1.isString(this.selector); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QueryMetadata.prototype, \"varBindings\", {\n        /**\n         * returns a list of variable bindings this is querying for.\n         * Only applicable if this is a variable bindings query.\n         */\n        get: function () { return lang_1.StringWrapper.split(this.selector, /\\s*,\\s*/g); },\n        enumerable: true,\n        configurable: true\n    });\n    QueryMetadata.prototype.toString = function () { return \"@Query(\" + lang_1.stringify(this.selector) + \")\"; };\n    return QueryMetadata;\n}(metadata_1.DependencyMetadata));\nexports.QueryMetadata = QueryMetadata;\n// TODO: add an example after ContentChildren and ViewChildren are in master\n/**\n * Configures a content query.\n *\n * Content queries are set before the `ngAfterContentInit` callback is called.\n *\n * ### Example\n *\n * ```\n * @Directive({\n *   selector: 'someDir'\n * })\n * class SomeDir {\n *   @ContentChildren(ChildDirective) contentChildren: QueryList<ChildDirective>;\n *\n *   ngAfterContentInit() {\n *     // contentChildren is set\n *   }\n * }\n * ```\n * @ts2dart_const\n * @stable\n */\nvar ContentChildrenMetadata = (function (_super) {\n    __extends(ContentChildrenMetadata, _super);\n    function ContentChildrenMetadata(_selector, _a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.read, read = _d === void 0 ? null : _d;\n        _super.call(this, _selector, { descendants: descendants, read: read });\n    }\n    return ContentChildrenMetadata;\n}(QueryMetadata));\nexports.ContentChildrenMetadata = ContentChildrenMetadata;\n// TODO: add an example after ContentChild and ViewChild are in master\n/**\n * Configures a content query.\n *\n * Content queries are set before the `ngAfterContentInit` callback is called.\n *\n * ### Example\n *\n * ```\n * @Directive({\n *   selector: 'someDir'\n * })\n * class SomeDir {\n *   @ContentChild(ChildDirective) contentChild;\n *\n *   ngAfterContentInit() {\n *     // contentChild is set\n *   }\n * }\n * ```\n * @ts2dart_const\n * @stable\n */\nvar ContentChildMetadata = (function (_super) {\n    __extends(ContentChildMetadata, _super);\n    function ContentChildMetadata(_selector, _a) {\n        var _b = (_a === void 0 ? {} : _a).read, read = _b === void 0 ? null : _b;\n        _super.call(this, _selector, { descendants: true, first: true, read: read });\n    }\n    return ContentChildMetadata;\n}(QueryMetadata));\nexports.ContentChildMetadata = ContentChildMetadata;\n/**\n * Similar to {@link QueryMetadata}, but querying the component view, instead of\n * the content children.\n *\n * ### Example ([live demo](http://plnkr.co/edit/eNsFHDf7YjyM6IzKxM1j?p=preview))\n *\n * ```javascript\n * @Component({\n *   ...,\n *   template: `\n *     <item> a </item>\n *     <item> b </item>\n *     <item> c </item>\n *   `\n * })\n * class MyComponent {\n *   shown: boolean;\n *\n *   constructor(private @ViewQuery(Item) items:QueryList<Item>) {\n *     items.changes.subscribe(() => console.log(items.length));\n *   }\n * }\n * ```\n *\n * Supports the same querying parameters as {@link QueryMetadata}, except\n * `descendants`. This always queries the whole view.\n *\n * As `shown` is flipped between true and false, items will contain zero of one\n * items.\n *\n * Specifies that a {@link QueryList} should be injected.\n *\n * The injected object is an iterable and observable live list.\n * See {@link QueryList} for more details.\n * @ts2dart_const\n * @deprecated\n */\nvar ViewQueryMetadata = (function (_super) {\n    __extends(ViewQueryMetadata, _super);\n    function ViewQueryMetadata(_selector, _a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.first, first = _d === void 0 ? false : _d, _e = _b.read, read = _e === void 0 ? null : _e;\n        _super.call(this, _selector, { descendants: descendants, first: first, read: read });\n    }\n    Object.defineProperty(ViewQueryMetadata.prototype, \"isViewQuery\", {\n        /**\n         * always `true` to differentiate it with {@link QueryMetadata}.\n         */\n        get: function () { return true; },\n        enumerable: true,\n        configurable: true\n    });\n    ViewQueryMetadata.prototype.toString = function () { return \"@ViewQuery(\" + lang_1.stringify(this.selector) + \")\"; };\n    return ViewQueryMetadata;\n}(QueryMetadata));\nexports.ViewQueryMetadata = ViewQueryMetadata;\n/**\n * Declares a list of child element references.\n *\n * Angular automatically updates the list when the DOM is updated.\n *\n * `ViewChildren` takes an argument to select elements.\n *\n * - If the argument is a type, directives or components with the type will be bound.\n *\n * - If the argument is a string, the string is interpreted as a list of comma-separated selectors.\n * For each selector, an element containing the matching template variable (e.g. `#child`) will be\n * bound.\n *\n * View children are set before the `ngAfterViewInit` callback is called.\n *\n * ### Example\n *\n * With type selector:\n *\n * ```\n * @Component({\n *   selector: 'child-cmp',\n *   template: '<p>child</p>'\n * })\n * class ChildCmp {\n *   doSomething() {}\n * }\n *\n * @Component({\n *   selector: 'some-cmp',\n *   template: `\n *     <child-cmp></child-cmp>\n *     <child-cmp></child-cmp>\n *     <child-cmp></child-cmp>\n *   `,\n *   directives: [ChildCmp]\n * })\n * class SomeCmp {\n *   @ViewChildren(ChildCmp) children:QueryList<ChildCmp>;\n *\n *   ngAfterViewInit() {\n *     // children are set\n *     this.children.toArray().forEach((child)=>child.doSomething());\n *   }\n * }\n * ```\n *\n * With string selector:\n *\n * ```\n * @Component({\n *   selector: 'child-cmp',\n *   template: '<p>child</p>'\n * })\n * class ChildCmp {\n *   doSomething() {}\n * }\n *\n * @Component({\n *   selector: 'some-cmp',\n *   template: `\n *     <child-cmp #child1></child-cmp>\n *     <child-cmp #child2></child-cmp>\n *     <child-cmp #child3></child-cmp>\n *   `,\n *   directives: [ChildCmp]\n * })\n * class SomeCmp {\n *   @ViewChildren('child1,child2,child3') children:QueryList<ChildCmp>;\n *\n *   ngAfterViewInit() {\n *     // children are set\n *     this.children.toArray().forEach((child)=>child.doSomething());\n *   }\n * }\n * ```\n * @ts2dart_const\n * @stable\n */\nvar ViewChildrenMetadata = (function (_super) {\n    __extends(ViewChildrenMetadata, _super);\n    function ViewChildrenMetadata(_selector, _a) {\n        var _b = (_a === void 0 ? {} : _a).read, read = _b === void 0 ? null : _b;\n        _super.call(this, _selector, { descendants: true, read: read });\n    }\n    return ViewChildrenMetadata;\n}(ViewQueryMetadata));\nexports.ViewChildrenMetadata = ViewChildrenMetadata;\n/**\n *\n * Declares a reference of child element.\n *\n * `ViewChildren` takes an argument to select elements.\n *\n * - If the argument is a type, a directive or a component with the type will be bound.\n *\n If the argument is a string, the string is interpreted as a selector. An element containing the\n matching template variable (e.g. `#child`) will be bound.\n *\n * In either case, `@ViewChild()` assigns the first (looking from above) element if there are\n multiple matches.\n *\n * View child is set before the `ngAfterViewInit` callback is called.\n *\n * ### Example\n *\n * With type selector:\n *\n * ```\n * @Component({\n *   selector: 'child-cmp',\n *   template: '<p>child</p>'\n * })\n * class ChildCmp {\n *   doSomething() {}\n * }\n *\n * @Component({\n *   selector: 'some-cmp',\n *   template: '<child-cmp></child-cmp>',\n *   directives: [ChildCmp]\n * })\n * class SomeCmp {\n *   @ViewChild(ChildCmp) child:ChildCmp;\n *\n *   ngAfterViewInit() {\n *     // child is set\n *     this.child.doSomething();\n *   }\n * }\n * ```\n *\n * With string selector:\n *\n * ```\n * @Component({\n *   selector: 'child-cmp',\n *   template: '<p>child</p>'\n * })\n * class ChildCmp {\n *   doSomething() {}\n * }\n *\n * @Component({\n *   selector: 'some-cmp',\n *   template: '<child-cmp #child></child-cmp>',\n *   directives: [ChildCmp]\n * })\n * class SomeCmp {\n *   @ViewChild('child') child:ChildCmp;\n *\n *   ngAfterViewInit() {\n *     // child is set\n *     this.child.doSomething();\n *   }\n * }\n * ```\n * @ts2dart_const\n * @stable\n */\nvar ViewChildMetadata = (function (_super) {\n    __extends(ViewChildMetadata, _super);\n    function ViewChildMetadata(_selector, _a) {\n        var _b = (_a === void 0 ? {} : _a).read, read = _b === void 0 ? null : _b;\n        _super.call(this, _selector, { descendants: true, first: true, read: read });\n    }\n    return ViewChildMetadata;\n}(ViewQueryMetadata));\nexports.ViewChildMetadata = ViewChildMetadata;\n//# sourceMappingURL=di.js.map"]}