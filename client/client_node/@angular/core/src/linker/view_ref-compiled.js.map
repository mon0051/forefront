{"version":3,"sources":["view_ref.js"],"names":[],"mappings":"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","file":"view_ref-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar constants_1 = require('../change_detection/constants');\nvar exceptions_1 = require('../facade/exceptions');\n/**\n * @stable\n */\nvar ViewRef = (function () {\n    function ViewRef() {\n    }\n    Object.defineProperty(ViewRef.prototype, \"destroyed\", {\n        get: function () { return exceptions_1.unimplemented(); },\n        enumerable: true,\n        configurable: true\n    });\n    return ViewRef;\n}());\nexports.ViewRef = ViewRef;\n/**\n * Represents an Angular View.\n *\n * <!-- TODO: move the next two paragraphs to the dev guide -->\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\n * Elements which are created and destroyed together.\n *\n * Properties of elements in a View can change, but the structure (number and order) of elements in\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n * removing nested Views via a {@link ViewContainerRef}. Each View can contain many View Containers.\n * <!-- /TODO -->\n *\n * ### Example\n *\n * Given this template...\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * We have two {@link TemplateRef}s:\n *\n * Outer {@link TemplateRef}:\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <template ngFor let-item [ngForOf]=\"items\"></template>\n * </ul>\n * ```\n *\n * Inner {@link TemplateRef}:\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * Notice that the original template is broken down into two separate {@link TemplateRef}s.\n *\n * The outer/inner {@link TemplateRef}s are then assembled into views like so:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <template view-container-ref></template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * @experimental\n */\nvar EmbeddedViewRef = (function (_super) {\n    __extends(EmbeddedViewRef, _super);\n    function EmbeddedViewRef() {\n        _super.apply(this, arguments);\n    }\n    Object.defineProperty(EmbeddedViewRef.prototype, \"context\", {\n        get: function () { return exceptions_1.unimplemented(); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EmbeddedViewRef.prototype, \"rootNodes\", {\n        get: function () { return exceptions_1.unimplemented(); },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    return EmbeddedViewRef;\n}(ViewRef));\nexports.EmbeddedViewRef = EmbeddedViewRef;\nvar ViewRef_ = (function () {\n    function ViewRef_(_view) {\n        this._view = _view;\n        this._view = _view;\n        this._originalMode = this._view.cdMode;\n    }\n    Object.defineProperty(ViewRef_.prototype, \"internalView\", {\n        get: function () { return this._view; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n        get: function () { return this._view.flatRootNodes; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"context\", {\n        get: function () { return this._view.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n        get: function () { return this._view.destroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    ViewRef_.prototype.markForCheck = function () { this._view.markPathToRootAsCheckOnce(); };\n    ViewRef_.prototype.detach = function () { this._view.cdMode = constants_1.ChangeDetectorStatus.Detached; };\n    ViewRef_.prototype.detectChanges = function () { this._view.detectChanges(false); };\n    ViewRef_.prototype.checkNoChanges = function () { this._view.detectChanges(true); };\n    ViewRef_.prototype.reattach = function () {\n        this._view.cdMode = this._originalMode;\n        this.markForCheck();\n    };\n    ViewRef_.prototype.onDestroy = function (callback) { this._view.disposables.push(callback); };\n    ViewRef_.prototype.destroy = function () { this._view.destroy(); };\n    return ViewRef_;\n}());\nexports.ViewRef_ = ViewRef_;\n//# sourceMappingURL=view_ref.js.map"]}