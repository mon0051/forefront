{"version":3,"sources":["template_ref.js"],"names":[],"mappings":"AAAA;;;;;;;AAOA;;AACA,IAAI,YAAa,aAAQ,UAAK,SAAd,IAA4B,UAAU,CAAV,EAAa,CAAb,EAAgB;AACxD,SAAK,IAAI,CAAT,IAAc,CAAd;AAAiB,YAAI,EAAE,cAAF,CAAiB,CAAjB,CAAJ,EAAyB,EAAE,CAAF,IAAO,EAAE,CAAF,CAAP;AAA1C,KACA,SAAS,EAAT,GAAc;AAAE,aAAK,WAAL,GAAmB,CAAnB;AAAuB;AACvC,MAAE,SAAF,GAAc,MAAM,IAAN,GAAa,OAAO,MAAP,CAAc,CAAd,CAAb,IAAiC,GAAG,SAAH,GAAe,EAAE,SAAjB,EAA4B,IAAI,EAAJ,EAA7D,CAAd;AACH,CAJD;AAKA,IAAI,SAAS,QAAQ,gBAAR,CAAb;AACA,IAAI,gBAAgB,IAAI,MAAJ,EAApB;AACA;;;;;;;;;;;;;AAaA,IAAI,cAAe,YAAY;AAC3B,aAAS,WAAT,GAAuB,CACtB;AACD,WAAO,cAAP,CAAsB,YAAY,SAAlC,EAA6C,YAA7C,EAA2D;AACvD;;;;;;;;;;;AAWA;AACA,aAAK,eAAY;AAAE,mBAAO,IAAP;AAAc,SAbsB;AAcvD,oBAAY,IAd2C;AAevD,sBAAc;AAfyC,KAA3D;AAiBA,WAAO,WAAP;AACH,CArBkB,EAAnB;AAsBA,QAAQ,WAAR,GAAsB,WAAtB;AACA,IAAI,eAAgB,UAAU,MAAV,EAAkB;AAClC,cAAU,YAAV,EAAwB,MAAxB;AACA,aAAS,YAAT,CAAsB,WAAtB,EAAmC,YAAnC,EAAiD;AAC7C,eAAO,IAAP,CAAY,IAAZ;AACA,aAAK,WAAL,GAAmB,WAAnB;AACA,aAAK,YAAL,GAAoB,YAApB;AACH;AACD,iBAAa,SAAb,CAAuB,kBAAvB,GAA4C,UAAU,OAAV,EAAmB;AAC3D,YAAI,OAAO,KAAK,YAAL,CAAkB,KAAK,WAAL,CAAiB,UAAjB,CAA4B,SAA9C,EAAyD,KAAK,WAAL,CAAiB,cAA1E,EAA0F,KAAK,WAA/F,CAAX;AACA,YAAI,OAAO,OAAP,CAAe,OAAf,CAAJ,EAA6B;AACzB,sBAAU,aAAV;AACH;AACD,aAAK,MAAL,CAAY,OAAZ,EAAqB,IAArB,EAA2B,IAA3B;AACA,eAAO,KAAK,GAAZ;AACH,KAPD;AAQA,WAAO,cAAP,CAAsB,aAAa,SAAnC,EAA8C,YAA9C,EAA4D;AACxD,aAAK,eAAY;AAAE,mBAAO,KAAK,WAAL,CAAiB,UAAxB;AAAqC,SADA;AAExD,oBAAY,IAF4C;AAGxD,sBAAc;AAH0C,KAA5D;AAKA,WAAO,YAAP;AACH,CArBmB,CAqBlB,WArBkB,CAApB;AAsBA,QAAQ,YAAR,GAAuB,YAAvB;AACA","file":"template_ref-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar lang_1 = require('../facade/lang');\nvar EMPTY_CONTEXT = new Object();\n/**\n * Represents an Embedded Template that can be used to instantiate Embedded Views.\n *\n * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or\n * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the\n * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the\n * `TemplateRef` from a Component or a Directive via {@link Query}.\n *\n * To instantiate Embedded Views based on a Template, use\n * {@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the\n * View Container.\n * @stable\n */\nvar TemplateRef = (function () {\n    function TemplateRef() {\n    }\n    Object.defineProperty(TemplateRef.prototype, \"elementRef\", {\n        /**\n         * The location in the View where the Embedded View logically belongs to.\n         *\n         * The data-binding and injection contexts of Embedded Views created from this `TemplateRef`\n         * inherit from the contexts of this location.\n         *\n         * Typically new Embedded Views are attached to the View Container of this location, but in\n         * advanced use-cases, the View can be attached to a different container while keeping the\n         * data-binding and injection context from the original location.\n         *\n         */\n        // TODO(i): rename to anchor or location\n        get: function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    return TemplateRef;\n}());\nexports.TemplateRef = TemplateRef;\nvar TemplateRef_ = (function (_super) {\n    __extends(TemplateRef_, _super);\n    function TemplateRef_(_appElement, _viewFactory) {\n        _super.call(this);\n        this._appElement = _appElement;\n        this._viewFactory = _viewFactory;\n    }\n    TemplateRef_.prototype.createEmbeddedView = function (context) {\n        var view = this._viewFactory(this._appElement.parentView.viewUtils, this._appElement.parentInjector, this._appElement);\n        if (lang_1.isBlank(context)) {\n            context = EMPTY_CONTEXT;\n        }\n        view.create(context, null, null);\n        return view.ref;\n    };\n    Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n        get: function () { return this._appElement.elementRef; },\n        enumerable: true,\n        configurable: true\n    });\n    return TemplateRef_;\n}(TemplateRef));\nexports.TemplateRef_ = TemplateRef_;\n//# sourceMappingURL=template_ref.js.map"]}