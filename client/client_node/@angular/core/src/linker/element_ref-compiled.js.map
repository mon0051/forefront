{"version":3,"sources":["element_ref.js"],"names":[],"mappings":"AAAA;;;;;;;AAOA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;;AACA,IAAI,aAAc,YAAY;AAC1B,WAAS,UAAT,CAAoB,aAApB,EAAmC;AAC/B,SAAK,aAAL,GAAqB,aAArB;AACH;AACD,SAAO,UAAP;AACH,CALiB,EAAlB;AAMA,QAAQ,UAAR,GAAqB,UAArB;AACA","file":"element_ref-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * @stable\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nvar ElementRef = (function () {\n    function ElementRef(nativeElement) {\n        this.nativeElement = nativeElement;\n    }\n    return ElementRef;\n}());\nexports.ElementRef = ElementRef;\n//# sourceMappingURL=element_ref.js.map"]}