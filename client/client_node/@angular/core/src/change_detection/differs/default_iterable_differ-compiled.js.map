{"version":3,"sources":["default_iterable_differ.js"],"names":[],"mappings":"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","file":"default_iterable_differ-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\nvar collection_1 = require('../../facade/collection');\nvar exceptions_1 = require('../../facade/exceptions');\nvar lang_1 = require('../../facade/lang');\n/* @ts2dart_const */\nvar DefaultIterableDifferFactory = (function () {\n    function DefaultIterableDifferFactory() {\n    }\n    DefaultIterableDifferFactory.prototype.supports = function (obj) { return collection_1.isListLikeIterable(obj); };\n    DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {\n        return new DefaultIterableDiffer(trackByFn);\n    };\n    return DefaultIterableDifferFactory;\n}());\nexports.DefaultIterableDifferFactory = DefaultIterableDifferFactory;\nvar trackByIdentity = function (index, item) { return item; };\n/**\n * @stable\n */\nvar DefaultIterableDiffer = (function () {\n    function DefaultIterableDiffer(_trackByFn) {\n        this._trackByFn = _trackByFn;\n        this._length = null;\n        this._collection = null;\n        // Keeps track of the used records at any point in time (during & across `_check()` calls)\n        this._linkedRecords = null;\n        // Keeps track of the removed records at any point in time during `_check()` calls.\n        this._unlinkedRecords = null;\n        this._previousItHead = null;\n        this._itHead = null;\n        this._itTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._movesHead = null;\n        this._movesTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n        // Keeps track of records where custom track by is the same, but item identity has changed\n        this._identityChangesHead = null;\n        this._identityChangesTail = null;\n        this._trackByFn = lang_1.isPresent(this._trackByFn) ? this._trackByFn : trackByIdentity;\n    }\n    Object.defineProperty(DefaultIterableDiffer.prototype, \"collection\", {\n        get: function () { return this._collection; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DefaultIterableDiffer.prototype, \"length\", {\n        get: function () { return this._length; },\n        enumerable: true,\n        configurable: true\n    });\n    DefaultIterableDiffer.prototype.forEachItem = function (fn) {\n        var record;\n        for (record = this._itHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {\n        var record;\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {\n        var record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {\n        var record;\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {\n        var record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {\n        var record;\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n            fn(record);\n        }\n    };\n    DefaultIterableDiffer.prototype.diff = function (collection) {\n        if (lang_1.isBlank(collection))\n            collection = [];\n        if (!collection_1.isListLikeIterable(collection)) {\n            throw new exceptions_1.BaseException(\"Error trying to diff '\" + collection + \"'\");\n        }\n        if (this.check(collection)) {\n            return this;\n        }\n        else {\n            return null;\n        }\n    };\n    DefaultIterableDiffer.prototype.onDestroy = function () { };\n    // todo(vicb): optim for UnmodifiableListView (frozen arrays)\n    DefaultIterableDiffer.prototype.check = function (collection) {\n        var _this = this;\n        this._reset();\n        var record = this._itHead;\n        var mayBeDirty = false;\n        var index;\n        var item;\n        var itemTrackBy;\n        if (lang_1.isArray(collection)) {\n            var list = collection;\n            this._length = collection.length;\n            for (index = 0; index < this._length; index++) {\n                item = list[index];\n                itemTrackBy = this._trackByFn(index, item);\n                if (record === null || !lang_1.looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!lang_1.looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n            }\n        }\n        else {\n            index = 0;\n            collection_1.iterateListLike(collection, function (item /** TODO #9100 */) {\n                itemTrackBy = _this._trackByFn(index, item);\n                if (record === null || !lang_1.looseIdentical(record.trackById, itemTrackBy)) {\n                    record = _this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!lang_1.looseIdentical(record.item, item))\n                        _this._addIdentityChange(record, item);\n                }\n                record = record._next;\n                index++;\n            });\n            this._length = index;\n        }\n        this._truncate(record);\n        this._collection = collection;\n        return this.isDirty;\n    };\n    Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n         * changes.\n         */\n        get: function () {\n            return this._additionsHead !== null || this._movesHead !== null ||\n                this._removalsHead !== null || this._identityChangesHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * @internal\n     */\n    DefaultIterableDiffer.prototype._reset = function () {\n        if (this.isDirty) {\n            var record;\n            var nextRecord;\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                record.previousIndex = record.currentIndex;\n            }\n            this._additionsHead = this._additionsTail = null;\n            for (record = this._movesHead; record !== null; record = nextRecord) {\n                record.previousIndex = record.currentIndex;\n                nextRecord = record._nextMoved;\n            }\n            this._movesHead = this._movesTail = null;\n            this._removalsHead = this._removalsTail = null;\n            this._identityChangesHead = this._identityChangesTail = null;\n        }\n    };\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * @internal\n     */\n    DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {\n        // The previous record after which we will append the current one.\n        var previousRecord;\n        if (record === null) {\n            previousRecord = this._itTail;\n        }\n        else {\n            previousRecord = record._prev;\n            // Remove the record from the collection since we know it does not match the item.\n            this._remove(record);\n        }\n        // Attempt to see if we have seen the item before.\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n        if (record !== null) {\n            // We have seen this before, we need to move it forward in the collection.\n            // But first we need to check if identity changed, so we can update in view if necessary\n            if (!lang_1.looseIdentical(record.item, item))\n                this._addIdentityChange(record, item);\n            this._moveAfter(record, previousRecord, index);\n        }\n        else {\n            // Never seen it, check evicted list.\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n            if (record !== null) {\n                // It is an item which we have evicted earlier: reinsert it back into the list.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!lang_1.looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._reinsertAfter(record, previousRecord, index);\n            }\n            else {\n                // It is a new item: add it.\n                record =\n                    this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);\n            }\n        }\n        return record;\n    };\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * @internal\n     */\n    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {\n        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n        if (reinsertRecord !== null) {\n            record = this._reinsertAfter(reinsertRecord, record._prev, index);\n        }\n        else if (record.currentIndex != index) {\n            record.currentIndex = index;\n            this._addToMoves(record, index);\n        }\n        return record;\n    };\n    /**\n     * Get rid of any excess {@link CollectionChangeRecord}s from the previous collection\n     *\n     * - `record` The first excess {@link CollectionChangeRecord}.\n     *\n     * @internal\n     */\n    DefaultIterableDiffer.prototype._truncate = function (record) {\n        // Anything after that needs to be removed;\n        while (record !== null) {\n            var nextRecord = record._next;\n            this._addToRemovals(this._unlink(record));\n            record = nextRecord;\n        }\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.clear();\n        }\n        if (this._additionsTail !== null) {\n            this._additionsTail._nextAdded = null;\n        }\n        if (this._movesTail !== null) {\n            this._movesTail._nextMoved = null;\n        }\n        if (this._itTail !== null) {\n            this._itTail._next = null;\n        }\n        if (this._removalsTail !== null) {\n            this._removalsTail._nextRemoved = null;\n        }\n        if (this._identityChangesTail !== null) {\n            this._identityChangesTail._nextIdentityChange = null;\n        }\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.remove(record);\n        }\n        var prev = record._prevRemoved;\n        var next = record._nextRemoved;\n        if (prev === null) {\n            this._removalsHead = next;\n        }\n        else {\n            prev._nextRemoved = next;\n        }\n        if (next === null) {\n            this._removalsTail = prev;\n        }\n        else {\n            next._prevRemoved = prev;\n        }\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {\n        this._unlink(record);\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {\n        this._insertAfter(record, prevRecord, index);\n        if (this._additionsTail === null) {\n            // todo(vicb)\n            // assert(this._additionsHead === null);\n            this._additionsTail = this._additionsHead = record;\n        }\n        else {\n            // todo(vicb)\n            // assert(_additionsTail._nextAdded === null);\n            // assert(record._nextAdded === null);\n            this._additionsTail = this._additionsTail._nextAdded = record;\n        }\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {\n        // todo(vicb)\n        // assert(record != prevRecord);\n        // assert(record._next === null);\n        // assert(record._prev === null);\n        var next = prevRecord === null ? this._itHead : prevRecord._next;\n        // todo(vicb)\n        // assert(next != record);\n        // assert(prevRecord != record);\n        record._next = next;\n        record._prev = prevRecord;\n        if (next === null) {\n            this._itTail = record;\n        }\n        else {\n            next._prev = record;\n        }\n        if (prevRecord === null) {\n            this._itHead = record;\n        }\n        else {\n            prevRecord._next = record;\n        }\n        if (this._linkedRecords === null) {\n            this._linkedRecords = new _DuplicateMap();\n        }\n        this._linkedRecords.put(record);\n        record.currentIndex = index;\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._remove = function (record) {\n        return this._addToRemovals(this._unlink(record));\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._unlink = function (record) {\n        if (this._linkedRecords !== null) {\n            this._linkedRecords.remove(record);\n        }\n        var prev = record._prev;\n        var next = record._next;\n        // todo(vicb)\n        // assert((record._prev = null) === null);\n        // assert((record._next = null) === null);\n        if (prev === null) {\n            this._itHead = next;\n        }\n        else {\n            prev._next = next;\n        }\n        if (next === null) {\n            this._itTail = prev;\n        }\n        else {\n            next._prev = prev;\n        }\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {\n        // todo(vicb)\n        // assert(record._nextMoved === null);\n        if (record.previousIndex === toIndex) {\n            return record;\n        }\n        if (this._movesTail === null) {\n            // todo(vicb)\n            // assert(_movesHead === null);\n            this._movesTail = this._movesHead = record;\n        }\n        else {\n            // todo(vicb)\n            // assert(_movesTail._nextMoved === null);\n            this._movesTail = this._movesTail._nextMoved = record;\n        }\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._addToRemovals = function (record) {\n        if (this._unlinkedRecords === null) {\n            this._unlinkedRecords = new _DuplicateMap();\n        }\n        this._unlinkedRecords.put(record);\n        record.currentIndex = null;\n        record._nextRemoved = null;\n        if (this._removalsTail === null) {\n            // todo(vicb)\n            // assert(_removalsHead === null);\n            this._removalsTail = this._removalsHead = record;\n            record._prevRemoved = null;\n        }\n        else {\n            // todo(vicb)\n            // assert(_removalsTail._nextRemoved === null);\n            // assert(record._nextRemoved === null);\n            record._prevRemoved = this._removalsTail;\n            this._removalsTail = this._removalsTail._nextRemoved = record;\n        }\n        return record;\n    };\n    /** @internal */\n    DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {\n        record.item = item;\n        if (this._identityChangesTail === null) {\n            this._identityChangesTail = this._identityChangesHead = record;\n        }\n        else {\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n        }\n        return record;\n    };\n    DefaultIterableDiffer.prototype.toString = function () {\n        var list = [];\n        this.forEachItem(function (record /** TODO #9100 */) { return list.push(record); });\n        var previous = [];\n        this.forEachPreviousItem(function (record /** TODO #9100 */) { return previous.push(record); });\n        var additions = [];\n        this.forEachAddedItem(function (record /** TODO #9100 */) { return additions.push(record); });\n        var moves = [];\n        this.forEachMovedItem(function (record /** TODO #9100 */) { return moves.push(record); });\n        var removals = [];\n        this.forEachRemovedItem(function (record /** TODO #9100 */) { return removals.push(record); });\n        var identityChanges = [];\n        this.forEachIdentityChange(function (record /** TODO #9100 */) { return identityChanges.push(record); });\n        return 'collection: ' + list.join(', ') + '\\n' +\n            'previous: ' + previous.join(', ') + '\\n' +\n            'additions: ' + additions.join(', ') + '\\n' +\n            'moves: ' + moves.join(', ') + '\\n' +\n            'removals: ' + removals.join(', ') + '\\n' +\n            'identityChanges: ' + identityChanges.join(', ') + '\\n';\n    };\n    return DefaultIterableDiffer;\n}());\nexports.DefaultIterableDiffer = DefaultIterableDiffer;\n/**\n * @stable\n */\nvar CollectionChangeRecord = (function () {\n    function CollectionChangeRecord(item, trackById) {\n        this.item = item;\n        this.trackById = trackById;\n        this.currentIndex = null;\n        this.previousIndex = null;\n        /** @internal */\n        this._nextPrevious = null;\n        /** @internal */\n        this._prev = null;\n        /** @internal */\n        this._next = null;\n        /** @internal */\n        this._prevDup = null;\n        /** @internal */\n        this._nextDup = null;\n        /** @internal */\n        this._prevRemoved = null;\n        /** @internal */\n        this._nextRemoved = null;\n        /** @internal */\n        this._nextAdded = null;\n        /** @internal */\n        this._nextMoved = null;\n        /** @internal */\n        this._nextIdentityChange = null;\n    }\n    CollectionChangeRecord.prototype.toString = function () {\n        return this.previousIndex === this.currentIndex ? lang_1.stringify(this.item) :\n            lang_1.stringify(this.item) + '[' +\n                lang_1.stringify(this.previousIndex) + '->' + lang_1.stringify(this.currentIndex) + ']';\n    };\n    return CollectionChangeRecord;\n}());\nexports.CollectionChangeRecord = CollectionChangeRecord;\n// A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item\nvar _DuplicateItemRecordList = (function () {\n    function _DuplicateItemRecordList() {\n        /** @internal */\n        this._head = null;\n        /** @internal */\n        this._tail = null;\n    }\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     */\n    _DuplicateItemRecordList.prototype.add = function (record) {\n        if (this._head === null) {\n            this._head = this._tail = record;\n            record._nextDup = null;\n            record._prevDup = null;\n        }\n        else {\n            // todo(vicb)\n            // assert(record.item ==  _head.item ||\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n            this._tail._nextDup = record;\n            record._prevDup = this._tail;\n            record._nextDup = null;\n            this._tail = record;\n        }\n    };\n    // Returns a CollectionChangeRecord having CollectionChangeRecord.trackById == trackById and\n    // CollectionChangeRecord.currentIndex >= afterIndex\n    _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {\n        var record;\n        for (record = this._head; record !== null; record = record._nextDup) {\n            if ((afterIndex === null || afterIndex < record.currentIndex) &&\n                lang_1.looseIdentical(record.trackById, trackById)) {\n                return record;\n            }\n        }\n        return null;\n    };\n    /**\n     * Remove one {@link CollectionChangeRecord} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     */\n    _DuplicateItemRecordList.prototype.remove = function (record) {\n        // todo(vicb)\n        // assert(() {\n        //  // verify that the record being removed is in the list.\n        //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {\n        //    if (identical(cursor, record)) return true;\n        //  }\n        //  return false;\n        //});\n        var prev = record._prevDup;\n        var next = record._nextDup;\n        if (prev === null) {\n            this._head = next;\n        }\n        else {\n            prev._nextDup = next;\n        }\n        if (next === null) {\n            this._tail = prev;\n        }\n        else {\n            next._prevDup = prev;\n        }\n        return this._head === null;\n    };\n    return _DuplicateItemRecordList;\n}());\nvar _DuplicateMap = (function () {\n    function _DuplicateMap() {\n        this.map = new Map();\n    }\n    _DuplicateMap.prototype.put = function (record) {\n        // todo(vicb) handle corner cases\n        var key = lang_1.getMapKey(record.trackById);\n        var duplicates = this.map.get(key);\n        if (!lang_1.isPresent(duplicates)) {\n            duplicates = new _DuplicateItemRecordList();\n            this.map.set(key, duplicates);\n        }\n        duplicates.add(record);\n    };\n    /**\n     * Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we\n     * have already iterated over, we use the afterIndex to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the last `a` not the first or second.\n     */\n    _DuplicateMap.prototype.get = function (trackById, afterIndex) {\n        if (afterIndex === void 0) { afterIndex = null; }\n        var key = lang_1.getMapKey(trackById);\n        var recordList = this.map.get(key);\n        return lang_1.isBlank(recordList) ? null : recordList.get(trackById, afterIndex);\n    };\n    /**\n     * Removes a {@link CollectionChangeRecord} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     */\n    _DuplicateMap.prototype.remove = function (record) {\n        var key = lang_1.getMapKey(record.trackById);\n        // todo(vicb)\n        // assert(this.map.containsKey(key));\n        var recordList = this.map.get(key);\n        // Remove the list of duplicates when it gets empty\n        if (recordList.remove(record)) {\n            this.map.delete(key);\n        }\n        return record;\n    };\n    Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n        get: function () { return this.map.size === 0; },\n        enumerable: true,\n        configurable: true\n    });\n    _DuplicateMap.prototype.clear = function () { this.map.clear(); };\n    _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + lang_1.stringify(this.map) + ')'; };\n    return _DuplicateMap;\n}());\n//# sourceMappingURL=default_iterable_differ.js.map"]}