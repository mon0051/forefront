{"version":3,"sources":["keyvalue_differs.js"],"names":[],"mappings":"AAAA;;;;;;;AAOA;;AACA,IAAI,OAAO,QAAQ,UAAR,CAAX;AACA,IAAI,eAAe,QAAQ,yBAAR,CAAnB;AACA,IAAI,eAAe,QAAQ,yBAAR,CAAnB;AACA,IAAI,SAAS,QAAQ,mBAAR,CAAb;AACA;;;;;AAKA,IAAI,kBAAmB,YAAY;AAC/B;AACA,aAAS,eAAT,CAAyB,SAAzB,EAAoC;AAChC,aAAK,SAAL,GAAiB,SAAjB;AACH;AACD,oBAAgB,MAAhB,GAAyB,UAAU,SAAV,EAAqB,MAArB,EAA6B;AAClD,YAAI,OAAO,SAAP,CAAiB,MAAjB,CAAJ,EAA8B;AAC1B,gBAAI,SAAS,aAAa,WAAb,CAAyB,KAAzB,CAA+B,OAAO,SAAtC,CAAb;AACA,wBAAY,UAAU,MAAV,CAAiB,MAAjB,CAAZ;AACA,mBAAO,IAAI,eAAJ,CAAoB,SAApB,CAAP;AACH,SAJD,MAKK;AACD,mBAAO,IAAI,eAAJ,CAAoB,SAApB,CAAP;AACH;AACJ,KATD;AAUA;;;;;;;;;;;;;;;;;;;AAmBA,oBAAgB,MAAhB,GAAyB,UAAU,SAAV,EAAqB;AAC1C,eAAO,IAAI,KAAK,QAAT,CAAkB,eAAlB,EAAmC;AACtC,wBAAY,oBAAU,MAAV,EAAkB;AAC1B,oBAAI,OAAO,OAAP,CAAe,MAAf,CAAJ,EAA4B;AACxB;AACA;AACA;AACA,0BAAM,IAAI,aAAa,aAAjB,CAA+B,yDAA/B,CAAN;AACH;AACD,uBAAO,gBAAgB,MAAhB,CAAuB,SAAvB,EAAkC,MAAlC,CAAP;AACH,aATqC;AAUtC;AACA,kBAAM,CAAC,CAAC,eAAD,EAAkB,IAAI,KAAK,gBAAT,EAAlB,EAA+C,IAAI,KAAK,gBAAT,EAA/C,CAAD;AAXgC,SAAnC,CAAP;AAaH,KAdD;AAeA,oBAAgB,SAAhB,CAA0B,IAA1B,GAAiC,UAAU,EAAV,EAAc;AAC3C,YAAI,UAAU,KAAK,SAAL,CAAe,IAAf,CAAoB,UAAU,CAAV,EAAa;AAAE,mBAAO,EAAE,QAAF,CAAW,EAAX,CAAP;AAAwB,SAA3D,CAAd;AACA,YAAI,OAAO,SAAP,CAAiB,OAAjB,CAAJ,EAA+B;AAC3B,mBAAO,OAAP;AACH,SAFD,MAGK;AACD,kBAAM,IAAI,aAAa,aAAjB,CAA+B,6CAA6C,EAA7C,GAAkD,GAAjF,CAAN;AACH;AACJ,KARD;AASA,WAAO,eAAP;AACH,CA3DsB,EAAvB;AA4DA,QAAQ,eAAR,GAA0B,eAA1B;AACA","file":"keyvalue_differs-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\nvar di_1 = require('../../di');\nvar collection_1 = require('../../facade/collection');\nvar exceptions_1 = require('../../facade/exceptions');\nvar lang_1 = require('../../facade/lang');\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n * @ts2dart_const\n * @stable\n */\nvar KeyValueDiffers = (function () {\n    /*@ts2dart_const*/\n    function KeyValueDiffers(factories) {\n        this.factories = factories;\n    }\n    KeyValueDiffers.create = function (factories, parent) {\n        if (lang_1.isPresent(parent)) {\n            var copied = collection_1.ListWrapper.clone(parent.factories);\n            factories = factories.concat(copied);\n            return new KeyValueDiffers(factories);\n        }\n        else {\n            return new KeyValueDiffers(factories);\n        }\n    };\n    /**\n     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n     * {@link KeyValueDiffers} instance.\n     *\n     * The following example shows how to extend an existing list of factories,\n           * which will only be applied to the injector for this component and its children.\n           * This step is all that's required to make a new {@link KeyValueDiffer} available.\n     *\n     * ### Example\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    KeyValueDiffers.extend = function (factories) {\n        return new di_1.Provider(KeyValueDiffers, {\n            useFactory: function (parent) {\n                if (lang_1.isBlank(parent)) {\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                    // to\n                    // bootstrap(), which would override default pipes instead of extending them.\n                    throw new exceptions_1.BaseException('Cannot extend KeyValueDiffers without a parent injector');\n                }\n                return KeyValueDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[KeyValueDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata()]]\n        });\n    };\n    KeyValueDiffers.prototype.find = function (kv) {\n        var factory = this.factories.find(function (f) { return f.supports(kv); });\n        if (lang_1.isPresent(factory)) {\n            return factory;\n        }\n        else {\n            throw new exceptions_1.BaseException(\"Cannot find a differ supporting object '\" + kv + \"'\");\n        }\n    };\n    return KeyValueDiffers;\n}());\nexports.KeyValueDiffers = KeyValueDiffers;\n//# sourceMappingURL=keyvalue_differs.js.map"]}