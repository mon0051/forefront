{"version":3,"sources":["metadata.js"],"names":[],"mappings":"AAAA;;;;;;;AAOA;;AACA,IAAI,SAAS,QAAQ,gBAAR,CAAb;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,IAAI,iBAAkB,YAAY;AAC9B,aAAS,cAAT,CAAwB,KAAxB,EAA+B;AAC3B,aAAK,KAAL,GAAa,KAAb;AACH;AACD,mBAAe,SAAf,CAAyB,QAAzB,GAAoC,YAAY;AAAE,eAAO,aAAa,OAAO,SAAP,CAAiB,KAAK,KAAtB,CAAb,GAA4C,GAAnD;AAAyD,KAA3G;AACA,WAAO,cAAP;AACH,CANqB,EAAtB;AAOA,QAAQ,cAAR,GAAyB,cAAzB;AACA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAI,mBAAoB,YAAY;AAChC,aAAS,gBAAT,GAA4B,CAC3B;AACD,qBAAiB,SAAjB,CAA2B,QAA3B,GAAsC,YAAY;AAAE,eAAO,aAAP;AAAuB,KAA3E;AACA,WAAO,gBAAP;AACH,CALuB,EAAxB;AAMA,QAAQ,gBAAR,GAA2B,gBAA3B;AACA;;;;;;AAMA,IAAI,qBAAsB,YAAY;AAClC,aAAS,kBAAT,GAA8B,CAC7B;AACD,WAAO,cAAP,CAAsB,mBAAmB,SAAzC,EAAoD,OAApD,EAA6D;AACzD,aAAK,eAAY;AAAE,mBAAO,IAAP;AAAc,SADwB;AAEzD,oBAAY,IAF6C;AAGzD,sBAAc;AAH2C,KAA7D;AAKA,WAAO,kBAAP;AACH,CATyB,EAA1B;AAUA,QAAQ,kBAAR,GAA6B,kBAA7B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,IAAI,qBAAsB,YAAY;AAClC,aAAS,kBAAT,GAA8B,CAC7B;AACD,WAAO,kBAAP;AACH,CAJyB,EAA1B;AAKA,QAAQ,kBAAR,GAA6B,kBAA7B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,IAAI,eAAgB,YAAY;AAC5B,aAAS,YAAT,GAAwB,CACvB;AACD,iBAAa,SAAb,CAAuB,QAAvB,GAAkC,YAAY;AAAE,eAAO,SAAP;AAAmB,KAAnE;AACA,WAAO,YAAP;AACH,CALmB,EAApB;AAMA,QAAQ,YAAR,GAAuB,YAAvB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAI,mBAAoB,YAAY;AAChC,aAAS,gBAAT,GAA4B,CAC3B;AACD,qBAAiB,SAAjB,CAA2B,QAA3B,GAAsC,YAAY;AAAE,eAAO,aAAP;AAAuB,KAA3E;AACA,WAAO,gBAAP;AACH,CALuB,EAAxB;AAMA,QAAQ,gBAAR,GAA2B,gBAA3B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA,IAAI,eAAgB,YAAY;AAC5B,aAAS,YAAT,GAAwB,CACvB;AACD,iBAAa,SAAb,CAAuB,QAAvB,GAAkC,YAAY;AAAE,eAAO,SAAP;AAAmB,KAAnE;AACA,WAAO,YAAP;AACH,CALmB,EAApB;AAMA,QAAQ,YAAR,GAAuB,YAAvB;AACA","file":"metadata-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\nvar lang_1 = require('../facade/lang');\n/**\n * A parameter metadata that specifies a dependency.\n *\n * ### Example ([live demo](http://plnkr.co/edit/6uHYJK?p=preview))\n *\n * ```typescript\n * class Engine {}\n *\n * @Injectable()\n * class Car {\n *   engine;\n *   constructor(@Inject(\"MyEngine\") engine:Engine) {\n *     this.engine = engine;\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([\n *  {provide: \"MyEngine\", useClass: Engine},\n *  Car\n * ]);\n *\n * expect(injector.get(Car).engine instanceof Engine).toBe(true);\n * ```\n *\n * When `@Inject()` is not present, {@link Injector} will use the type annotation of the parameter.\n *\n * ### Example\n *\n * ```typescript\n * class Engine {}\n *\n * @Injectable()\n * class Car {\n *   constructor(public engine: Engine) {} //same as constructor(@Inject(Engine) engine:Engine)\n * }\n *\n * var injector = Injector.resolveAndCreate([Engine, Car]);\n * expect(injector.get(Car).engine instanceof Engine).toBe(true);\n * ```\n * @ts2dart_const\n * @stable\n */\nvar InjectMetadata = (function () {\n    function InjectMetadata(token) {\n        this.token = token;\n    }\n    InjectMetadata.prototype.toString = function () { return \"@Inject(\" + lang_1.stringify(this.token) + \")\"; };\n    return InjectMetadata;\n}());\nexports.InjectMetadata = InjectMetadata;\n/**\n * A parameter metadata that marks a dependency as optional. {@link Injector} provides `null` if\n * the dependency is not found.\n *\n * ### Example ([live demo](http://plnkr.co/edit/AsryOm?p=preview))\n *\n * ```typescript\n * class Engine {}\n *\n * @Injectable()\n * class Car {\n *   engine;\n *   constructor(@Optional() engine:Engine) {\n *     this.engine = engine;\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([Car]);\n * expect(injector.get(Car).engine).toBeNull();\n * ```\n * @ts2dart_const\n * @stable\n */\nvar OptionalMetadata = (function () {\n    function OptionalMetadata() {\n    }\n    OptionalMetadata.prototype.toString = function () { return \"@Optional()\"; };\n    return OptionalMetadata;\n}());\nexports.OptionalMetadata = OptionalMetadata;\n/**\n * `DependencyMetadata` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n * @ts2dart_const\n * @stable\n */\nvar DependencyMetadata = (function () {\n    function DependencyMetadata() {\n    }\n    Object.defineProperty(DependencyMetadata.prototype, \"token\", {\n        get: function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    return DependencyMetadata;\n}());\nexports.DependencyMetadata = DependencyMetadata;\n/**\n * A marker metadata that marks a class as available to {@link Injector} for creation.\n *\n * ### Example ([live demo](http://plnkr.co/edit/Wk4DMQ?p=preview))\n *\n * ```typescript\n * @Injectable()\n * class UsefulService {}\n *\n * @Injectable()\n * class NeedsService {\n *   constructor(public service:UsefulService) {}\n * }\n *\n * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);\n * expect(injector.get(NeedsService).service instanceof UsefulService).toBe(true);\n * ```\n * {@link Injector} will throw {@link NoAnnotationError} when trying to instantiate a class that\n * does not have `@Injectable` marker, as shown in the example below.\n *\n * ```typescript\n * class UsefulService {}\n *\n * class NeedsService {\n *   constructor(public service:UsefulService) {}\n * }\n *\n * var injector = Injector.resolveAndCreate([NeedsService, UsefulService]);\n * expect(() => injector.get(NeedsService)).toThrowError();\n * ```\n * @ts2dart_const\n * @stable\n */\nvar InjectableMetadata = (function () {\n    function InjectableMetadata() {\n    }\n    return InjectableMetadata;\n}());\nexports.InjectableMetadata = InjectableMetadata;\n/**\n * Specifies that an {@link Injector} should retrieve a dependency only from itself.\n *\n * ### Example ([live demo](http://plnkr.co/edit/NeagAg?p=preview))\n *\n * ```typescript\n * class Dependency {\n * }\n *\n * @Injectable()\n * class NeedsDependency {\n *   dependency;\n *   constructor(@Self() dependency:Dependency) {\n *     this.dependency = dependency;\n *   }\n * }\n *\n * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);\n * var nd = inj.get(NeedsDependency);\n *\n * expect(nd.dependency instanceof Dependency).toBe(true);\n *\n * var inj = Injector.resolveAndCreate([Dependency]);\n * var child = inj.resolveAndCreateChild([NeedsDependency]);\n * expect(() => child.get(NeedsDependency)).toThrowError();\n * ```\n * @ts2dart_const\n * @stable\n */\nvar SelfMetadata = (function () {\n    function SelfMetadata() {\n    }\n    SelfMetadata.prototype.toString = function () { return \"@Self()\"; };\n    return SelfMetadata;\n}());\nexports.SelfMetadata = SelfMetadata;\n/**\n * Specifies that the dependency resolution should start from the parent injector.\n *\n * ### Example ([live demo](http://plnkr.co/edit/Wchdzb?p=preview))\n *\n * ```typescript\n * class Dependency {\n * }\n *\n * @Injectable()\n * class NeedsDependency {\n *   dependency;\n *   constructor(@SkipSelf() dependency:Dependency) {\n *     this.dependency = dependency;\n *   }\n * }\n *\n * var parent = Injector.resolveAndCreate([Dependency]);\n * var child = parent.resolveAndCreateChild([NeedsDependency]);\n * expect(child.get(NeedsDependency).dependency instanceof Depedency).toBe(true);\n *\n * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);\n * expect(() => inj.get(NeedsDependency)).toThrowError();\n * ```\n * @ts2dart_const\n * @stable\n */\nvar SkipSelfMetadata = (function () {\n    function SkipSelfMetadata() {\n    }\n    SkipSelfMetadata.prototype.toString = function () { return \"@SkipSelf()\"; };\n    return SkipSelfMetadata;\n}());\nexports.SkipSelfMetadata = SkipSelfMetadata;\n/**\n * Specifies that an injector should retrieve a dependency from any injector until reaching the\n * closest host.\n *\n * In Angular, a component element is automatically declared as a host for all the injectors in\n * its view.\n *\n * ### Example ([live demo](http://plnkr.co/edit/GX79pV?p=preview))\n *\n * In the following example `App` contains `ParentCmp`, which contains `ChildDirective`.\n * So `ParentCmp` is the host of `ChildDirective`.\n *\n * `ChildDirective` depends on two services: `HostService` and `OtherService`.\n * `HostService` is defined at `ParentCmp`, and `OtherService` is defined at `App`.\n *\n *```typescript\n * class OtherService {}\n * class HostService {}\n *\n * @Directive({\n *   selector: 'child-directive'\n * })\n * class ChildDirective {\n *   constructor(@Optional() @Host() os:OtherService, @Optional() @Host() hs:HostService){\n *     console.log(\"os is null\", os);\n *     console.log(\"hs is NOT null\", hs);\n *   }\n * }\n *\n * @Component({\n *   selector: 'parent-cmp',\n *   providers: [HostService],\n *   template: `\n *     Dir: <child-directive></child-directive>\n *   `,\n *   directives: [ChildDirective]\n * })\n * class ParentCmp {\n * }\n *\n * @Component({\n *   selector: 'app',\n *   providers: [OtherService],\n *   template: `\n *     Parent: <parent-cmp></parent-cmp>\n *   `,\n *   directives: [ParentCmp]\n * })\n * class App {\n * }\n *\n * bootstrap(App);\n *```\n * @ts2dart_const\n * @stable\n */\nvar HostMetadata = (function () {\n    function HostMetadata() {\n    }\n    HostMetadata.prototype.toString = function () { return \"@Host()\"; };\n    return HostMetadata;\n}());\nexports.HostMetadata = HostMetadata;\n//# sourceMappingURL=metadata.js.map"]}