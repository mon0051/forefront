{"version":3,"sources":["provider.js"],"names":[],"mappings":"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","file":"provider-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar exceptions_1 = require('../facade/exceptions');\nvar lang_1 = require('../facade/lang');\n/**\n * Describes how the {@link Injector} should instantiate a given token.\n *\n * See {@link provide}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/GNAyj6K6PfYg2NBzgwZ5?p%3Dpreview&p=preview))\n *\n * ```javascript\n * var injector = Injector.resolveAndCreate([\n *   new Provider(\"message\", { useValue: 'Hello' })\n * ]);\n *\n * expect(injector.get(\"message\")).toEqual('Hello');\n * ```\n * @ts2dart_const\n * @deprecated\n */\nvar Provider = (function () {\n    function Provider(token, _a) {\n        var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;\n        this.token = token;\n        this.useClass = useClass;\n        this.useValue = useValue;\n        this.useExisting = useExisting;\n        this.useFactory = useFactory;\n        this.dependencies = deps;\n        this._multi = multi;\n    }\n    Object.defineProperty(Provider.prototype, \"multi\", {\n        // TODO: Provide a full working example after alpha38 is released.\n        /**\n         * Creates multiple providers matching the same token (a multi-provider).\n         *\n         * Multi-providers are used for creating pluggable service, where the system comes\n         * with some default providers, and the user can register additional providers.\n         * The combination of the default providers and the additional providers will be\n         * used to drive the behavior of the system.\n         *\n         * ### Example\n         *\n         * ```typescript\n         * var injector = Injector.resolveAndCreate([\n         *   new Provider(\"Strings\", { useValue: \"String1\", multi: true}),\n         *   new Provider(\"Strings\", { useValue: \"String2\", multi: true})\n         * ]);\n         *\n         * expect(injector.get(\"Strings\")).toEqual([\"String1\", \"String2\"]);\n         * ```\n         *\n         * Multi-providers and regular providers cannot be mixed. The following\n         * will throw an exception:\n         *\n         * ```typescript\n         * var injector = Injector.resolveAndCreate([\n         *   new Provider(\"Strings\", { useValue: \"String1\", multi: true }),\n         *   new Provider(\"Strings\", { useValue: \"String2\"})\n         * ]);\n         * ```\n         */\n        get: function () { return lang_1.normalizeBool(this._multi); },\n        enumerable: true,\n        configurable: true\n    });\n    return Provider;\n}());\nexports.Provider = Provider;\n/**\n * See {@link Provider} instead.\n *\n * @deprecated\n * @ts2dart_const\n */\nvar Binding = (function (_super) {\n    __extends(Binding, _super);\n    function Binding(token, _a) {\n        var toClass = _a.toClass, toValue = _a.toValue, toAlias = _a.toAlias, toFactory = _a.toFactory, deps = _a.deps, multi = _a.multi;\n        _super.call(this, token, {\n            useClass: toClass,\n            useValue: toValue,\n            useExisting: toAlias,\n            useFactory: toFactory,\n            deps: deps,\n            multi: multi\n        });\n    }\n    Object.defineProperty(Binding.prototype, \"toClass\", {\n        /**\n         * @deprecated\n         */\n        get: function () { return this.useClass; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Binding.prototype, \"toAlias\", {\n        /**\n         * @deprecated\n         */\n        get: function () { return this.useExisting; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Binding.prototype, \"toFactory\", {\n        /**\n         * @deprecated\n         */\n        get: function () { return this.useFactory; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Binding.prototype, \"toValue\", {\n        /**\n         * @deprecated\n         */\n        get: function () { return this.useValue; },\n        enumerable: true,\n        configurable: true\n    });\n    return Binding;\n}(Provider));\nexports.Binding = Binding;\n/**\n * Creates a {@link Provider}.\n *\n * To construct a {@link Provider}, bind a `token` to either a class, a value, a factory function,\n * or\n * to an existing `token`.\n * See {@link ProviderBuilder} for more details.\n *\n * The `token` is most commonly a class or {@link OpaqueToken-class.html}.\n *\n * @deprecated\n */\nfunction bind(token) {\n    return new ProviderBuilder(token);\n}\nexports.bind = bind;\n/**\n * Helper class for the {@link bind} function.\n * @deprecated\n */\nvar ProviderBuilder = (function () {\n    function ProviderBuilder(token) {\n        this.token = token;\n    }\n    /**\n     * Binds a DI token to a class.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/ZpBCSYqv6e2ud5KXLdxQ?p=preview))\n     *\n     * Because `toAlias` and `toClass` are often confused, the example contains\n     * both use cases for easy comparison.\n     *\n     * ```typescript\n     * class Vehicle {}\n     *\n     * class Car extends Vehicle {}\n     *\n     * var injectorClass = Injector.resolveAndCreate([\n     *   Car,\n     *   {provide: Vehicle, useClass: Car}\n     * ]);\n     * var injectorAlias = Injector.resolveAndCreate([\n     *   Car,\n     *   {provide: Vehicle, useExisting: Car}\n     * ]);\n     *\n     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));\n     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);\n     *\n     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));\n     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);\n     * ```\n     */\n    ProviderBuilder.prototype.toClass = function (type) {\n        if (!lang_1.isType(type)) {\n            throw new exceptions_1.BaseException(\"Trying to create a class provider but \\\"\" + lang_1.stringify(type) + \"\\\" is not a class!\");\n        }\n        return new Provider(this.token, { useClass: type });\n    };\n    /**\n     * Binds a DI token to a value.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/G024PFHmDL0cJFgfZK8O?p=preview))\n     *\n     * ```typescript\n     * var injector = Injector.resolveAndCreate([\n     *   {provide: 'message', useValue: 'Hello'}\n     * ]);\n     *\n     * expect(injector.get('message')).toEqual('Hello');\n     * ```\n     */\n    ProviderBuilder.prototype.toValue = function (value) { return new Provider(this.token, { useValue: value }); };\n    /**\n     * Binds a DI token to an existing token.\n     *\n     * Angular will return the same instance as if the provided token was used. (This is\n     * in contrast to `useClass` where a separate instance of `useClass` will be returned.)\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/uBaoF2pN5cfc5AfZapNw?p=preview))\n     *\n     * Because `toAlias` and `toClass` are often confused, the example contains\n     * both use cases for easy comparison.\n     *\n     * ```typescript\n     * class Vehicle {}\n     *\n     * class Car extends Vehicle {}\n     *\n     * var injectorAlias = Injector.resolveAndCreate([\n     *   Car,\n     *   {provide: Vehicle, useExisting: Car}\n     * ]);\n     * var injectorClass = Injector.resolveAndCreate([\n     *   Car,\n     *   {provide: Vehicle, useClass: Car})\n     * ]);\n     *\n     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));\n     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);\n     *\n     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));\n     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);\n     * ```\n     */\n    ProviderBuilder.prototype.toAlias = function (aliasToken) {\n        if (lang_1.isBlank(aliasToken)) {\n            throw new exceptions_1.BaseException(\"Can not alias \" + lang_1.stringify(this.token) + \" to a blank value!\");\n        }\n        return new Provider(this.token, { useExisting: aliasToken });\n    };\n    /**\n     * Binds a DI token to a function which computes the value.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/OejNIfTT3zb1iBxaIYOb?p=preview))\n     *\n     * ```typescript\n     * var injector = Injector.resolveAndCreate([\n     *   {provide: Number, useFactory: () => { return 1+2; }},\n     *   {provide: String, useFactory: (v) => { return \"Value: \" + v; }, deps: [Number]}\n     * ]);\n     *\n     * expect(injector.get(Number)).toEqual(3);\n     * expect(injector.get(String)).toEqual('Value: 3');\n     * ```\n     */\n    ProviderBuilder.prototype.toFactory = function (factory, dependencies) {\n        if (!lang_1.isFunction(factory)) {\n            throw new exceptions_1.BaseException(\"Trying to create a factory provider but \\\"\" + lang_1.stringify(factory) + \"\\\" is not a function!\");\n        }\n        return new Provider(this.token, { useFactory: factory, deps: dependencies });\n    };\n    return ProviderBuilder;\n}());\nexports.ProviderBuilder = ProviderBuilder;\n/**\n * Creates a {@link Provider}.\n *\n * See {@link Provider} for more details.\n *\n * <!-- TODO: improve the docs -->\n * @deprecated\n */\nfunction provide(token, _a) {\n    var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;\n    return new Provider(token, {\n        useClass: useClass,\n        useValue: useValue,\n        useExisting: useExisting,\n        useFactory: useFactory,\n        deps: deps,\n        multi: multi\n    });\n}\nexports.provide = provide;\n//# sourceMappingURL=provider.js.map"]}