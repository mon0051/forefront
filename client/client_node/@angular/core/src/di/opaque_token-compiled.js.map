{"version":3,"sources":["opaque_token.js"],"names":[],"mappings":"AAAA;;;;;;;AAOA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAI,cAAe,YAAY;AAC3B,WAAS,WAAT,CAAqB,KAArB,EAA4B;AACxB,SAAK,KAAL,GAAa,KAAb;AACH;AACD,cAAY,SAAZ,CAAsB,QAAtB,GAAiC,YAAY;AAAE,WAAO,WAAW,KAAK,KAAvB;AAA+B,GAA9E;AACA,SAAO,WAAP;AACH,CANkB,EAAnB;AAOA,QAAQ,WAAR,GAAsB,WAAtB;AACA","file":"opaque_token-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))\n *\n * ```typescript\n * var t = new OpaqueToken(\"value\");\n *\n * var injector = Injector.resolveAndCreate([\n *   {provide: t, useValue: \"bindingValue\"}\n * ]);\n *\n * expect(injector.get(t)).toEqual(\"bindingValue\");\n * ```\n *\n * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions\n * caused by multiple providers using the same string as two different tokens.\n *\n * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better\n * error messages.\n * @ts2dart_const\n * @stable\n */\nvar OpaqueToken = (function () {\n    function OpaqueToken(_desc) {\n        this._desc = _desc;\n    }\n    OpaqueToken.prototype.toString = function () { return \"Token \" + this._desc; };\n    return OpaqueToken;\n}());\nexports.OpaqueToken = OpaqueToken;\n//# sourceMappingURL=opaque_token.js.map"]}