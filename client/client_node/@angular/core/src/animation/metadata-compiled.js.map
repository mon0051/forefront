{"version":3,"sources":["metadata.js"],"names":[],"mappings":"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","file":"metadata-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar exceptions_1 = require('../facade/exceptions');\nvar lang_1 = require('../facade/lang');\n/**\n * @experimental Animation support is experimental.\n */\nexports.AUTO_STYLE = '*';\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {@link trigger trigger\n * animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nvar AnimationEntryMetadata = (function () {\n    function AnimationEntryMetadata(name, definitions) {\n        this.name = name;\n        this.definitions = definitions;\n    }\n    return AnimationEntryMetadata;\n}());\nexports.AnimationEntryMetadata = AnimationEntryMetadata;\n/**\n * @experimental Animation support is experimental.\n */\nvar AnimationStateMetadata = (function () {\n    function AnimationStateMetadata() {\n    }\n    return AnimationStateMetadata;\n}());\nexports.AnimationStateMetadata = AnimationStateMetadata;\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {@link state state animation\n * function} is called.\n *\n * @experimental Animation support is experimental.\n */\nvar AnimationStateDeclarationMetadata = (function (_super) {\n    __extends(AnimationStateDeclarationMetadata, _super);\n    function AnimationStateDeclarationMetadata(stateNameExpr, styles) {\n        _super.call(this);\n        this.stateNameExpr = stateNameExpr;\n        this.styles = styles;\n    }\n    return AnimationStateDeclarationMetadata;\n}(AnimationStateMetadata));\nexports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the\n * {@link transition transition animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nvar AnimationStateTransitionMetadata = (function (_super) {\n    __extends(AnimationStateTransitionMetadata, _super);\n    function AnimationStateTransitionMetadata(stateChangeExpr, steps) {\n        _super.call(this);\n        this.stateChangeExpr = stateChangeExpr;\n        this.steps = steps;\n    }\n    return AnimationStateTransitionMetadata;\n}(AnimationStateMetadata));\nexports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;\n/**\n * @experimental Animation support is experimental.\n */\nvar AnimationMetadata = (function () {\n    function AnimationMetadata() {\n    }\n    return AnimationMetadata;\n}());\nexports.AnimationMetadata = AnimationMetadata;\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {@link keyframes keyframes\n * animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nvar AnimationKeyframesSequenceMetadata = (function (_super) {\n    __extends(AnimationKeyframesSequenceMetadata, _super);\n    function AnimationKeyframesSequenceMetadata(steps) {\n        _super.call(this);\n        this.steps = steps;\n    }\n    return AnimationKeyframesSequenceMetadata;\n}(AnimationMetadata));\nexports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {@link style style animation\n * function} is called.\n *\n * @experimental Animation support is experimental.\n */\nvar AnimationStyleMetadata = (function (_super) {\n    __extends(AnimationStyleMetadata, _super);\n    function AnimationStyleMetadata(styles, offset) {\n        if (offset === void 0) { offset = null; }\n        _super.call(this);\n        this.styles = styles;\n        this.offset = offset;\n    }\n    return AnimationStyleMetadata;\n}(AnimationMetadata));\nexports.AnimationStyleMetadata = AnimationStyleMetadata;\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {@link animate animate\n * animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nvar AnimationAnimateMetadata = (function (_super) {\n    __extends(AnimationAnimateMetadata, _super);\n    function AnimationAnimateMetadata(timings, styles) {\n        _super.call(this);\n        this.timings = timings;\n        this.styles = styles;\n    }\n    return AnimationAnimateMetadata;\n}(AnimationMetadata));\nexports.AnimationAnimateMetadata = AnimationAnimateMetadata;\n/**\n * @experimental Animation support is experimental.\n */\nvar AnimationWithStepsMetadata = (function (_super) {\n    __extends(AnimationWithStepsMetadata, _super);\n    function AnimationWithStepsMetadata() {\n        _super.call(this);\n    }\n    Object.defineProperty(AnimationWithStepsMetadata.prototype, \"steps\", {\n        get: function () { throw new exceptions_1.BaseException('NOT IMPLEMENTED: Base Class'); },\n        enumerable: true,\n        configurable: true\n    });\n    return AnimationWithStepsMetadata;\n}(AnimationMetadata));\nexports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {@link sequence sequence\n * animation function} is called.\n *\n * @experimental Animation support is experimental.\n */\nvar AnimationSequenceMetadata = (function (_super) {\n    __extends(AnimationSequenceMetadata, _super);\n    function AnimationSequenceMetadata(_steps) {\n        _super.call(this);\n        this._steps = _steps;\n    }\n    Object.defineProperty(AnimationSequenceMetadata.prototype, \"steps\", {\n        get: function () { return this._steps; },\n        enumerable: true,\n        configurable: true\n    });\n    return AnimationSequenceMetadata;\n}(AnimationWithStepsMetadata));\nexports.AnimationSequenceMetadata = AnimationSequenceMetadata;\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {@link group group animation\n * function} is called.\n *\n * @experimental Animation support is experimental.\n */\nvar AnimationGroupMetadata = (function (_super) {\n    __extends(AnimationGroupMetadata, _super);\n    function AnimationGroupMetadata(_steps) {\n        _super.call(this);\n        this._steps = _steps;\n    }\n    Object.defineProperty(AnimationGroupMetadata.prototype, \"steps\", {\n        get: function () { return this._steps; },\n        enumerable: true,\n        configurable: true\n    });\n    return AnimationGroupMetadata;\n}(AnimationWithStepsMetadata));\nexports.AnimationGroupMetadata = AnimationGroupMetadata;\n/**\n * `animate` is an animation-specific function that is designed to be used inside of Angular2's\n * animation\n * DSL language. If this information is new, please navigate to the\n * {@link ComponentMetadata#animations-anchor component animations metadata\n * page} to gain a better understanding of how animations in Angular2 are used.\n *\n * `animate` specifies an animation step that will apply the provided `styles` data for a given\n * amount of\n * time based on the provided `timing` expression value. Calls to `animate` are expected to be\n * used within {@link sequence an animation sequence}, {@link group group}, or {@link transition\n * transition}.\n *\n * ### Usage\n *\n * The `animate` function accepts two input parameters: `timing` and `styles`:\n *\n * - `timing` is a string based value that can be a combination of a duration with optional\n * delay and easing values. The format for the expression breaks down to `duration delay easing`\n * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,\n * delay=100, easing=ease-out`.\n * If a numeric value is provided then that will be used as the `duration` value in millisecond\n * form.\n * - `styles` is the style input data which can either be a call to {@link style style} or {@link\n * keyframes keyframes}.\n * If left empty then the styles from the destination state will be collected and used (this is\n * useful when\n * describing an animation step that will complete an animation by {@link\n * transition#the-final-animate-call animating to the final state}).\n *\n * ```typescript\n * // various functions for specifying timing data\n * animate(500, style(...))\n * animate(\"1s\", style(...))\n * animate(\"100ms 0.5s\", style(...))\n * animate(\"5s ease\", style(...))\n * animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\", style(...))\n *\n * // either style() of keyframes() can be used\n * animate(500, style({ background: \"red\" }))\n * animate(500, keyframes([\n *   style({ background: \"blue\" })),\n *   style({ background: \"red\" }))\n * ])\n * ```\n *\n * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n *\n * {@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * @experimental Animation support is experimental.\n */\nfunction animate(timing, styles) {\n    if (styles === void 0) { styles = null; }\n    var stylesEntry = styles;\n    if (!lang_1.isPresent(stylesEntry)) {\n        var EMPTY_STYLE = {};\n        stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);\n    }\n    return new AnimationAnimateMetadata(timing, stylesEntry);\n}\nexports.animate = animate;\n/**\n * `group` is an animation-specific function that is designed to be used inside of Angular2's\n * animation\n * DSL language. If this information is new, please navigate to the\n * {@link ComponentMetadata#animations-anchor component animations metadata\n * page} to gain a better understanding of how animations in Angular2 are used.\n *\n * `group` specifies a list of animation steps that are all run in parallel. Grouped animations\n * are useful when a series of styles must be animated/closed off\n * at different statrting/ending times.\n *\n * The `group` function can either be used within a {@link sequence sequence} or a {@link transition\n * transition}\n * and it will only continue to the next instruction once all of the inner animation steps\n * have completed.\n *\n * ### Usage\n *\n * The `steps` data that is passed into the `group` animation function can either consist\n * of {@link style style} or {@link animate animate} function calls. Each call to `style()` or\n * `animate()`\n * within a group will be executed instantly (use {@link keyframes keyframes} or a\n * {@link animate#usage animate() with a delay value} to offset styles to be applied at a later\n * time).\n *\n * ```typescript\n * group([\n *   animate(\"1s\", { background: \"black\" }))\n *   animate(\"2s\", { color: \"white\" }))\n * ])\n * ```\n *\n * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n *\n * {@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * @experimental Animation support is experimental.\n */\nfunction group(steps) {\n    return new AnimationGroupMetadata(steps);\n}\nexports.group = group;\n/**\n * `sequence` is an animation-specific function that is designed to be used inside of Angular2's\n * animation\n * DSL language. If this information is new, please navigate to the\n * {@link ComponentMetadata#animations-anchor component animations metadata\n * page} to gain a better understanding of how animations in Angular2 are used.\n *\n * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used\n * by default when an array is passed as animation data into {@link transition transition}.)\n *\n * The `sequence` function can either be used within a {@link group group} or a {@link transition\n * transition}\n * and it will only continue to the next instruction once each of the inner animation steps\n * have completed.\n *\n * To perform animation styling in parallel with other animation steps then\n * have a look at the {@link group group} animation function.\n *\n * ### Usage\n *\n * The `steps` data that is passed into the `sequence` animation function can either consist\n * of {@link style style} or {@link animate animate} function calls. A call to `style()` will apply\n * the\n * provided styling data immediately while a call to `animate()` will apply its styling\n * data over a given time depending on its timing data.\n *\n * ```typescript\n * sequence([\n *   style({ opacity: 0 })),\n *   animate(\"1s\", { opacity: 1 }))\n * ])\n * ```\n *\n * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n *\n * {@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * @experimental Animation support is experimental.\n */\nfunction sequence(steps) {\n    return new AnimationSequenceMetadata(steps);\n}\nexports.sequence = sequence;\n/**\n * `style` is an animation-specific function that is designed to be used inside of Angular2's\n * animation\n * DSL language. If this information is new, please navigate to the\n * {@link ComponentMetadata#animations-anchor component animations metadata\n * page} to gain a better understanding of how animations in Angular2 are used.\n *\n * `style` declares a key/value object containing CSS properties/styles that can then\n * be used for {@link state animation states}, within an {@link sequence animation sequence}, or as\n * styling data for both {@link animate animate} and {@link keyframes keyframes}.\n *\n * ### Usage\n *\n * `style` takes in a key/value string map as data and expects one or more CSS property/value\n * pairs to be defined.\n *\n * ```typescript\n * // string values are used for css properties\n * style({ background: \"red\", color: \"blue\" })\n *\n * // numerical (pixel) values are also supported\n * style({ width: 100, height: 0 })\n * ```\n *\n * #### Auto-styles (using `*`)\n *\n * When an asterix (`*`) character is used as a value then it will be detected from the element\n * being animated\n * and applied as animation data when the animation starts.\n *\n * This feature proves useful for a state depending on layout and/or environment factors; in such\n * cases\n * the styles are calculated just before the animation starts.\n *\n * ```typescript\n * // the steps below will animate from 0 to the\n * // actual height of the element\n * style({ height: 0 }),\n * animate(\"1s\", style({ height: \"*\" }))\n * ```\n *\n * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n *\n * {@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * @experimental Animation support is experimental.\n */\nfunction style(tokens) {\n    var input;\n    var offset = null;\n    if (lang_1.isString(tokens)) {\n        input = [tokens];\n    }\n    else {\n        if (lang_1.isArray(tokens)) {\n            input = tokens;\n        }\n        else {\n            input = [tokens];\n        }\n        input.forEach(function (entry) {\n            var entryOffset = entry['offset'];\n            if (lang_1.isPresent(entryOffset)) {\n                offset = offset == null ? lang_1.NumberWrapper.parseFloat(entryOffset) : offset;\n            }\n        });\n    }\n    return new AnimationStyleMetadata(input, offset);\n}\nexports.style = style;\n/**\n * `state` is an animation-specific function that is designed to be used inside of Angular2's\n * animation\n * DSL language. If this information is new, please navigate to the\n * {@link ComponentMetadata#animations-anchor component animations metadata\n * page} to gain a better understanding of how animations in Angular2 are used.\n *\n * `state` declares an animation state within the given trigger. When a state is\n * active within a component then its associated styles will persist on\n * the element that the trigger is attached to (even when the animation ends).\n *\n * To animate between states, have a look at the animation {@link transition transition}\n * DSL function. To register states to an animation trigger please have a look\n * at the {@link trigger trigger} function.\n *\n * #### The `void` state\n *\n * The `void` state value is a reserved word that angular uses to determine when the element is not\n * apart\n * of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the\n * associated element\n * is void).\n *\n * #### The `*` (default) state\n *\n * The `*` state (when styled) is a fallback state that will be used if\n * the state that is being animated is not declared within the trigger.\n *\n * ### Usage\n *\n * `state` will declare an animation state with its associated styles\n * within the given trigger.\n *\n * - `stateNameExpr` can be one or more state names separated by commas.\n * - `styles` refers to the {@link style styling data} that will be persisted on the element once\n * the state\n * has been reached.\n *\n * ```typescript\n * // \"void\" is a reserved name for a state and is used to represent\n * // the state in which an element is detached from from the application.\n * state(\"void\", style({ height: 0 }))\n *\n * // user-defined states\n * state(\"closed\", style({ height: 0 }))\n * state(\"open, visible\", style({ height: \"*\" }))\n * ```\n *\n * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n *\n * {@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * @experimental Animation support is experimental.\n */\nfunction state(stateNameExpr, styles) {\n    return new AnimationStateDeclarationMetadata(stateNameExpr, styles);\n}\nexports.state = state;\n/**\n * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's\n * animation\n * DSL language. If this information is new, please navigate to the\n * {@link ComponentMetadata#animations-anchor component animations metadata\n * page} to gain a better understanding of how animations in Angular2 are used.\n *\n * `keyframes` specifies a collection of {@link style style} entries each optionally characterized\n * by an `offset` value.\n *\n * ### Usage\n *\n * The `keyframes` animation function is designed to be used alongside the {@link animate animate}\n * animation function. Instead of applying animations from where they are\n * currently to their destination, keyframes can describe how each style entry is applied\n * and at what point within the animation arc (much like CSS Keyframe Animations do).\n *\n * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at\n * what percentage of the animate time the styles will be applied.\n *\n * ```typescript\n * // the provided offset values describe when each backgroundColor value is applied.\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\", offset: 0 }),\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n *   style({ backgroundColor: \"black\", offset: 1 })\n * ]))\n * ```\n *\n * Alternatively, if there are no `offset` values used within the style entries then the offsets\n * will\n * be calculated automatically.\n *\n * ```typescript\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\" }) // offset = 0\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n *   style({ backgroundColor: \"black\" }) // offset = 1\n * ]))\n * ```\n *\n * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n *\n * {@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * @experimental Animation support is experimental.\n */\nfunction keyframes(steps) {\n    return new AnimationKeyframesSequenceMetadata(steps);\n}\nexports.keyframes = keyframes;\n/**\n * `transition` is an animation-specific function that is designed to be used inside of Angular2's\n * animation\n * DSL language. If this information is new, please navigate to the\n * {@link ComponentMetadata#animations-anchor component animations metadata\n * page} to gain a better understanding of how animations in Angular2 are used.\n *\n * `transition` declares the {@link sequence sequence of animation steps} that will be run when the\n * provided\n * `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 => state2`\n * which consists\n * of two known states (use an asterix (`*`) to refer to a dynamic starting and/or ending state).\n *\n * Animation transitions are placed within an {@link trigger animation trigger}. For an transition\n * to animate to\n * a state value and persist its styles then one or more {@link state animation states} is expected\n * to be defined.\n *\n * ### Usage\n *\n * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on\n * what the\n * previous state is and what the current state has become. In other words, if a transition is\n * defined that\n * matches the old/current state criteria then the associated animation will be triggered.\n *\n * ```typescript\n * // all transition/state changes are defined within an animation trigger\n * trigger(\"myAnimationTrigger\", [\n *   // if a state is defined then its styles will be persisted when the\n *   // animation has fully completed itself\n *   state(\"on\", style({ background: \"green\" })),\n *   state(\"off\", style({ background: \"grey\" })),\n *\n *   // a transition animation that will be kicked off when the state value\n *   // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n *   transition(\"on => off\", animate(500)),\n *\n *   // it is also possible to do run the same animation for both directions\n *   transition(\"on <=> off\", animate(500)),\n *\n *   // or to define multiple states pairs separated by commas\n *   transition(\"on => off, off => void\", animate(500)),\n *\n *   // this is a catch-all state change for when an element is inserted into\n *   // the page and the destination state is unknown\n *   transition(\"void => *\", [\n *     style({ opacity: 0 }),\n *     animate(500)\n *   ]),\n *\n *   // this will capture a state change between any states\n *   transition(\"* => *\", animate(\"1s 0s\")),\n * ])\n * ```\n *\n * The template associated with this component will make use of the `myAnimationTrigger`\n * animation trigger by binding to an element within its template code.\n *\n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div @myAnimationTrigger=\"myStatusExp\">...</div>\n * ```\n *\n * #### The final `animate` call\n *\n * If the final step within the transition steps is a call to `animate()` that **only**\n * uses a timing value with **no style data** then it will be automatically used as the final\n * animation\n * arc for the element to animate itself to the final state. This involves an automatic mix of\n * adding/removing CSS styles so that the element will be in the exact state it should be for the\n * applied state to be presented correctly.\n *\n * ```\n * // start off by hiding the element, but make sure that it animates properly to whatever state\n * // is currently active for \"myAnimationTrigger\"\n * transition(\"void => *\", [\n *   style({ opacity: 0 }),\n *   animate(500)\n * ])\n * ```\n *\n * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n *\n * {@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * @experimental Animation support is experimental.\n */\nfunction transition(stateChangeExpr, steps) {\n    var animationData = lang_1.isArray(steps) ? new AnimationSequenceMetadata(steps) :\n        steps;\n    return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);\n}\nexports.transition = transition;\n/**\n * `trigger` is an animation-specific function that is designed to be used inside of Angular2's\n * animation\n * DSL language. If this information is new, please navigate to the\n * {@link ComponentMetadata#animations-anchor component animations metadata\n * page} to gain a better understanding of how animations in Angular2 are used.\n *\n * `trigger` Creates an animation trigger which will a list of {@link state state} and {@link\n * transition transition}\n * entries that will be evaluated when the expression bound to the trigger changes.\n *\n * Triggers are registered within the component annotation data under the\n * {@link ComponentMetadata#animations-anchor animations section}. An animation trigger can\n * be placed on an element within a template by referencing the name of the\n * trigger followed by the expression value that the trigger is bound to\n * (in the form of `@triggerName=\"expression\"`.\n *\n * ### Usage\n *\n * `trigger` will create an animation trigger reference based on the provided `name` value.\n * The provided `animation` value is expected to be an array consisting of {@link state state} and\n * {@link transition transition}\n * declarations.\n *\n * ```typescript\n * @Component({\n *   selector: 'my-component',\n *   templateUrl: 'my-component-tpl.html',\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *       state(...),\n *       state(...),\n *       transition(...),\n *       transition(...)\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"something\";\n * }\n * ```\n *\n * The template associated with this component will make use of the `myAnimationTrigger`\n * animation trigger by binding to an element within its template code.\n *\n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div @myAnimationTrigger=\"myStatusExp\">...</div>\n * ```\n *\n * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n *\n * {@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * @experimental Animation support is experimental.\n */\nfunction trigger(name, animation) {\n    return new AnimationEntryMetadata(name, animation);\n}\nexports.trigger = trigger;\n//# sourceMappingURL=metadata.js.map"]}