{"version":3,"sources":["async.js"],"names":[],"mappings":"AAAA;;;;;;;AAOA;;AACA,IAAI,UAAW,OAAO,MAAP,KAAkB,WAAlB,GAAgC,MAAhC,GAAyC,MAAxD;AACA;;;;;;;;;;;;;;;;;AAiBA,SAAS,KAAT,CAAe,EAAf,EAAmB;AACf;AACA;AACA,QAAI,QAAQ,OAAZ,EAAqB;AACjB,eAAO,UAAU,IAAV,EAAgB;AACnB,0BAAc,EAAd,EAAkB,IAAlB,EAAwB,UAAU,GAAV,EAAe;AACnC,oBAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AACzB,2BAAO,KAAK,IAAL,CAAU,IAAI,KAAJ,CAAU,GAAV,CAAV,CAAP;AACH,iBAFD,MAGK;AACD,yBAAK,IAAL,CAAU,GAAV;AACH;AACJ,aAPD;AAQH,SATD;AAUH;AACD;AACA;AACA;AACA,WAAO,YAAY;AAAE,eAAO,IAAI,OAAJ,CAAY,UAAU,cAAV,EAA0B,YAA1B,EAAwC;AAC5E,0BAAc,EAAd,EAAkB,cAAlB,EAAkC,YAAlC;AACH,SAF2B,CAAP;AAEhB,KAFL;AAGH;AACD,QAAQ,KAAR,GAAgB,KAAhB;AACA,SAAS,aAAT,CAAuB,EAAvB,EAA2B,cAA3B,EAA2C,YAA3C,EAAyD;AACrD,QAAI,oBAAoB,KAAK,mBAAL,CAAxB;AACA,QAAI,sBAAsB,SAA1B,EAAqC;AACjC,cAAM,IAAI,KAAJ,CAAU,qFACZ,4EADE,CAAN;AAEH;AACD,QAAI,eAAe,IAAI,iBAAJ,CAAsB,cAAtB,EAAsC,YAAtC,EAAoD,MAApD,CAAnB;AACA,QAAI,WAAW,KAAK,OAAL,CAAa,IAAb,CAAkB,YAAlB,CAAf;AACA,WAAO,SAAS,GAAT,CAAa,EAAb,CAAP;AACH;AACD","file":"async-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\nvar _global = (typeof window === 'undefined' ? global : window);\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @stable\n */\nfunction async(fn) {\n    // If we're running using the Jasmine test framework, adapt to call the 'done'\n    // function when asynchronous activity is finished.\n    if (_global.jasmine) {\n        return function (done) {\n            runInTestZone(fn, done, function (err) {\n                if (typeof err === 'string') {\n                    return done.fail(new Error(err));\n                }\n                else {\n                    done.fail(err);\n                }\n            });\n        };\n    }\n    // Otherwise, return a promise which will resolve when asynchronous activity\n    // is finished. This will be correctly consumed by the Mocha framework with\n    // it('...', async(myFn)); or can be used in a custom framework.\n    return function () { return new Promise(function (finishCallback, failCallback) {\n        runInTestZone(fn, finishCallback, failCallback);\n    }); };\n}\nexports.async = async;\nfunction runInTestZone(fn, finishCallback, failCallback) {\n    var AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n    if (AsyncTestZoneSpec === undefined) {\n        throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/dist/async-test.js');\n    }\n    var testZoneSpec = new AsyncTestZoneSpec(finishCallback, failCallback, 'test');\n    var testZone = Zone.current.fork(testZoneSpec);\n    return testZone.run(fn);\n}\n//# sourceMappingURL=async.js.map"]}