{"version":3,"sources":["testing.js"],"names":[],"mappings":"AAAA;;;;;;;AAOA;AACA;;;;;;AAKA,IAAI,kBAAkB,QAAQ,iBAAR,CAAtB;AACA,IAAI,UAAW,OAAO,MAAP,KAAkB,WAAlB,GAAgC,MAAhC,GAAyC,MAAxD;AACA;;;;;;AAMA,QAAQ,MAAR,GAAiB,QAAQ,MAAzB;AACA;;;;;;AAMA,QAAQ,SAAR,GAAoB,QAAQ,SAA5B;AACA;;;;;;AAMA,QAAQ,QAAR,GAAmB,QAAQ,QAA3B;AACA;;;;;;AAMA,QAAQ,SAAR,GAAoB,QAAQ,SAA5B;AACA;;;;;;AAMA,QAAQ,SAAR,GAAoB,QAAQ,SAA5B;AACA;;;;;;AAMA,QAAQ,SAAR,GAAoB,QAAQ,SAA5B;AACA;;;;;;AAMA,QAAQ,UAAR,GAAqB,QAAQ,UAA7B;AACA;;;;;;AAMA,QAAQ,EAAR,GAAa,QAAQ,EAArB;AACA;;;;;;AAMA,QAAQ,GAAR,GAAc,QAAQ,GAAtB;AACA;;;;;;AAMA,QAAQ,GAAR,GAAc,QAAQ,GAAtB;AACA;;;;;;AAMA,QAAQ,GAAR,GAAc,QAAQ,GAAtB;AACA,IAAI,eAAe,gBAAgB,eAAhB,EAAnB;AACA;AACA,IAAI,QAAQ,UAAZ,EAAwB;AACpB,UAAQ,UAAR,CAAmB,YAAY;AAAE,iBAAa,KAAb;AAAuB,GAAxD;AACH;AACD;;;;;;AAMA,SAAS,YAAT,CAAsB,SAAtB,EAAiC;AAC7B,MAAI,CAAC,SAAL,EACI;AACJ,MAAI;AACA,iBAAa,YAAb,CAA0B,SAA1B;AACH,GAFD,CAGA,OAAO,CAAP,EAAU;AACN,UAAM,IAAI,KAAJ,CAAU,8FACZ,8FADY,GAEZ,wBAFE,CAAN;AAGH;AACJ;AACD,QAAQ,YAAR,GAAuB,YAAvB;AACA;;;AAGA,SAAS,mBAAT,CAA6B,EAA7B,EAAiC;AAC7B,UAAQ,UAAR,CAAmB,YAAY;AAAE,iBAAa,IAAb;AAAqB,GAAtD;AACH;AACD,QAAQ,mBAAR,GAA8B,mBAA9B;AACA","file":"testing-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\n/**\n * Public Test Library for unit testing Angular2 Applications. Assumes that you are running\n * with Jasmine, Mocha, or a similar framework which exports a beforeEach function and\n * allows tests to be asynchronous by either returning a promise or using a 'done' parameter.\n */\nvar test_injector_1 = require('./test_injector');\nvar _global = (typeof window === 'undefined' ? global : window);\n/**\n * @deprecated you no longer need to import jasmine functions from @angular/core/testing. Simply use\n * the globals.\n *\n * See http://jasmine.github.io/ for more details.\n */\nexports.expect = _global.expect;\n/**\n * @deprecated you no longer need to import jasmine functions from @angular/core/testing. Simply use\n * the globals.\n *\n * See http://jasmine.github.io/ for more details.\n */\nexports.afterEach = _global.afterEach;\n/**\n * @deprecated you no longer need to import jasmine functions from @angular/core/testing. Simply use\n * the globals.\n *\n * See http://jasmine.github.io/ for more details.\n */\nexports.describe = _global.describe;\n/**\n * @deprecated you no longer need to import jasmine functions from @angular/core/testing. Simply use\n * the globals.\n *\n * See http://jasmine.github.io/ for more details.\n */\nexports.fdescribe = _global.fdescribe;\n/**\n * @deprecated you no longer need to import jasmine functions from @angular/core/testing. Simply use\n * the globals.\n *\n * See http://jasmine.github.io/ for more details.\n */\nexports.ddescribe = _global.ddescribe;\n/**\n * @deprecated you no longer need to import jasmine functions from @angular/core/testing. Simply use\n * the globals.\n *\n * See http://jasmine.github.io/ for more details.\n */\nexports.xdescribe = _global.xdescribe;\n/**\n * @deprecated you no longer need to import jasmine functions from @angular/core/testing. Simply use\n * the globals.\n *\n * See http://jasmine.github.io/ for more details.\n */\nexports.beforeEach = _global.beforeEach;\n/**\n * @deprecated you no longer need to import jasmine functions from @angular/core/testing. Simply use\n * the globals.\n *\n * See http://jasmine.github.io/ for more details.\n */\nexports.it = _global.it;\n/**\n * @deprecated you no longer need to import jasmine functions from @angular/core/testing. Simply use\n * the globals.\n *\n * See http://jasmine.github.io/ for more details.\n */\nexports.fit = _global.fit;\n/**\n * @deprecated you no longer need to import jasmine functions from @angular/core/testing. Simply use\n * the globals.\n *\n * See http://jasmine.github.io/ for more details.\n */\nexports.iit = _global.fit;\n/**\n * @deprecated you no longer need to import jasmine functions from @angular/core/testing. Simply use\n * the globals.\n *\n * See http://jasmine.github.io/ for more details.\n */\nexports.xit = _global.xit;\nvar testInjector = test_injector_1.getTestInjector();\n// Reset the test providers before each test.\nif (_global.beforeEach) {\n    exports.beforeEach(function () { testInjector.reset(); });\n}\n/**\n * Allows overriding default providers of the test injector,\n * which are defined in test_injector.js\n *\n * @stable\n */\nfunction addProviders(providers) {\n    if (!providers)\n        return;\n    try {\n        testInjector.addProviders(providers);\n    }\n    catch (e) {\n        throw new Error('addProviders can\\'t be called after the injector has been already created for this test. ' +\n            'This is most likely because you\\'ve already used the injector to inject a beforeEach or the ' +\n            'current `it` function.');\n    }\n}\nexports.addProviders = addProviders;\n/**\n * @deprecated Use beforeEach(() => addProviders())\n */\nfunction beforeEachProviders(fn) {\n    exports.beforeEach(function () { addProviders(fn()); });\n}\nexports.beforeEachProviders = beforeEachProviders;\n//# sourceMappingURL=testing.js.map"]}