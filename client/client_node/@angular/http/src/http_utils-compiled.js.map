{"version":3,"sources":["http_utils.js"],"names":[],"mappings":"AAAA;;;;;;;AAOA;;AACA,IAAI,eAAe,QAAQ,0BAAR,CAAnB;AACA,IAAI,SAAS,QAAQ,oBAAR,CAAb;AACA,IAAI,UAAU,QAAQ,SAAR,CAAd;AACA,SAAS,mBAAT,CAA6B,MAA7B,EAAqC;AACjC,QAAI,OAAO,QAAP,CAAgB,MAAhB,CAAJ,EAA6B;AACzB,YAAI,iBAAiB,MAArB;AACA,iBAAS,OACJ,OADI,CACI,YADJ,EACkB,UAAU,EAAV,EAAc,EAAd,EAAkB,EAAlB,EAAsB;AAAE,mBAAO,GAAG,WAAH,KAAmB,GAAG,WAAH,EAA1B;AAA6C,SADvF,CAAT;AAEA,iBAAS,QAAQ,aAAR,CAAsB,MAAtB,CAAT;AACA,YAAI,OAAO,MAAP,KAAkB,QAAtB,EACI,MAAM,aAAa,aAAb,CAA2B,0CAA0C,cAA1C,GAA2D,sBAAtF,CAAN;AACP;AACD,WAAO,MAAP;AACH;AACD,QAAQ,mBAAR,GAA8B,mBAA9B;AACA,QAAQ,SAAR,GAAoB,UAAU,MAAV,EAAkB;AAAE,WAAQ,UAAU,GAAV,IAAiB,SAAS,GAAlC;AAAyC,CAAjF;AACA,SAAS,cAAT,CAAwB,GAAxB,EAA6B;AACzB,QAAI,iBAAiB,GAArB,EAA0B;AACtB,eAAO,IAAI,WAAX;AACH;AACD,QAAI,mBAAmB,IAAnB,CAAwB,IAAI,qBAAJ,EAAxB,CAAJ,EAA0D;AACtD,eAAO,IAAI,iBAAJ,CAAsB,eAAtB,CAAP;AACH;AACD;AACH;AACD,QAAQ,cAAR,GAAyB,cAAzB;AACA,IAAI,SAAS,QAAQ,oBAAR,CAAb;AACA,QAAQ,UAAR,GAAqB,OAAO,UAA5B;AACA","file":"http_utils-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\nvar exceptions_1 = require('../src/facade/exceptions');\nvar lang_1 = require('../src/facade/lang');\nvar enums_1 = require('./enums');\nfunction normalizeMethodName(method) {\n    if (lang_1.isString(method)) {\n        var originalMethod = method;\n        method = method\n            .replace(/(\\w)(\\w*)/g, function (g0, g1, g2) { return g1.toUpperCase() + g2.toLowerCase(); });\n        method = enums_1.RequestMethod[method];\n        if (typeof method !== 'number')\n            throw exceptions_1.makeTypeError(\"Invalid request method. The method \\\"\" + originalMethod + \"\\\" is not supported.\");\n    }\n    return method;\n}\nexports.normalizeMethodName = normalizeMethodName;\nexports.isSuccess = function (status) { return (status >= 200 && status < 300); };\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return;\n}\nexports.getResponseURL = getResponseURL;\nvar lang_2 = require('../src/facade/lang');\nexports.isJsObject = lang_2.isJsObject;\n//# sourceMappingURL=http_utils.js.map"]}