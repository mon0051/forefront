{"version":3,"sources":["xhr_backend.js"],"names":[],"mappings":"AAAA;;;;;;;AAOA;;AACA,IAAI,SAAS,QAAQ,eAAR,CAAb;AACA,IAAI,qBAAqB,QAAQ,2BAAR,CAAzB;AACA,IAAI,eAAe,QAAQ,iBAAR,CAAnB;AACA,IAAI,0BAA0B,QAAQ,0BAAR,CAA9B;AACA,IAAI,UAAU,QAAQ,UAAR,CAAd;AACA,IAAI,SAAS,QAAQ,gBAAR,CAAb;AACA,IAAI,YAAY,QAAQ,YAAR,CAAhB;AACA,IAAI,eAAe,QAAQ,eAAR,CAAnB;AACA,IAAI,eAAe,QAAQ,eAAR,CAAnB;AACA,IAAI,oBAAoB,QAAQ,oBAAR,CAAxB;AACA,IAAI,gBAAgB,QAAQ,eAAR,CAApB;AACA,IAAI,cAAc,cAAlB;AACA;;;;;;;;;;AAUA,IAAI,gBAAiB,YAAY;AAC7B,aAAS,aAAT,CAAuB,GAAvB,EAA4B,UAA5B,EAAwC,mBAAxC,EAA6D;AACzD,YAAI,QAAQ,IAAZ;AACA,aAAK,OAAL,GAAe,GAAf;AACA,aAAK,QAAL,GAAgB,IAAI,aAAa,UAAjB,CAA4B,UAAU,gBAAV,EAA4B;AACpE,gBAAI,OAAO,WAAW,KAAX,EAAX;AACA,iBAAK,IAAL,CAAU,QAAQ,aAAR,CAAsB,IAAI,MAA1B,EAAkC,WAAlC,EAAV,EAA2D,IAAI,GAA/D;AACA,gBAAI,OAAO,SAAP,CAAiB,IAAI,eAArB,CAAJ,EAA2C;AACvC,qBAAK,eAAL,GAAuB,IAAI,eAA3B;AACH;AACD;AACA,gBAAI,SAAS,SAAT,MAAS,GAAY;AACrB;AACA;AACA;AACA,oBAAI,OAAO,OAAO,SAAP,CAAiB,KAAK,QAAtB,IAAkC,KAAK,QAAvC,GAAkD,KAAK,YAAlE;AACA;AACA,oBAAI,OAAO,QAAP,CAAgB,IAAhB,CAAJ,EACI,OAAO,KAAK,OAAL,CAAa,WAAb,EAA0B,EAA1B,CAAP;AACJ,oBAAI,UAAU,UAAU,OAAV,CAAkB,wBAAlB,CAA2C,KAAK,qBAAL,EAA3C,CAAd;AACA,oBAAI,MAAM,aAAa,cAAb,CAA4B,IAA5B,CAAV;AACA;AACA,oBAAI,SAAS,KAAK,MAAL,KAAgB,IAAhB,GAAuB,GAAvB,GAA6B,KAAK,MAA/C;AACA;AACA;AACA;AACA,oBAAI,WAAW,CAAf,EAAkB;AACd,6BAAS,OAAO,GAAP,GAAa,CAAtB;AACH;AACD,oBAAI,aAAa,KAAK,UAAL,IAAmB,IAApC;AACA,oBAAI,kBAAkB,IAAI,wBAAwB,eAA5B,CAA4C,EAAE,MAAM,IAAR,EAAc,QAAQ,MAAtB,EAA8B,SAAS,OAAvC,EAAgD,YAAY,UAA5D,EAAwE,KAAK,GAA7E,EAA5C,CAAtB;AACA,oBAAI,OAAO,SAAP,CAAiB,mBAAjB,CAAJ,EAA2C;AACvC,sCAAkB,oBAAoB,KAApB,CAA0B,eAA1B,CAAlB;AACH;AACD,oBAAI,WAAW,IAAI,kBAAkB,QAAtB,CAA+B,eAA/B,CAAf;AACA,yBAAS,EAAT,GAAc,aAAa,SAAb,CAAuB,MAAvB,CAAd;AACA,oBAAI,SAAS,EAAb,EAAiB;AACb,qCAAiB,IAAjB,CAAsB,QAAtB;AACA;AACA,qCAAiB,QAAjB;AACA;AACH;AACD,iCAAiB,KAAjB,CAAuB,QAAvB;AACH,aAhCD;AAiCA;AACA,gBAAI,UAAU,SAAV,OAAU,CAAU,GAAV,EAAe;AACzB,oBAAI,kBAAkB,IAAI,wBAAwB,eAA5B,CAA4C;AAC9D,0BAAM,GADwD;AAE9D,0BAAM,QAAQ,YAAR,CAAqB,KAFmC;AAG9D,4BAAQ,KAAK,MAHiD;AAI9D,gCAAY,KAAK;AAJ6C,iBAA5C,CAAtB;AAMA,oBAAI,OAAO,SAAP,CAAiB,mBAAjB,CAAJ,EAA2C;AACvC,sCAAkB,oBAAoB,KAApB,CAA0B,eAA1B,CAAlB;AACH;AACD,iCAAiB,KAAjB,CAAuB,IAAI,kBAAkB,QAAtB,CAA+B,eAA/B,CAAvB;AACH,aAXD;AAYA,kBAAM,sBAAN,CAA6B,GAA7B,EAAkC,IAAlC;AACA,gBAAI,OAAO,SAAP,CAAiB,IAAI,OAArB,CAAJ,EAAmC;AAC/B,oBAAI,OAAJ,CAAY,OAAZ,CAAoB,UAAU,MAAV,EAAkB,IAAlB,EAAwB;AAAE,2BAAO,KAAK,gBAAL,CAAsB,IAAtB,EAA4B,OAAO,IAAP,CAAY,GAAZ,CAA5B,CAAP;AAAuD,iBAArG;AACH;AACD,iBAAK,gBAAL,CAAsB,MAAtB,EAA8B,MAA9B;AACA,iBAAK,gBAAL,CAAsB,OAAtB,EAA+B,OAA/B;AACA,iBAAK,IAAL,CAAU,MAAM,OAAN,CAAc,OAAd,EAAV;AACA,mBAAO,YAAY;AACf,qBAAK,mBAAL,CAAyB,MAAzB,EAAiC,MAAjC;AACA,qBAAK,mBAAL,CAAyB,OAAzB,EAAkC,OAAlC;AACA,qBAAK,KAAL;AACH,aAJD;AAKH,SAjEe,CAAhB;AAkEH;AACD,kBAAc,SAAd,CAAwB,sBAAxB,GAAiD,UAAU,GAAV,CAAc,iBAAd,EAAiC,IAAjC,CAAsC,iBAAtC,EAAyD;AACtG;AACA,YAAI,OAAO,SAAP,CAAiB,IAAI,OAArB,KAAiC,OAAO,SAAP,CAAiB,IAAI,OAAJ,CAAY,GAAZ,CAAgB,cAAhB,CAAjB,CAArC,EAAwF;AACpF;AACH;AACD;AACA,gBAAQ,IAAI,WAAZ;AACI,iBAAK,QAAQ,WAAR,CAAoB,IAAzB;AACI;AACJ,iBAAK,QAAQ,WAAR,CAAoB,IAAzB;AACI,qBAAK,gBAAL,CAAsB,cAAtB,EAAsC,kBAAtC;AACA;AACJ,iBAAK,QAAQ,WAAR,CAAoB,IAAzB;AACI,qBAAK,gBAAL,CAAsB,cAAtB,EAAsC,iDAAtC;AACA;AACJ,iBAAK,QAAQ,WAAR,CAAoB,IAAzB;AACI,qBAAK,gBAAL,CAAsB,cAAtB,EAAsC,YAAtC;AACA;AACJ,iBAAK,QAAQ,WAAR,CAAoB,IAAzB;AACI,oBAAI,OAAO,IAAI,IAAJ,EAAX;AACA,oBAAI,KAAK,IAAT,EAAe;AACX,yBAAK,gBAAL,CAAsB,cAAtB,EAAsC,KAAK,IAA3C;AACH;AACD;AAjBR;AAmBH,KAzBD;AA0BA,WAAO,aAAP;AACH,CAlGoB,EAArB;AAmGA,QAAQ,aAAR,GAAwB,aAAxB;AACA;;;;;;;;;;;AAWA,IAAI,qBAAsB,YAAY;AAClC,aAAS,kBAAT,CAA4B,WAA5B,EAAyC,WAAzC,EAAsD;AAClD,YAAI,gBAAgB,KAAK,CAAzB,EAA4B;AAAE,0BAAc,YAAd;AAA6B;AAC3D,YAAI,gBAAgB,KAAK,CAAzB,EAA4B;AAAE,0BAAc,cAAd;AAA+B;AAC7D,aAAK,WAAL,GAAmB,WAAnB;AACA,aAAK,WAAL,GAAmB,WAAnB;AACH;AACD,uBAAmB,SAAnB,CAA6B,gBAA7B,GAAgD,UAAU,GAAV,EAAe;AAC3D,YAAI,YAAY,mBAAmB,4BAAnB,CAAgD,MAAhD,GAAyD,SAAzD,CAAmE,KAAK,WAAxE,CAAhB;AACA,YAAI,aAAa,CAAC,IAAI,OAAJ,CAAY,GAAZ,CAAgB,KAAK,WAArB,CAAlB,EAAqD;AACjD,gBAAI,OAAJ,CAAY,GAAZ,CAAgB,KAAK,WAArB,EAAkC,SAAlC;AACH;AACJ,KALD;AAMA,WAAO,kBAAP;AACH,CAdyB,EAA1B;AAeA,QAAQ,kBAAR,GAA6B,kBAA7B;AACA,IAAI,aAAc,YAAY;AAC1B,aAAS,UAAT,CAAoB,WAApB,EAAiC,oBAAjC,EAAuD,aAAvD,EAAsE;AAClE,aAAK,WAAL,GAAmB,WAAnB;AACA,aAAK,oBAAL,GAA4B,oBAA5B;AACA,aAAK,aAAL,GAAqB,aAArB;AACH;AACD,eAAW,SAAX,CAAqB,gBAArB,GAAwC,UAAU,OAAV,EAAmB;AACvD,aAAK,aAAL,CAAmB,gBAAnB,CAAoC,OAApC;AACA,eAAO,IAAI,aAAJ,CAAkB,OAAlB,EAA2B,KAAK,WAAhC,EAA6C,KAAK,oBAAlD,CAAP;AACH,KAHD;AAIA;AACA,eAAW,UAAX,GAAwB,CACpB,EAAE,MAAM,OAAO,UAAf,EADoB,CAAxB;AAGA;AACA,eAAW,cAAX,GAA4B,CACxB,EAAE,MAAM,cAAc,UAAtB,EADwB,EAExB,EAAE,MAAM,wBAAwB,eAAhC,EAFwB,EAGxB,EAAE,MAAM,aAAa,YAArB,EAHwB,CAA5B;AAKA,WAAO,UAAP;AACH,CArBiB,EAAlB;AAsBA,QAAQ,UAAR,GAAqB,UAArB;AACA","file":"xhr_backend-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\nvar core_1 = require('@angular/core');\nvar platform_browser_1 = require('@angular/platform-browser');\nvar Observable_1 = require('rxjs/Observable');\nvar base_response_options_1 = require('../base_response_options');\nvar enums_1 = require('../enums');\nvar lang_1 = require('../facade/lang');\nvar headers_1 = require('../headers');\nvar http_utils_1 = require('../http_utils');\nvar interfaces_1 = require('../interfaces');\nvar static_response_1 = require('../static_response');\nvar browser_xhr_1 = require('./browser_xhr');\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {@link MockConnection} may be interacted with in tests.\n *\n * @experimental\n */\nvar XHRConnection = (function () {\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\n        var _this = this;\n        this.request = req;\n        this.response = new Observable_1.Observable(function (responseObserver) {\n            var _xhr = browserXHR.build();\n            _xhr.open(enums_1.RequestMethod[req.method].toUpperCase(), req.url);\n            if (lang_1.isPresent(req.withCredentials)) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            var onLoad = function () {\n                // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                // response/responseType properties were introduced in XHR Level2 spec (supported by\n                // IE10)\n                var body = lang_1.isPresent(_xhr.response) ? _xhr.response : _xhr.responseText;\n                // Implicitly strip a potential XSSI prefix.\n                if (lang_1.isString(body))\n                    body = body.replace(XSSI_PREFIX, '');\n                var headers = headers_1.Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                var url = http_utils_1.getResponseURL(_xhr);\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status = _xhr.status === 1223 ? 204 : _xhr.status;\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                var statusText = _xhr.statusText || 'OK';\n                var responseOptions = new base_response_options_1.ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                if (lang_1.isPresent(baseResponseOptions)) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                var response = new static_response_1.Response(responseOptions);\n                response.ok = http_utils_1.isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            var onError = function (err) {\n                var responseOptions = new base_response_options_1.ResponseOptions({\n                    body: err,\n                    type: enums_1.ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (lang_1.isPresent(baseResponseOptions)) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new static_response_1.Response(responseOptions));\n            };\n            _this.setDetectedContentType(req, _xhr);\n            if (lang_1.isPresent(req.headers)) {\n                req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(_this.request.getBody());\n            return function () {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    XHRConnection.prototype.setDetectedContentType = function (req /** TODO #9100 */, _xhr /** TODO #9100 */) {\n        // Skip if a custom Content-Type header is provided\n        if (lang_1.isPresent(req.headers) && lang_1.isPresent(req.headers.get('Content-Type'))) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case enums_1.ContentType.NONE:\n                break;\n            case enums_1.ContentType.JSON:\n                _xhr.setRequestHeader('Content-Type', 'application/json');\n                break;\n            case enums_1.ContentType.FORM:\n                _xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case enums_1.ContentType.TEXT:\n                _xhr.setRequestHeader('Content-Type', 'text/plain');\n                break;\n            case enums_1.ContentType.BLOB:\n                var blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('Content-Type', blob.type);\n                }\n                break;\n        }\n    };\n    return XHRConnection;\n}());\nexports.XHRConnection = XHRConnection;\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF) for more\n * information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @experimental\n */\nvar CookieXSRFStrategy = (function () {\n    function CookieXSRFStrategy(_cookieName, _headerName) {\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    CookieXSRFStrategy.prototype.configureRequest = function (req) {\n        var xsrfToken = platform_browser_1.__platform_browser_private__.getDOM().getCookie(this._cookieName);\n        if (xsrfToken && !req.headers.has(this._headerName)) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    };\n    return CookieXSRFStrategy;\n}());\nexports.CookieXSRFStrategy = CookieXSRFStrategy;\nvar XHRBackend = (function () {\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    XHRBackend.prototype.createConnection = function (request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    };\n    /** @nocollapse */\n    XHRBackend.decorators = [\n        { type: core_1.Injectable },\n    ];\n    /** @nocollapse */\n    XHRBackend.ctorParameters = [\n        { type: browser_xhr_1.BrowserXhr, },\n        { type: base_response_options_1.ResponseOptions, },\n        { type: interfaces_1.XSRFStrategy, },\n    ];\n    return XHRBackend;\n}());\nexports.XHRBackend = XHRBackend;\n//# sourceMappingURL=xhr_backend.js.map"]}