{"version":3,"sources":["interfaces.js"],"names":[],"mappings":"AAAA;;;;;;;AAOA;AACA;;;;;;;;;AAQA,IAAI,oBAAqB,YAAY;AACjC,WAAS,iBAAT,GAA6B,CAC5B;AACD,SAAO,iBAAP;AACH,CAJwB,EAAzB;AAKA,QAAQ,iBAAR,GAA4B,iBAA5B;AACA;;;;;AAKA,IAAI,aAAc,YAAY;AAC1B,WAAS,UAAT,GAAsB,CACrB;AACD,SAAO,UAAP;AACH,CAJiB,EAAlB;AAKA,QAAQ,UAAR,GAAqB,UAArB;AACA;;;;;AAKA,IAAI,eAAgB,YAAY;AAC5B,WAAS,YAAT,GAAwB,CACvB;AACD,SAAO,YAAP;AACH,CAJmB,EAApB;AAKA,QAAQ,YAAR,GAAuB,YAAvB;AACA","file":"interfaces-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {@link Request}.\n *\n * @experimental\n */\nvar ConnectionBackend = (function () {\n    function ConnectionBackend() {\n    }\n    return ConnectionBackend;\n}());\nexports.ConnectionBackend = ConnectionBackend;\n/**\n * Abstract class from which real connections are derived.\n *\n * @experimental\n */\nvar Connection = (function () {\n    function Connection() {\n    }\n    return Connection;\n}());\nexports.Connection = Connection;\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @experimental\n */\nvar XSRFStrategy = (function () {\n    function XSRFStrategy() {\n    }\n    return XSRFStrategy;\n}());\nexports.XSRFStrategy = XSRFStrategy;\n//# sourceMappingURL=interfaces.js.map"]}