{"version":3,"sources":["static_request.js"],"names":[],"mappings":"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","file":"static_request-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\nvar lang_1 = require('../src/facade/lang');\nvar enums_1 = require('./enums');\nvar headers_1 = require('./headers');\nvar http_utils_1 = require('./http_utils');\nvar url_search_params_1 = require('./url_search_params');\n// TODO(jeffbcross): properly implement body accessors\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {@link Http} and\n * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n *\n * @Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @experimental\n */\nvar Request = (function () {\n    function Request(requestOptions) {\n        // TODO: assert that url is present\n        var url = requestOptions.url;\n        this.url = requestOptions.url;\n        if (lang_1.isPresent(requestOptions.search)) {\n            var search = requestOptions.search.toString();\n            if (search.length > 0) {\n                var prefix = '?';\n                if (lang_1.StringWrapper.contains(this.url, '?')) {\n                    prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                this.url = url + prefix + search;\n            }\n        }\n        this._body = requestOptions.body;\n        this.contentType = this.detectContentType();\n        this.method = http_utils_1.normalizeMethodName(requestOptions.method);\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        // TODO(jeffbcross): implement behavior\n        this.headers = new headers_1.Headers(requestOptions.headers);\n        this.withCredentials = requestOptions.withCredentials;\n    }\n    /**\n     * Returns the request's body as string, assuming that body exists. If body is undefined, return\n     * empty\n     * string.\n     */\n    Request.prototype.text = function () { return lang_1.isPresent(this._body) ? this._body.toString() : ''; };\n    /**\n     * Returns the request's body as JSON string, assuming that body exists. If body is undefined,\n     * return\n     * empty\n     * string.\n     */\n    Request.prototype.json = function () { return lang_1.isPresent(this._body) ? JSON.stringify(this._body) : ''; };\n    /**\n     * Returns the request's body as array buffer, assuming that body exists. If body is undefined,\n     * return\n     * null.\n     */\n    Request.prototype.arrayBuffer = function () {\n        if (this._body instanceof ArrayBuffer)\n            return this._body;\n        throw 'The request body isn\\'t an array buffer';\n    };\n    /**\n     * Returns the request's body as blob, assuming that body exists. If body is undefined, return\n     * null.\n     */\n    Request.prototype.blob = function () {\n        if (this._body instanceof Blob)\n            return this._body;\n        if (this._body instanceof ArrayBuffer)\n            return new Blob([this._body]);\n        throw 'The request body isn\\'t either a blob or an array buffer';\n    };\n    /**\n     * Returns the content type of request's body based on its type.\n     */\n    Request.prototype.detectContentType = function () {\n        if (this._body == null) {\n            return enums_1.ContentType.NONE;\n        }\n        else if (this._body instanceof url_search_params_1.URLSearchParams) {\n            return enums_1.ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return enums_1.ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob) {\n            return enums_1.ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer) {\n            return enums_1.ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body == 'object') {\n            return enums_1.ContentType.JSON;\n        }\n        else {\n            return enums_1.ContentType.TEXT;\n        }\n    };\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     */\n    Request.prototype.getBody = function () {\n        switch (this.contentType) {\n            case enums_1.ContentType.JSON:\n                return this.json();\n            case enums_1.ContentType.FORM:\n                return this.text();\n            case enums_1.ContentType.FORM_DATA:\n                return this._body;\n            case enums_1.ContentType.TEXT:\n                return this.text();\n            case enums_1.ContentType.BLOB:\n                return this.blob();\n            case enums_1.ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    };\n    return Request;\n}());\nexports.Request = Request;\nvar noop = function () { };\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = w['FormData'] || noop;\nvar Blob = w['Blob'] || noop;\nvar ArrayBuffer = w['ArrayBuffer'] || noop;\n//# sourceMappingURL=static_request.js.map"]}