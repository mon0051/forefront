{"version":3,"sources":["enums.js"],"names":[],"mappings":"AAAA;;;;;;;AAOA;AACA;;;;;AAIA,CAAC,UAAU,aAAV,EAAyB;AACtB,gBAAc,cAAc,KAAd,IAAuB,CAArC,IAA0C,KAA1C;AACA,gBAAc,cAAc,MAAd,IAAwB,CAAtC,IAA2C,MAA3C;AACA,gBAAc,cAAc,KAAd,IAAuB,CAArC,IAA0C,KAA1C;AACA,gBAAc,cAAc,QAAd,IAA0B,CAAxC,IAA6C,QAA7C;AACA,gBAAc,cAAc,SAAd,IAA2B,CAAzC,IAA8C,SAA9C;AACA,gBAAc,cAAc,MAAd,IAAwB,CAAtC,IAA2C,MAA3C;AACA,gBAAc,cAAc,OAAd,IAAyB,CAAvC,IAA4C,OAA5C;AACH,CARD,EAQG,QAAQ,aAAR,KAA0B,QAAQ,aAAR,GAAwB,EAAlD,CARH;AASA,IAAI,gBAAgB,QAAQ,aAA5B;AACA;;;;;;AAMA,CAAC,UAAU,UAAV,EAAsB;AACnB,aAAW,WAAW,QAAX,IAAuB,CAAlC,IAAuC,QAAvC;AACA,aAAW,WAAW,MAAX,IAAqB,CAAhC,IAAqC,MAArC;AACA,aAAW,WAAW,iBAAX,IAAgC,CAA3C,IAAgD,iBAAhD;AACA,aAAW,WAAW,SAAX,IAAwB,CAAnC,IAAwC,SAAxC;AACA,aAAW,WAAW,MAAX,IAAqB,CAAhC,IAAqC,MAArC;AACA,aAAW,WAAW,WAAX,IAA0B,CAArC,IAA0C,WAA1C;AACH,CAPD,EAOG,QAAQ,UAAR,KAAuB,QAAQ,UAAR,GAAqB,EAA5C,CAPH;AAQA,IAAI,aAAa,QAAQ,UAAzB;AACA;;;;;AAKA,CAAC,UAAU,YAAV,EAAwB;AACrB,eAAa,aAAa,OAAb,IAAwB,CAArC,IAA0C,OAA1C;AACA,eAAa,aAAa,MAAb,IAAuB,CAApC,IAAyC,MAAzC;AACA,eAAa,aAAa,SAAb,IAA0B,CAAvC,IAA4C,SAA5C;AACA,eAAa,aAAa,OAAb,IAAwB,CAArC,IAA0C,OAA1C;AACA,eAAa,aAAa,QAAb,IAAyB,CAAtC,IAA2C,QAA3C;AACH,CAND,EAMG,QAAQ,YAAR,KAAyB,QAAQ,YAAR,GAAuB,EAAhD,CANH;AAOA,IAAI,eAAe,QAAQ,YAA3B;AACA;;;;AAIA,CAAC,UAAU,WAAV,EAAuB;AACpB,cAAY,YAAY,MAAZ,IAAsB,CAAlC,IAAuC,MAAvC;AACA,cAAY,YAAY,MAAZ,IAAsB,CAAlC,IAAuC,MAAvC;AACA,cAAY,YAAY,MAAZ,IAAsB,CAAlC,IAAuC,MAAvC;AACA,cAAY,YAAY,WAAZ,IAA2B,CAAvC,IAA4C,WAA5C;AACA,cAAY,YAAY,MAAZ,IAAsB,CAAlC,IAAuC,MAAvC;AACA,cAAY,YAAY,MAAZ,IAAsB,CAAlC,IAAuC,MAAvC;AACA,cAAY,YAAY,cAAZ,IAA8B,CAA1C,IAA+C,cAA/C;AACH,CARD,EAQG,QAAQ,WAAR,KAAwB,QAAQ,WAAR,GAAsB,EAA9C,CARH;AASA,IAAI,cAAc,QAAQ,WAA1B;AACA","file":"enums-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\n/**\n * Supported http methods.\n * @experimental\n */\n(function (RequestMethod) {\n    RequestMethod[RequestMethod[\"Get\"] = 0] = \"Get\";\n    RequestMethod[RequestMethod[\"Post\"] = 1] = \"Post\";\n    RequestMethod[RequestMethod[\"Put\"] = 2] = \"Put\";\n    RequestMethod[RequestMethod[\"Delete\"] = 3] = \"Delete\";\n    RequestMethod[RequestMethod[\"Options\"] = 4] = \"Options\";\n    RequestMethod[RequestMethod[\"Head\"] = 5] = \"Head\";\n    RequestMethod[RequestMethod[\"Patch\"] = 6] = \"Patch\";\n})(exports.RequestMethod || (exports.RequestMethod = {}));\nvar RequestMethod = exports.RequestMethod;\n/**\n * All possible states in which a connection can be, based on\n * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n * additional \"CANCELLED\" state.\n * @experimental\n */\n(function (ReadyState) {\n    ReadyState[ReadyState[\"Unsent\"] = 0] = \"Unsent\";\n    ReadyState[ReadyState[\"Open\"] = 1] = \"Open\";\n    ReadyState[ReadyState[\"HeadersReceived\"] = 2] = \"HeadersReceived\";\n    ReadyState[ReadyState[\"Loading\"] = 3] = \"Loading\";\n    ReadyState[ReadyState[\"Done\"] = 4] = \"Done\";\n    ReadyState[ReadyState[\"Cancelled\"] = 5] = \"Cancelled\";\n})(exports.ReadyState || (exports.ReadyState = {}));\nvar ReadyState = exports.ReadyState;\n/**\n * Acceptable response types to be associated with a {@link Response}, based on\n * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n * @experimental\n */\n(function (ResponseType) {\n    ResponseType[ResponseType[\"Basic\"] = 0] = \"Basic\";\n    ResponseType[ResponseType[\"Cors\"] = 1] = \"Cors\";\n    ResponseType[ResponseType[\"Default\"] = 2] = \"Default\";\n    ResponseType[ResponseType[\"Error\"] = 3] = \"Error\";\n    ResponseType[ResponseType[\"Opaque\"] = 4] = \"Opaque\";\n})(exports.ResponseType || (exports.ResponseType = {}));\nvar ResponseType = exports.ResponseType;\n/**\n * Supported content type to be automatically associated with a {@link Request}.\n * @experimental\n */\n(function (ContentType) {\n    ContentType[ContentType[\"NONE\"] = 0] = \"NONE\";\n    ContentType[ContentType[\"JSON\"] = 1] = \"JSON\";\n    ContentType[ContentType[\"FORM\"] = 2] = \"FORM\";\n    ContentType[ContentType[\"FORM_DATA\"] = 3] = \"FORM_DATA\";\n    ContentType[ContentType[\"TEXT\"] = 4] = \"TEXT\";\n    ContentType[ContentType[\"BLOB\"] = 5] = \"BLOB\";\n    ContentType[ContentType[\"ARRAY_BUFFER\"] = 6] = \"ARRAY_BUFFER\";\n})(exports.ContentType || (exports.ContentType = {}));\nvar ContentType = exports.ContentType;\n//# sourceMappingURL=enums.js.map"]}