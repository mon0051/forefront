{"version":3,"sources":["http.js"],"names":[],"mappings":"AAAA;;;;;;;AAOA;;AACA,IAAI,kBAAkB,QAAQ,8BAAR,CAAtB;AACA,IAAI,gBAAgB,QAAQ,4BAAR,CAApB;AACA,IAAI,kBAAkB,QAAQ,8BAAR,CAAtB;AACA,IAAI,gBAAgB,QAAQ,4BAAR,CAApB;AACA,IAAI,yBAAyB,QAAQ,4BAAR,CAA7B;AACA,IAAI,0BAA0B,QAAQ,6BAAR,CAA9B;AACA,IAAI,SAAS,QAAQ,YAAR,CAAb;AACA,IAAI,eAAe,QAAQ,kBAAR,CAAnB;AACA,IAAI,gBAAgB,QAAQ,4BAAR,CAApB;AACA,QAAQ,UAAR,GAAqB,cAAc,UAAnC;AACA,IAAI,kBAAkB,QAAQ,8BAAR,CAAtB;AACA,QAAQ,YAAR,GAAuB,gBAAgB,YAAvC;AACA,QAAQ,eAAR,GAA0B,gBAAgB,eAA1C;AACA,IAAI,gBAAgB,QAAQ,4BAAR,CAApB;AACA,QAAQ,kBAAR,GAA6B,cAAc,kBAA3C;AACA,QAAQ,UAAR,GAAqB,cAAc,UAAnC;AACA,QAAQ,aAAR,GAAwB,cAAc,aAAtC;AACA,IAAI,yBAAyB,QAAQ,4BAAR,CAA7B;AACA,QAAQ,kBAAR,GAA6B,uBAAuB,kBAApD;AACA,QAAQ,cAAR,GAAyB,uBAAuB,cAAhD;AACA,IAAI,0BAA0B,QAAQ,6BAAR,CAA9B;AACA,QAAQ,mBAAR,GAA8B,wBAAwB,mBAAtD;AACA,QAAQ,eAAR,GAA0B,wBAAwB,eAAlD;AACA,IAAI,UAAU,QAAQ,aAAR,CAAd;AACA,QAAQ,UAAR,GAAqB,QAAQ,UAA7B;AACA,QAAQ,aAAR,GAAwB,QAAQ,aAAhC;AACA,QAAQ,YAAR,GAAuB,QAAQ,YAA/B;AACA,IAAI,YAAY,QAAQ,eAAR,CAAhB;AACA,QAAQ,OAAR,GAAkB,UAAU,OAA5B;AACA,IAAI,SAAS,QAAQ,YAAR,CAAb;AACA,QAAQ,IAAR,GAAe,OAAO,IAAtB;AACA,QAAQ,KAAR,GAAgB,OAAO,KAAvB;AACA,IAAI,eAAe,QAAQ,kBAAR,CAAnB;AACA,QAAQ,UAAR,GAAqB,aAAa,UAAlC;AACA,QAAQ,iBAAR,GAA4B,aAAa,iBAAzC;AACA,QAAQ,YAAR,GAAuB,aAAa,YAApC;AACA,IAAI,mBAAmB,QAAQ,sBAAR,CAAvB;AACA,QAAQ,OAAR,GAAkB,iBAAiB,OAAnC;AACA,IAAI,oBAAoB,QAAQ,uBAAR,CAAxB;AACA,QAAQ,QAAR,GAAmB,kBAAkB,QAArC;AACA,IAAI,sBAAsB,QAAQ,yBAAR,CAA1B;AACA,QAAQ,YAAR,GAAuB,oBAAoB,YAA3C;AACA,QAAQ,eAAR,GAA0B,oBAAoB,eAA9C;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiJA,QAAQ,cAAR,GAAyB;AACrB;AACA;AACA,EAAE,SAAS,OAAO,IAAlB,EAAwB,YAAY,WAApC,EAAiD,MAAM,CAAC,cAAc,UAAf,EAA2B,uBAAuB,cAAlD,CAAvD,EAHqB,EAIrB,cAAc,UAJO,EAKrB,EAAE,SAAS,uBAAuB,cAAlC,EAAkD,UAAU,uBAAuB,kBAAnF,EALqB,EAMrB,EAAE,SAAS,wBAAwB,eAAnC,EAAoD,UAAU,wBAAwB,mBAAtF,EANqB,EAOrB,cAAc,UAPO,EAQrB,EAAE,SAAS,aAAa,YAAxB,EAAsC,UAAU,IAAI,cAAc,kBAAlB,EAAhD,EARqB,CAAzB;AAUA;;;AAGA,SAAS,WAAT,CAAqB,UAArB,EAAiC,cAAjC,EAAiD;AAC7C,SAAO,IAAI,OAAO,IAAX,CAAgB,UAAhB,EAA4B,cAA5B,CAAP;AACH;AACD,QAAQ,WAAR,GAAsB,WAAtB;AACA;;;;;AAKA,QAAQ,aAAR,GAAwB,QAAQ,cAAhC;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6GA,QAAQ,eAAR,GAA0B;AACtB;AACA;AACA,EAAE,SAAS,OAAO,KAAlB,EAAyB,YAAY,YAArC,EAAmD,MAAM,CAAC,gBAAgB,YAAjB,EAA+B,uBAAuB,cAAtD,CAAzD,EAHsB,EAItB,gBAAgB,YAJM,EAKtB,EAAE,SAAS,uBAAuB,cAAlC,EAAkD,UAAU,uBAAuB,kBAAnF,EALsB,EAMtB,EAAE,SAAS,wBAAwB,eAAnC,EAAoD,UAAU,wBAAwB,mBAAtF,EANsB,EAOtB,EAAE,SAAS,gBAAgB,YAA3B,EAAyC,UAAU,gBAAgB,aAAnE,EAPsB,CAA1B;AASA,SAAS,YAAT,CAAsB,YAAtB,EAAoC,cAApC,EAAoD;AAChD,SAAO,IAAI,OAAO,KAAX,CAAiB,YAAjB,EAA+B,cAA/B,CAAP;AACH;AACD;;;;;AAKA,QAAQ,aAAR,GAAwB,QAAQ,eAAhC;AACA","file":"http-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\nvar browser_jsonp_1 = require('./src/backends/browser_jsonp');\nvar browser_xhr_1 = require('./src/backends/browser_xhr');\nvar jsonp_backend_1 = require('./src/backends/jsonp_backend');\nvar xhr_backend_1 = require('./src/backends/xhr_backend');\nvar base_request_options_1 = require('./src/base_request_options');\nvar base_response_options_1 = require('./src/base_response_options');\nvar http_1 = require('./src/http');\nvar interfaces_1 = require('./src/interfaces');\nvar browser_xhr_2 = require('./src/backends/browser_xhr');\nexports.BrowserXhr = browser_xhr_2.BrowserXhr;\nvar jsonp_backend_2 = require('./src/backends/jsonp_backend');\nexports.JSONPBackend = jsonp_backend_2.JSONPBackend;\nexports.JSONPConnection = jsonp_backend_2.JSONPConnection;\nvar xhr_backend_2 = require('./src/backends/xhr_backend');\nexports.CookieXSRFStrategy = xhr_backend_2.CookieXSRFStrategy;\nexports.XHRBackend = xhr_backend_2.XHRBackend;\nexports.XHRConnection = xhr_backend_2.XHRConnection;\nvar base_request_options_2 = require('./src/base_request_options');\nexports.BaseRequestOptions = base_request_options_2.BaseRequestOptions;\nexports.RequestOptions = base_request_options_2.RequestOptions;\nvar base_response_options_2 = require('./src/base_response_options');\nexports.BaseResponseOptions = base_response_options_2.BaseResponseOptions;\nexports.ResponseOptions = base_response_options_2.ResponseOptions;\nvar enums_1 = require('./src/enums');\nexports.ReadyState = enums_1.ReadyState;\nexports.RequestMethod = enums_1.RequestMethod;\nexports.ResponseType = enums_1.ResponseType;\nvar headers_1 = require('./src/headers');\nexports.Headers = headers_1.Headers;\nvar http_2 = require('./src/http');\nexports.Http = http_2.Http;\nexports.Jsonp = http_2.Jsonp;\nvar interfaces_2 = require('./src/interfaces');\nexports.Connection = interfaces_2.Connection;\nexports.ConnectionBackend = interfaces_2.ConnectionBackend;\nexports.XSRFStrategy = interfaces_2.XSRFStrategy;\nvar static_request_1 = require('./src/static_request');\nexports.Request = static_request_1.Request;\nvar static_response_1 = require('./src/static_response');\nexports.Response = static_response_1.Response;\nvar url_search_params_1 = require('./src/url_search_params');\nexports.QueryEncoder = url_search_params_1.QueryEncoder;\nexports.URLSearchParams = url_search_params_1.URLSearchParams;\n/**\n * Provides a basic set of injectables to use the {@link Http} service in any application.\n *\n * The `HTTP_PROVIDERS` should be included either in a component's injector,\n * or in the root injector when bootstrapping an application.\n *\n * ### Example ([live demo](http://plnkr.co/edit/snj7Nv?p=preview))\n *\n * ```\n * import {Component} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {NgFor} from '@angular/common';\n * import {HTTP_PROVIDERS, Http} from '@angular/http';\n *\n * @Component({\n *   selector: 'app',\n *   providers: [HTTP_PROVIDERS],\n *   template: `\n *     <div>\n *       <h1>People</h1>\n *       <ul>\n *         <li *ngFor=\"let person of people\">\n *           {{person.name}}\n *         </li>\n *       </ul>\n *     </div>\n *   `,\n *   directives: [NgFor]\n * })\n * export class App {\n *   people: Object[];\n *   constructor(http:Http) {\n *     http.get('people.json').subscribe(res => {\n *       this.people = res.json();\n *     });\n *   }\n *   active:boolean = false;\n *   toggleActiveState() {\n *     this.active = !this.active;\n *   }\n * }\n *\n * bootstrap(App)\n *   .catch(err => console.error(err));\n * ```\n *\n * The primary public API included in `HTTP_PROVIDERS` is the {@link Http} class.\n * However, other providers required by `Http` are included,\n * which may be beneficial to override in certain cases.\n *\n * The providers included in `HTTP_PROVIDERS` include:\n *  * {@link Http}\n *  * {@link XHRBackend}\n *  * {@link XSRFStrategy} - Bound to {@link CookieXSRFStrategy} class (see below)\n *  * `BrowserXHR` - Private factory to create `XMLHttpRequest` instances\n *  * {@link RequestOptions} - Bound to {@link BaseRequestOptions} class\n *  * {@link ResponseOptions} - Bound to {@link BaseResponseOptions} class\n *\n * There may be cases where it makes sense to extend the base request options,\n * such as to add a search string to be appended to all URLs.\n * To accomplish this, a new provider for {@link RequestOptions} should\n * be added in the same injector as `HTTP_PROVIDERS`.\n *\n * ### Example ([live demo](http://plnkr.co/edit/aCMEXi?p=preview))\n *\n * ```\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, BaseRequestOptions, RequestOptions} from '@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}])\n *   .catch(err => console.error(err));\n * ```\n *\n * Likewise, to use a mock backend for unit tests, the {@link XHRBackend}\n * provider should be bound to {@link MockBackend}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/7LWALD?p=preview))\n *\n * ```\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Http, Response, XHRBackend} from '@angular/http';\n * import {MockBackend} from '@angular/http/testing';\n *\n * var people = [{name: 'Jeff'}, {name: 'Tobias'}];\n *\n * var injector = Injector.resolveAndCreate([\n *   HTTP_PROVIDERS,\n *   MockBackend,\n *   {provide: XHRBackend, useExisting: MockBackend}\n * ]);\n * var http = injector.get(Http);\n * var backend = injector.get(MockBackend);\n *\n * // Listen for any new requests\n * backend.connections.observer({\n *   next: connection => {\n *     var response = new Response({body: people});\n *     setTimeout(() => {\n *       // Send a response to the request\n *       connection.mockRespond(response);\n *     });\n *   }\n * });\n *\n * http.get('people.json').observer({\n *   next: res => {\n *     // Response came from mock backend\n *     console.log('first person', res.json()[0].name);\n *   }\n * });\n * ```\n *\n * `XSRFStrategy` allows customizing how the application protects itself against Cross Site Request\n * Forgery (XSRF) attacks. By default, Angular will look for a cookie called `'XSRF-TOKEN'`, and set\n * an HTTP request header called `'X-XSRF-TOKEN'` with the value of the cookie on each request,\n * allowing the server side to validate that the request comes from its own front end.\n *\n * Applications can override the names used by configuring a different `XSRFStrategy` instance. Most\n * commonly, applications will configure a `CookieXSRFStrategy` with different cookie or header\n * names, but if needed, they can supply a completely custom implementation.\n *\n * See the security documentation for more information.\n *\n * ### Example\n *\n * ```\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, XSRFStrategy, CookieXSRFStrategy} from '@angular/http';\n *\n * bootstrap(\n *     App,\n *     [HTTP_PROVIDERS, {provide: XSRFStrategy,\n *         useValue: new CookieXSRFStrategy('MY-XSRF-COOKIE-NAME', 'X-MY-XSRF-HEADER-NAME')}])\n *   .catch(err => console.error(err));\n * ```\n *\n * @experimental\n */\nexports.HTTP_PROVIDERS = [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    { provide: http_1.Http, useFactory: httpFactory, deps: [xhr_backend_1.XHRBackend, base_request_options_1.RequestOptions] },\n    browser_xhr_1.BrowserXhr,\n    { provide: base_request_options_1.RequestOptions, useClass: base_request_options_1.BaseRequestOptions },\n    { provide: base_response_options_1.ResponseOptions, useClass: base_response_options_1.BaseResponseOptions },\n    xhr_backend_1.XHRBackend,\n    { provide: interfaces_1.XSRFStrategy, useValue: new xhr_backend_1.CookieXSRFStrategy() },\n];\n/**\n * @experimental\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new http_1.Http(xhrBackend, requestOptions);\n}\nexports.httpFactory = httpFactory;\n/**\n * See {@link HTTP_PROVIDERS} instead.\n *\n * @deprecated\n */\nexports.HTTP_BINDINGS = exports.HTTP_PROVIDERS;\n/**\n * Provides a basic set of providers to use the {@link Jsonp} service in any application.\n *\n * The `JSONP_PROVIDERS` should be included either in a component's injector,\n * or in the root injector when bootstrapping an application.\n *\n * ### Example ([live demo](http://plnkr.co/edit/vmeN4F?p=preview))\n *\n * ```\n * import {Component} from '@angular/core';\n * import {NgFor} from '@angular/common';\n * import {JSONP_PROVIDERS, Jsonp} from '@angular/http';\n *\n * @Component({\n *   selector: 'app',\n *   providers: [JSONP_PROVIDERS],\n *   template: `\n *     <div>\n *       <h1>People</h1>\n *       <ul>\n *         <li *ngFor=\"let person of people\">\n *           {{person.name}}\n *         </li>\n *       </ul>\n *     </div>\n *   `,\n *   directives: [NgFor]\n * })\n * export class App {\n *   people: Array<Object>;\n *   constructor(jsonp:Jsonp) {\n *     jsonp.request('people.json').subscribe(res => {\n *       this.people = res.json();\n *     })\n *   }\n * }\n * ```\n *\n * The primary public API included in `JSONP_PROVIDERS` is the {@link Jsonp} class.\n * However, other providers required by `Jsonp` are included,\n * which may be beneficial to override in certain cases.\n *\n * The providers included in `JSONP_PROVIDERS` include:\n *  * {@link Jsonp}\n *  * {@link JSONPBackend}\n *  * `BrowserJsonp` - Private factory\n *  * {@link RequestOptions} - Bound to {@link BaseRequestOptions} class\n *  * {@link ResponseOptions} - Bound to {@link BaseResponseOptions} class\n *\n * There may be cases where it makes sense to extend the base request options,\n * such as to add a search string to be appended to all URLs.\n * To accomplish this, a new provider for {@link RequestOptions} should\n * be added in the same injector as `JSONP_PROVIDERS`.\n *\n * ### Example ([live demo](http://plnkr.co/edit/TFug7x?p=preview))\n *\n * ```\n * import {provide} from '@angular/core';\n * import {bootstrap} from '@angular/platform-browser/browser';\n * import {JSONP_PROVIDERS, BaseRequestOptions, RequestOptions} from '@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * bootstrap(App, [JSONP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}])\n *   .catch(err => console.error(err));\n * ```\n *\n * Likewise, to use a mock backend for unit tests, the {@link JSONPBackend}\n * provider should be bound to {@link MockBackend}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/HDqZWL?p=preview))\n *\n * ```\n * import {provide, Injector} from '@angular/core';\n * import {JSONP_PROVIDERS, Jsonp, Response, JSONPBackend} from '@angular/http';\n * import {MockBackend} from '@angular/http/testing';\n *\n * var people = [{name: 'Jeff'}, {name: 'Tobias'}];\n * var injector = Injector.resolveAndCreate([\n *   JSONP_PROVIDERS,\n *   MockBackend,\n *   {provide: JSONPBackend, useExisting: MockBackend}\n * ]);\n * var jsonp = injector.get(Jsonp);\n * var backend = injector.get(MockBackend);\n *\n * // Listen for any new requests\n * backend.connections.observer({\n *   next: connection => {\n *     var response = new Response({body: people});\n *     setTimeout(() => {\n *       // Send a response to the request\n *       connection.mockRespond(response);\n *     });\n *   }\n * });\n\n * jsonp.get('people.json').observer({\n *   next: res => {\n *     // Response came from mock backend\n *     console.log('first person', res.json()[0].name);\n *   }\n * });\n * ```\n *\n * @experimental\n */\nexports.JSONP_PROVIDERS = [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    { provide: http_1.Jsonp, useFactory: jsonpFactory, deps: [jsonp_backend_1.JSONPBackend, base_request_options_1.RequestOptions] },\n    browser_jsonp_1.BrowserJsonp,\n    { provide: base_request_options_1.RequestOptions, useClass: base_request_options_1.BaseRequestOptions },\n    { provide: base_response_options_1.ResponseOptions, useClass: base_response_options_1.BaseResponseOptions },\n    { provide: jsonp_backend_1.JSONPBackend, useClass: jsonp_backend_1.JSONPBackend_ },\n];\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new http_1.Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * See {@link JSONP_PROVIDERS} instead.\n *\n * @deprecated\n */\nexports.JSON_BINDINGS = exports.JSONP_PROVIDERS;\n//# sourceMappingURL=http.js.map"]}