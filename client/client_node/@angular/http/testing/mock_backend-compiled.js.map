{"version":3,"sources":["mock_backend.js"],"names":[],"mappings":"AAAA;;;;;;;AAOA;;AACA,IAAI,SAAS,QAAQ,eAAR,CAAb;AACA,IAAI,kBAAkB,QAAQ,oBAAR,CAAtB;AACA,IAAI,YAAY,QAAQ,cAAR,CAAhB;AACA,IAAI,SAAS,QAAQ,oBAAR,CAAb;AACA,IAAI,UAAU,QAAQ,cAAR,CAAd;AACA,IAAI,eAAe,QAAQ,0BAAR,CAAnB;AACA,IAAI,SAAS,QAAQ,oBAAR,CAAb;AACA,IAAI,mBAAmB,QAAQ,uBAAR,CAAvB;AACA;;;;;;AAMA,IAAI,iBAAkB,YAAY;AAC9B,aAAS,cAAT,CAAwB,GAAxB,EAA6B;AACzB,aAAK,QAAL,GAAgB,OAAO,IAAP,CAAY,IAAZ,CAAiB,IAAI,gBAAgB,aAApB,CAAkC,CAAlC,CAAjB,EAAuD,CAAvD,CAAhB;AACA,aAAK,UAAL,GAAkB,QAAQ,UAAR,CAAmB,IAArC;AACA,aAAK,OAAL,GAAe,GAAf;AACH;AACD;;;;;;;;;;;;;;;AAeA,mBAAe,SAAf,CAAyB,WAAzB,GAAuC,UAAU,GAAV,EAAe;AAClD,YAAI,KAAK,UAAL,KAAoB,QAAQ,UAAR,CAAmB,IAAvC,IAA+C,KAAK,UAAL,KAAoB,QAAQ,UAAR,CAAmB,SAA1F,EAAqG;AACjG,kBAAM,IAAI,aAAa,aAAjB,CAA+B,sCAA/B,CAAN;AACH;AACD,aAAK,UAAL,GAAkB,QAAQ,UAAR,CAAmB,IAArC;AACA,aAAK,QAAL,CAAc,IAAd,CAAmB,GAAnB;AACA,aAAK,QAAL,CAAc,QAAd;AACH,KAPD;AAQA;;;;;;AAMA,mBAAe,SAAf,CAAyB,YAAzB,GAAwC,UAAU,GAAV,EAAe;AACnD;AACA;AACA;AACA;AACH,KALD;AAMA;AACA;;;;;;;;;;;;;;;AAeA,mBAAe,SAAf,CAAyB,SAAzB,GAAqC,UAAU,GAAV,EAAe;AAChD;AACA,aAAK,UAAL,GAAkB,QAAQ,UAAR,CAAmB,IAArC;AACA,aAAK,QAAL,CAAc,KAAd,CAAoB,GAApB;AACH,KAJD;AAKA,WAAO,cAAP;AACH,CA/DqB,EAAtB;AAgEA,QAAQ,cAAR,GAAyB,cAAzB;AACA,IAAI,cAAe,YAAY;AAC3B,aAAS,WAAT,GAAuB;AACnB,YAAI,QAAQ,IAAZ;AACA,aAAK,gBAAL,GAAwB,EAAxB;AACA,aAAK,WAAL,GAAmB,IAAI,UAAU,OAAd,EAAnB;AACA,aAAK,WAAL,CAAiB,SAAjB,CAA2B,UAAU,UAAV,EAAsB;AAAE,mBAAO,MAAM,gBAAN,CAAuB,IAAvB,CAA4B,UAA5B,CAAP;AAAiD,SAApG;AACA,aAAK,kBAAL,GAA0B,IAAI,UAAU,OAAd,EAA1B;AACH;AACD;;;;;AAKA,gBAAY,SAAZ,CAAsB,uBAAtB,GAAgD,YAAY;AACxD,YAAI,UAAU,CAAd;AACA,aAAK,kBAAL,CAAwB,SAAxB,CAAkC,UAAU,CAAV,EAAa;AAAE,mBAAO,SAAP;AAAmB,SAApE;AACA,YAAI,UAAU,CAAd,EACI,MAAM,IAAI,aAAa,aAAjB,CAA+B,UAAU,qCAAzC,CAAN;AACP,KALD;AAMA;;;;;;AAMA,gBAAY,SAAZ,CAAsB,qBAAtB,GAA8C,YAAY;AAAE,aAAK,WAAL,CAAiB,SAAjB,CAA2B,UAAU,CAAV,EAAa;AAAE,mBAAO,EAAE,UAAF,GAAe,CAAtB;AAA0B,SAApE;AAAwE,KAApI;AACA;;;;;;AAMA,gBAAY,SAAZ,CAAsB,gBAAtB,GAAyC,UAAU,GAAV,EAAe;AACpD,YAAI,CAAC,OAAO,SAAP,CAAiB,GAAjB,CAAD,IAA0B,EAAE,eAAe,iBAAiB,OAAlC,CAA9B,EAA0E;AACtE,kBAAM,IAAI,aAAa,aAAjB,CAA+B,2DAA2D,GAA1F,CAAN;AACH;AACD,YAAI,aAAa,IAAI,cAAJ,CAAmB,GAAnB,CAAjB;AACA,aAAK,WAAL,CAAiB,IAAjB,CAAsB,UAAtB;AACA,eAAO,UAAP;AACH,KAPD;AAQA;AACA,gBAAY,UAAZ,GAAyB,CACrB,EAAE,MAAM,OAAO,UAAf,EADqB,CAAzB;AAGA;AACA,gBAAY,cAAZ,GAA6B,EAA7B;AACA,WAAO,WAAP;AACH,CA/CkB,EAAnB;AAgDA,QAAQ,WAAR,GAAsB,WAAtB;AACA","file":"mock_backend-compiled.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\"use strict\";\nvar core_1 = require('@angular/core');\nvar ReplaySubject_1 = require('rxjs/ReplaySubject');\nvar Subject_1 = require('rxjs/Subject');\nvar take_1 = require('rxjs/operator/take');\nvar enums_1 = require('../src/enums');\nvar exceptions_1 = require('../src/facade/exceptions');\nvar lang_1 = require('../src/facade/lang');\nvar static_request_1 = require('../src/static_request');\n/**\n *\n * Mock Connection to represent a {@link Connection} for tests.\n *\n * @experimental\n */\nvar MockConnection = (function () {\n    function MockConnection(req) {\n        this.response = take_1.take.call(new ReplaySubject_1.ReplaySubject(1), 1);\n        this.readyState = enums_1.ReadyState.Open;\n        this.request = req;\n    }\n    /**\n     * Sends a mock response to the connection. This response is the value that is emitted to the\n     * {@link EventEmitter} returned by {@link Http}.\n     *\n     * ### Example\n     *\n     * ```\n     * var connection;\n     * backend.connections.subscribe(c => connection = c);\n     * http.request('data.json').subscribe(res => console.log(res.text()));\n     * connection.mockRespond(new Response(new ResponseOptions({ body: 'fake response' }))); //logs\n     * 'fake response'\n     * ```\n     *\n     */\n    MockConnection.prototype.mockRespond = function (res) {\n        if (this.readyState === enums_1.ReadyState.Done || this.readyState === enums_1.ReadyState.Cancelled) {\n            throw new exceptions_1.BaseException('Connection has already been resolved');\n        }\n        this.readyState = enums_1.ReadyState.Done;\n        this.response.next(res);\n        this.response.complete();\n    };\n    /**\n     * Not yet implemented!\n     *\n     * Sends the provided {@link Response} to the `downloadObserver` of the `Request`\n     * associated with this connection.\n     */\n    MockConnection.prototype.mockDownload = function (res) {\n        // this.request.downloadObserver.onNext(res);\n        // if (res.bytesLoaded === res.totalBytes) {\n        //   this.request.downloadObserver.onCompleted();\n        // }\n    };\n    // TODO(jeffbcross): consider using Response type\n    /**\n     * Emits the provided error object as an error to the {@link Response} {@link EventEmitter}\n     * returned\n     * from {@link Http}.\n     *\n     * ### Example\n     *\n     * ```\n     * var connection;\n     * backend.connections.subscribe(c => connection = c);\n     * http.request('data.json').subscribe(res => res, err => console.log(err)));\n     * connection.mockError(new Error('error'));\n     * ```\n     *\n     */\n    MockConnection.prototype.mockError = function (err) {\n        // Matches XHR semantics\n        this.readyState = enums_1.ReadyState.Done;\n        this.response.error(err);\n    };\n    return MockConnection;\n}());\nexports.MockConnection = MockConnection;\nvar MockBackend = (function () {\n    function MockBackend() {\n        var _this = this;\n        this.connectionsArray = [];\n        this.connections = new Subject_1.Subject();\n        this.connections.subscribe(function (connection) { return _this.connectionsArray.push(connection); });\n        this.pendingConnections = new Subject_1.Subject();\n    }\n    /**\n     * Checks all connections, and raises an exception if any connection has not received a response.\n     *\n     * This method only exists in the mock implementation, not in real Backends.\n     */\n    MockBackend.prototype.verifyNoPendingRequests = function () {\n        var pending = 0;\n        this.pendingConnections.subscribe(function (c) { return pending++; });\n        if (pending > 0)\n            throw new exceptions_1.BaseException(pending + \" pending connections to be resolved\");\n    };\n    /**\n     * Can be used in conjunction with `verifyNoPendingRequests` to resolve any not-yet-resolve\n     * connections, if it's expected that there are connections that have not yet received a response.\n     *\n     * This method only exists in the mock implementation, not in real Backends.\n     */\n    MockBackend.prototype.resolveAllConnections = function () { this.connections.subscribe(function (c) { return c.readyState = 4; }); };\n    /**\n     * Creates a new {@link MockConnection}. This is equivalent to calling `new\n     * MockConnection()`, except that it also will emit the new `Connection` to the `connections`\n     * emitter of this `MockBackend` instance. This method will usually only be used by tests\n     * against the framework itself, not by end-users.\n     */\n    MockBackend.prototype.createConnection = function (req) {\n        if (!lang_1.isPresent(req) || !(req instanceof static_request_1.Request)) {\n            throw new exceptions_1.BaseException(\"createConnection requires an instance of Request, got \" + req);\n        }\n        var connection = new MockConnection(req);\n        this.connections.next(connection);\n        return connection;\n    };\n    /** @nocollapse */\n    MockBackend.decorators = [\n        { type: core_1.Injectable },\n    ];\n    /** @nocollapse */\n    MockBackend.ctorParameters = [];\n    return MockBackend;\n}());\nexports.MockBackend = MockBackend;\n//# sourceMappingURL=mock_backend.js.map"]}